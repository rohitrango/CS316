
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftTHENleftELSEleftPLUSMINUSleftSTARSLASHrightUMINUSAND COMMA ELSE EQUALS FLOAT GT ID IF INT LCURL LPAREN LT MINUS NOT NUM NUMFLOAT OR PLUS RCURL RETURN RPAREN SEMICOLON SLASH STAR VOID WHILE prog : declarations procedures\n\t \n\t\tdeclarations : declarations decl SEMICOLON\n\t\t\t\t     | declarations func_proto\n\t\t\t\t     |\n\t\n\t\tfunc_proto : type fname LPAREN params RPAREN SEMICOLON\n\t\n\t\tprocedures : procedures procedure\n\t\t\t\t  | procedure \t\n\t\n\t\ttype : VOID \n\t\t\t | INT\n\t\t\t | FLOAT\n\t\n\t\tprocedure : type fname LPAREN params RPAREN LCURL declarations_func body RCURL\n\t \n\t\tdeclarations_func : declarations_func decl SEMICOLON\n\t\t\t\t     \t  |\n\t\n\t\treturn_stmt : RETURN ptr_expr SEMICOLON\n\t\n\t\tfname : STAR fname\n\t\t\t  | ID\n\t\n\t\tparams \t: type ID paramslist \n\t\t\t\t| type ptr paramslist\n\t\t\t\t| type addr paramslist\n\t\t\t   \t| \n\t\n\t\tparamslist \t: COMMA type ID paramslist\n\t\t\t\t\t| COMMA type addr paramslist\n\t\t\t\t\t| COMMA type ptr paramslist\n\t\t\t\t\t| \n\t body : body stmt\n\t\t\t | stmt\n\t stmt : assgn SEMICOLON\n\t\t\t | if_stmt \n\t\t\t | while_stmt\n\t\t\t | function_call SEMICOLON\n\t\t\t | return_stmt\n\t function_call : ID LPAREN opt_params RPAREN\n\t opt_params  : ID opt_params_list\n\t\t\t\t\t| ptr opt_params_list\n\t\t\t\t\t| addr opt_params_list\n\t\t\t\t\t| \n\n\t\topt_params_list : COMMA ID opt_params_list\n\t\t\t\t\t\t| COMMA ptr opt_params_list\n\t\t\t\t\t\t| COMMA addr opt_params_list\n\t\t\t\t\t\t|\n\t\n\t\tif_stmt : IF LPAREN bool_expr RPAREN compound_stmt \t\t\t\t%prec THEN\n\t\t\t\t| IF LPAREN bool_expr RPAREN compound_stmt ELSE compound_stmt\n\t\n\t\twhile_stmt : WHILE LPAREN bool_expr RPAREN compound_stmt\n\t\n\t\tcompound_stmt : stmt\n\t\t\t\t\t  | SEMICOLON\n\t\t\t\t\t  | LCURL RCURL\n\t\t\t\t\t  | LCURL body RCURL\n\t assgn : ptr_assgn\n\t \t\t  | num_assgn\n\t decl : type decl_list\n\t decl_list : decl_list COMMA ID\n\t\t\t\t | decl_list COMMA ptr\n\t\t\t\t | ID\n\t\t\t\t | ptr\n\t ptr_assgn : ptr EQUALS ptr_expr  num_assgn : ID EQUALS ptr_expr\n\t\tbool_expr : bool_expr OR OR a_bool_expr \n\t\t\t\t  | a_bool_expr\n\t\ta_bool_expr : a_bool_expr AND AND n_bool_expr \n\t\t\t\t \t| n_bool_expr\n\t\tn_bool_expr : NOT n_bool_expr \n\t\t\t\t | sub_bool_expr\n\t\t\t\t | LPAREN bool_expr RPAREN\n\t sub_bool_expr : ptr_expr GT ptr_expr\n\t\t\t\t\t  | ptr_expr GT EQUALS ptr_expr\n\t\t\t\t\t  | ptr_expr LT ptr_expr\n\t\t\t\t\t  | ptr_expr LT EQUALS ptr_expr\n\t\t\t\t\t  | ptr_expr EQUALS EQUALS ptr_expr\n\t\t\t\t\t  | ptr_expr NOT EQUALS ptr_expr\n\t\tptr_expr : ptr_expr PLUS ptr_factor \n\t\t\t\t | ptr_expr MINUS ptr_factor\n\t\t\t\t | ptr_factor\n\t\n\t\tptr_factor :  ptr_factor STAR ptr_term\n\t\t\t\t \t| ptr_factor SLASH ptr_term\n\t\t\t\t \t| ptr_term\n\t ptr_term :  MINUS ptr_term  \t\t%prec UMINUS\n\t\t\t\t  | ptr_expr_base\n\t ptr_expr_base : ID\n\t\t\t\t| NUM\n\t\t\t\t| NUMFLOAT\n\t\t\t\t| ptr\n\t\t\t\t| function_call\n\t\t\t\t| addr\n\t\t\t\t| LPAREN ptr_expr RPAREN\n\t  ptr : STAR ptr \n\t\t\t | STAR ID\n\t\t\t | STAR addr\n\t addr : AND ID\n\t\t\t | AND ptr\n\t'
    
_lr_action_items = {'VOID':([0,2,3,5,6,11,13,23,29,45,48,49,51,75,77,],[-4,8,8,-3,-7,-6,-2,8,8,8,-5,-13,8,-11,-12,]),'INT':([0,2,3,5,6,11,13,23,29,45,48,49,51,75,77,],[-4,9,9,-3,-7,-6,-2,9,9,9,-5,-13,9,-11,-12,]),'FLOAT':([0,2,3,5,6,11,13,23,29,45,48,49,51,75,77,],[-4,10,10,-3,-7,-6,-2,10,10,10,-5,-13,10,-11,-12,]),'$end':([1,3,6,11,75,],[0,-1,-7,-6,-11,]),'SEMICOLON':([4,14,16,17,25,26,27,30,31,35,36,38,42,57,59,62,64,65,74,84,85,87,88,89,90,91,92,93,94,109,115,117,120,128,131,134,135,136,137,138,156,],[13,-50,-53,-54,-85,-86,-87,-51,-52,-88,-89,-86,48,77,78,79,-48,-49,-53,110,-72,-75,-77,-78,-79,-80,-81,-82,-83,-56,-76,-55,142,142,-32,-70,-71,-73,-74,-84,142,]),'ID':([7,8,9,10,12,18,20,22,28,32,33,49,50,51,55,56,58,60,61,63,69,76,77,78,79,80,81,82,83,86,95,96,97,101,110,111,112,113,114,120,124,126,128,130,140,141,142,143,144,145,147,148,150,151,152,156,157,158,168,169,],[16,-8,-9,-10,21,26,21,30,35,38,39,-13,52,68,74,68,-26,-28,-29,-31,89,-25,-12,-27,-30,89,89,105,89,89,89,89,89,89,-14,89,89,89,89,68,89,89,68,153,-41,-44,-45,68,89,89,89,89,89,89,-43,68,-46,68,-42,-47,]),'STAR':([7,8,9,10,12,18,20,22,25,27,28,32,33,35,36,38,49,50,51,55,56,58,60,61,63,69,76,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,101,110,111,112,113,114,115,120,124,126,128,130,131,134,135,136,137,138,140,141,142,143,144,145,147,148,150,151,152,156,157,158,168,169,],[18,-8,-9,-10,20,18,20,32,-85,-87,32,32,32,-88,-89,-86,-13,32,32,32,32,-26,-28,-29,-31,32,-25,-12,-27,-30,32,32,32,32,113,32,-75,-77,-78,-79,-80,-81,-82,-83,32,32,32,32,-14,32,32,32,32,-76,32,32,32,32,32,-32,113,113,-73,-74,-84,-41,-44,-45,32,32,32,32,32,32,32,-43,32,-46,32,-42,-47,]),'AND':([8,9,10,18,25,27,32,33,35,36,38,50,69,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,102,111,112,113,114,115,122,123,124,126,130,131,134,135,136,137,138,139,144,145,146,147,148,149,150,151,159,160,161,162,163,164,],[-8,-9,-10,28,-85,-87,28,28,-88,-89,-86,28,28,28,28,28,28,-72,28,-75,-77,-78,-79,-80,-81,-82,-83,28,28,28,122,-60,28,-62,28,28,28,28,-76,145,-61,28,28,28,-32,-70,-71,-73,-74,-84,-63,28,28,-64,28,28,-66,28,28,122,-59,-65,-68,-67,-69,]),'COMMA':([14,16,17,25,26,27,30,31,35,36,38,39,40,41,52,53,54,74,105,107,108,153,154,155,],[22,-53,-54,-85,-86,-87,-51,-52,-88,-89,-86,45,45,45,45,45,45,-53,130,130,130,130,130,130,]),'LPAREN':([15,16,19,21,24,26,66,67,68,69,80,81,83,86,89,95,96,97,101,111,112,113,114,124,126,144,145,147,148,150,151,],[23,-16,29,-16,-15,-16,80,81,82,95,97,97,95,95,82,95,95,97,97,95,95,95,95,95,95,97,97,95,95,95,95,]),'RPAREN':([23,25,27,29,34,35,36,37,38,39,40,41,44,46,47,52,53,54,71,72,73,82,85,87,88,89,90,91,92,93,94,98,99,100,102,104,105,106,107,108,115,116,118,119,123,129,131,132,133,134,135,136,137,138,139,146,149,153,154,155,159,160,161,162,163,164,165,166,167,],[-20,-85,-87,-20,42,-88,-89,43,-86,-24,-24,-24,-17,-18,-19,-24,-24,-24,-21,-22,-23,-36,-72,-75,-77,-78,-79,-80,-81,-82,-83,120,-58,-60,-62,128,-40,131,-40,-40,-76,138,139,138,-61,-33,-32,-34,-35,-70,-71,-73,-74,-84,-63,-64,-66,-40,-40,-40,-57,-59,-65,-68,-67,-69,-37,-38,-39,]),'EQUALS':([25,27,35,36,38,68,70,85,87,88,89,90,91,92,93,94,103,115,119,124,125,126,127,131,134,135,136,137,138,],[-85,-87,-88,-89,-86,83,96,-72,-75,-77,-78,-79,-80,-81,-82,-83,125,-76,125,147,148,150,151,-32,-70,-71,-73,-74,-84,]),'SLASH':([25,27,35,36,38,85,87,88,89,90,91,92,93,94,115,131,134,135,136,137,138,],[-85,-87,-88,-89,-86,114,-75,-77,-78,-79,-80,-81,-82,-83,-76,-32,114,114,-73,-74,-84,]),'PLUS':([25,27,35,36,38,84,85,87,88,89,90,91,92,93,94,103,109,115,116,117,119,131,134,135,136,137,138,146,149,161,162,163,164,],[-85,-87,-88,-89,-86,111,-72,-75,-77,-78,-79,-80,-81,-82,-83,111,111,-76,111,111,111,-32,-70,-71,-73,-74,-84,111,111,111,111,111,111,]),'MINUS':([25,27,35,36,38,69,80,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,101,103,109,111,112,113,114,115,116,117,119,124,126,131,134,135,136,137,138,144,145,146,147,148,149,150,151,161,162,163,164,],[-85,-87,-88,-89,-86,86,86,86,86,112,-72,86,-75,-77,-78,-79,-80,-81,-82,-83,86,86,86,86,112,112,86,86,86,86,-76,112,112,112,86,86,-32,-70,-71,-73,-74,-84,86,86,112,86,86,112,86,86,112,112,112,112,]),'GT':([25,27,35,36,38,85,87,88,89,90,91,92,93,94,103,115,119,131,134,135,136,137,138,],[-85,-87,-88,-89,-86,-72,-75,-77,-78,-79,-80,-81,-82,-83,124,-76,124,-32,-70,-71,-73,-74,-84,]),'LT':([25,27,35,36,38,85,87,88,89,90,91,92,93,94,103,115,119,131,134,135,136,137,138,],[-85,-87,-88,-89,-86,-72,-75,-77,-78,-79,-80,-81,-82,-83,126,-76,126,-32,-70,-71,-73,-74,-84,]),'NOT':([25,27,35,36,38,80,81,85,87,88,89,90,91,92,93,94,97,101,103,115,119,131,134,135,136,137,138,144,145,],[-85,-87,-88,-89,-86,101,101,-72,-75,-77,-78,-79,-80,-81,-82,-83,101,101,127,-76,127,-32,-70,-71,-73,-74,-84,101,101,]),'OR':([25,27,35,36,38,85,87,88,89,90,91,92,93,94,98,99,100,102,104,115,118,121,123,131,134,135,136,137,138,139,146,149,159,160,161,162,163,164,],[-85,-87,-88,-89,-86,-72,-75,-77,-78,-79,-80,-81,-82,-83,121,-58,-60,-62,121,-76,121,144,-61,-32,-70,-71,-73,-74,-84,-63,-64,-66,-57,-59,-65,-68,-67,-69,]),'LCURL':([42,43,120,128,156,],[49,49,143,143,143,]),'IF':([49,51,56,58,60,61,63,76,77,78,79,110,120,128,140,141,142,143,152,156,157,158,168,169,],[-13,66,66,-26,-28,-29,-31,-25,-12,-27,-30,-14,66,66,-41,-44,-45,66,-43,66,-46,66,-42,-47,]),'WHILE':([49,51,56,58,60,61,63,76,77,78,79,110,120,128,140,141,142,143,152,156,157,158,168,169,],[-13,67,67,-26,-28,-29,-31,-25,-12,-27,-30,-14,67,67,-41,-44,-45,67,-43,67,-46,67,-42,-47,]),'RETURN':([49,51,56,58,60,61,63,76,77,78,79,110,120,128,140,141,142,143,152,156,157,158,168,169,],[-13,69,69,-26,-28,-29,-31,-25,-12,-27,-30,-14,69,69,-41,-44,-45,69,-43,69,-46,69,-42,-47,]),'RCURL':([56,58,60,61,63,76,78,79,110,140,141,142,143,152,157,158,168,169,],[75,-26,-28,-29,-31,-25,-27,-30,-14,-41,-44,-45,157,-43,-46,169,-42,-47,]),'ELSE':([60,61,63,78,79,110,140,141,142,152,157,168,169,],[-28,-29,-31,-27,-30,-14,156,-44,-45,-43,-46,-42,-47,]),'NUM':([69,80,81,83,86,95,96,97,101,111,112,113,114,124,126,144,145,147,148,150,151,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'NUMFLOAT':([69,80,81,83,86,95,96,97,101,111,112,113,114,124,126,144,145,147,148,150,151,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'declarations':([0,],[2,]),'procedures':([2,],[3,]),'decl':([2,51,],[4,57,]),'func_proto':([2,],[5,]),'procedure':([2,3,],[6,11,]),'type':([2,3,23,29,45,51,],[7,12,33,33,50,55,]),'decl_list':([7,55,],[14,14,]),'fname':([7,12,18,20,],[15,19,24,24,]),'ptr':([7,18,22,28,32,33,50,51,55,56,69,80,81,82,83,86,95,96,97,101,111,112,113,114,120,124,126,128,130,143,144,145,147,148,150,151,156,158,],[17,25,31,36,25,40,54,70,17,70,92,92,92,107,92,92,92,92,92,92,92,92,92,92,70,92,92,70,154,70,92,92,92,92,92,92,70,70,]),'addr':([18,32,33,50,69,80,81,82,83,86,95,96,97,101,111,112,113,114,124,126,130,144,145,147,148,150,151,],[27,27,41,53,94,94,94,108,94,94,94,94,94,94,94,94,94,94,94,94,155,94,94,94,94,94,94,]),'params':([23,29,],[34,37,]),'paramslist':([39,40,41,52,53,54,],[44,46,47,71,72,73,]),'declarations_func':([49,],[51,]),'body':([51,143,],[56,158,]),'stmt':([51,56,120,128,143,156,158,],[58,76,141,141,58,141,76,]),'assgn':([51,56,120,128,143,156,158,],[59,59,59,59,59,59,59,]),'if_stmt':([51,56,120,128,143,156,158,],[60,60,60,60,60,60,60,]),'while_stmt':([51,56,120,128,143,156,158,],[61,61,61,61,61,61,61,]),'function_call':([51,56,69,80,81,83,86,95,96,97,101,111,112,113,114,120,124,126,128,143,144,145,147,148,150,151,156,158,],[62,62,93,93,93,93,93,93,93,93,93,93,93,93,93,62,93,93,62,62,93,93,93,93,93,93,62,62,]),'return_stmt':([51,56,120,128,143,156,158,],[63,63,63,63,63,63,63,]),'ptr_assgn':([51,56,120,128,143,156,158,],[64,64,64,64,64,64,64,]),'num_assgn':([51,56,120,128,143,156,158,],[65,65,65,65,65,65,65,]),'ptr_expr':([69,80,81,83,95,96,97,101,124,126,144,145,147,148,150,151,],[84,103,103,109,116,117,119,103,146,149,103,103,161,162,163,164,]),'ptr_factor':([69,80,81,83,95,96,97,101,111,112,124,126,144,145,147,148,150,151,],[85,85,85,85,85,85,85,85,134,135,85,85,85,85,85,85,85,85,]),'ptr_term':([69,80,81,83,86,95,96,97,101,111,112,113,114,124,126,144,145,147,148,150,151,],[87,87,87,87,115,87,87,87,87,87,87,136,137,87,87,87,87,87,87,87,87,]),'ptr_expr_base':([69,80,81,83,86,95,96,97,101,111,112,113,114,124,126,144,145,147,148,150,151,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'bool_expr':([80,81,97,],[98,104,118,]),'a_bool_expr':([80,81,97,144,],[99,99,99,159,]),'n_bool_expr':([80,81,97,101,144,145,],[100,100,100,123,100,160,]),'sub_bool_expr':([80,81,97,101,144,145,],[102,102,102,102,102,102,]),'opt_params':([82,],[106,]),'opt_params_list':([105,107,108,153,154,155,],[129,132,133,165,166,167,]),'compound_stmt':([120,128,156,],[140,152,168,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> declarations procedures','prog',2,'p_def_prog','Parser.py',114),
  ('declarations -> declarations decl SEMICOLON','declarations',3,'p_def_declaration','Parser.py',136),
  ('declarations -> declarations func_proto','declarations',2,'p_def_declaration','Parser.py',137),
  ('declarations -> <empty>','declarations',0,'p_def_declaration','Parser.py',138),
  ('func_proto -> type fname LPAREN params RPAREN SEMICOLON','func_proto',6,'p_def_func_proto','Parser.py',149),
  ('procedures -> procedures procedure','procedures',2,'p_def_procedures','Parser.py',158),
  ('procedures -> procedure','procedures',1,'p_def_procedures','Parser.py',159),
  ('type -> VOID','type',1,'p_def_type','Parser.py',169),
  ('type -> INT','type',1,'p_def_type','Parser.py',170),
  ('type -> FLOAT','type',1,'p_def_type','Parser.py',171),
  ('procedure -> type fname LPAREN params RPAREN LCURL declarations_func body RCURL','procedure',9,'p_def_procedure','Parser.py',181),
  ('declarations_func -> declarations_func decl SEMICOLON','declarations_func',3,'p_def_declarations_func','Parser.py',191),
  ('declarations_func -> <empty>','declarations_func',0,'p_def_declarations_func','Parser.py',192),
  ('return_stmt -> RETURN ptr_expr SEMICOLON','return_stmt',3,'p_def_return_stmt','Parser.py',204),
  ('fname -> STAR fname','fname',2,'p_def_fname','Parser.py',212),
  ('fname -> ID','fname',1,'p_def_fname','Parser.py',213),
  ('params -> type ID paramslist','params',3,'p_def_parameters','Parser.py',226),
  ('params -> type ptr paramslist','params',3,'p_def_parameters','Parser.py',227),
  ('params -> type addr paramslist','params',3,'p_def_parameters','Parser.py',228),
  ('params -> <empty>','params',0,'p_def_parameters','Parser.py',229),
  ('paramslist -> COMMA type ID paramslist','paramslist',4,'p_def_paramslist','Parser.py',248),
  ('paramslist -> COMMA type addr paramslist','paramslist',4,'p_def_paramslist','Parser.py',249),
  ('paramslist -> COMMA type ptr paramslist','paramslist',4,'p_def_paramslist','Parser.py',250),
  ('paramslist -> <empty>','paramslist',0,'p_def_paramslist','Parser.py',251),
  ('body -> body stmt','body',2,'p_def_body','Parser.py',270),
  ('body -> stmt','body',1,'p_def_body','Parser.py',271),
  ('stmt -> assgn SEMICOLON','stmt',2,'p_def_stmt','Parser.py',281),
  ('stmt -> if_stmt','stmt',1,'p_def_stmt','Parser.py',282),
  ('stmt -> while_stmt','stmt',1,'p_def_stmt','Parser.py',283),
  ('stmt -> function_call SEMICOLON','stmt',2,'p_def_stmt','Parser.py',284),
  ('stmt -> return_stmt','stmt',1,'p_def_stmt','Parser.py',285),
  ('function_call -> ID LPAREN opt_params RPAREN','function_call',4,'p_def_function_call','Parser.py',291),
  ('opt_params -> ID opt_params_list','opt_params',2,'p_def_opt_params','Parser.py',297),
  ('opt_params -> ptr opt_params_list','opt_params',2,'p_def_opt_params','Parser.py',298),
  ('opt_params -> addr opt_params_list','opt_params',2,'p_def_opt_params','Parser.py',299),
  ('opt_params -> <empty>','opt_params',0,'p_def_opt_params','Parser.py',300),
  ('opt_params_list -> COMMA ID opt_params_list','opt_params_list',3,'p_def_opt_params','Parser.py',302),
  ('opt_params_list -> COMMA ptr opt_params_list','opt_params_list',3,'p_def_opt_params','Parser.py',303),
  ('opt_params_list -> COMMA addr opt_params_list','opt_params_list',3,'p_def_opt_params','Parser.py',304),
  ('opt_params_list -> <empty>','opt_params_list',0,'p_def_opt_params','Parser.py',305),
  ('if_stmt -> IF LPAREN bool_expr RPAREN compound_stmt','if_stmt',5,'p_def_if_stmt','Parser.py',330),
  ('if_stmt -> IF LPAREN bool_expr RPAREN compound_stmt ELSE compound_stmt','if_stmt',7,'p_def_if_stmt','Parser.py',331),
  ('while_stmt -> WHILE LPAREN bool_expr RPAREN compound_stmt','while_stmt',5,'p_def_while_stmt','Parser.py',343),
  ('compound_stmt -> stmt','compound_stmt',1,'p_def_compound_stmt','Parser.py',350),
  ('compound_stmt -> SEMICOLON','compound_stmt',1,'p_def_compound_stmt','Parser.py',351),
  ('compound_stmt -> LCURL RCURL','compound_stmt',2,'p_def_compound_stmt','Parser.py',352),
  ('compound_stmt -> LCURL body RCURL','compound_stmt',3,'p_def_compound_stmt','Parser.py',353),
  ('assgn -> ptr_assgn','assgn',1,'p_def_assgn','Parser.py',369),
  ('assgn -> num_assgn','assgn',1,'p_def_assgn','Parser.py',370),
  ('decl -> type decl_list','decl',2,'p_def_decl','Parser.py',376),
  ('decl_list -> decl_list COMMA ID','decl_list',3,'p_def_decl_list','Parser.py',383),
  ('decl_list -> decl_list COMMA ptr','decl_list',3,'p_def_decl_list','Parser.py',384),
  ('decl_list -> ID','decl_list',1,'p_def_decl_list','Parser.py',385),
  ('decl_list -> ptr','decl_list',1,'p_def_decl_list','Parser.py',386),
  ('ptr_assgn -> ptr EQUALS ptr_expr','ptr_assgn',3,'p_def_ptr_assgn','Parser.py',400),
  ('num_assgn -> ID EQUALS ptr_expr','num_assgn',3,'p_def_num_assgn','Parser.py',406),
  ('bool_expr -> bool_expr OR OR a_bool_expr','bool_expr',4,'p_def_bool_expr','Parser.py',418),
  ('bool_expr -> a_bool_expr','bool_expr',1,'p_def_bool_expr','Parser.py',419),
  ('a_bool_expr -> a_bool_expr AND AND n_bool_expr','a_bool_expr',4,'p_def_a_bool_expr','Parser.py',428),
  ('a_bool_expr -> n_bool_expr','a_bool_expr',1,'p_def_a_bool_expr','Parser.py',429),
  ('n_bool_expr -> NOT n_bool_expr','n_bool_expr',2,'p_def_n_bool_expr','Parser.py',437),
  ('n_bool_expr -> sub_bool_expr','n_bool_expr',1,'p_def_n_bool_expr','Parser.py',438),
  ('n_bool_expr -> LPAREN bool_expr RPAREN','n_bool_expr',3,'p_def_n_bool_expr','Parser.py',439),
  ('sub_bool_expr -> ptr_expr GT ptr_expr','sub_bool_expr',3,'p_def_sub_bool_expr','Parser.py',451),
  ('sub_bool_expr -> ptr_expr GT EQUALS ptr_expr','sub_bool_expr',4,'p_def_sub_bool_expr','Parser.py',452),
  ('sub_bool_expr -> ptr_expr LT ptr_expr','sub_bool_expr',3,'p_def_sub_bool_expr','Parser.py',453),
  ('sub_bool_expr -> ptr_expr LT EQUALS ptr_expr','sub_bool_expr',4,'p_def_sub_bool_expr','Parser.py',454),
  ('sub_bool_expr -> ptr_expr EQUALS EQUALS ptr_expr','sub_bool_expr',4,'p_def_sub_bool_expr','Parser.py',455),
  ('sub_bool_expr -> ptr_expr NOT EQUALS ptr_expr','sub_bool_expr',4,'p_def_sub_bool_expr','Parser.py',456),
  ('ptr_expr -> ptr_expr PLUS ptr_factor','ptr_expr',3,'p_def_ptr_add_expr','Parser.py',472),
  ('ptr_expr -> ptr_expr MINUS ptr_factor','ptr_expr',3,'p_def_ptr_add_expr','Parser.py',473),
  ('ptr_expr -> ptr_factor','ptr_expr',1,'p_def_ptr_add_expr','Parser.py',474),
  ('ptr_factor -> ptr_factor STAR ptr_term','ptr_factor',3,'p_def_ptr_factor','Parser.py',488),
  ('ptr_factor -> ptr_factor SLASH ptr_term','ptr_factor',3,'p_def_ptr_factor','Parser.py',489),
  ('ptr_factor -> ptr_term','ptr_factor',1,'p_def_ptr_factor','Parser.py',490),
  ('ptr_term -> MINUS ptr_term','ptr_term',2,'p_def_ptr_term','Parser.py',503),
  ('ptr_term -> ptr_expr_base','ptr_term',1,'p_def_ptr_term','Parser.py',504),
  ('ptr_expr_base -> ID','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',513),
  ('ptr_expr_base -> NUM','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',514),
  ('ptr_expr_base -> NUMFLOAT','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',515),
  ('ptr_expr_base -> ptr','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',516),
  ('ptr_expr_base -> function_call','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',517),
  ('ptr_expr_base -> addr','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',518),
  ('ptr_expr_base -> LPAREN ptr_expr RPAREN','ptr_expr_base',3,'p_def_ptr_expr_base','Parser.py',519),
  ('ptr -> STAR ptr','ptr',2,'p_def_ptr','Parser.py',539),
  ('ptr -> STAR ID','ptr',2,'p_def_ptr','Parser.py',540),
  ('ptr -> STAR addr','ptr',2,'p_def_ptr','Parser.py',541),
  ('addr -> AND ID','addr',2,'p_def_addr','Parser.py',550),
  ('addr -> AND ptr','addr',2,'p_def_addr','Parser.py',551),
]
