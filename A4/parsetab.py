
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftTHENleftELSEleftPLUSMINUSleftSTARSLASHrightUMINUSID STAR AND NUM LPAREN RPAREN COMMA LCURL RCURL SEMICOLON EQUALS PLUS MINUS SLASH LT GT NOT OR ELSE INT VOID IF WHILE FLOAT prog : declarations procedures\n\t \n\t\tdeclarations : declarations decl SEMICOLON\n\t\t\t\t     | \n\t\n\t\tprocedures : procedures procedure\n\t\t\t\t  | procedure \t\n\t\n\t\ttype : VOID \n\t\t\t | INT\n\t\t\t | FLOAT\n\t\n\t\tprocedure : type ID LPAREN params RPAREN LCURL declarations body RCURL\n\t\n\t\tparams \t: type ID paramslist \n\t\t\t\t| type ptr paramslist\n\t\t\t\t| type addr paramslist\n\t\t\t   \t| \n\t\n\t\tparamslist \t: COMMA type ID paramslist\n\t\t\t\t\t| COMMA type addr paramslist\n\t\t\t\t\t| COMMA type ptr paramslist\n\t\t\t\t\t| \n\t body : body stmt\n\t\t\t | stmt\n\t stmt : assgn SEMICOLON\n\t\t\t | if_stmt \n\t\t\t | while_stmt\n\t\t\t | function_call\n\t function_call : ID LPAREN opt_params RPAREN SEMICOLON\n\t opt_params  : ID opt_params_list\n\t\t\t\t\t| ptr opt_params_list\n\t\t\t\t\t| addr opt_params_list\n\t\t\t\t\t| \n\n\t\topt_params_list : COMMA ID opt_params_list\n\t\t\t\t\t\t| COMMA ptr opt_params_list\n\t\t\t\t\t\t| COMMA addr opt_params_list\n\t\t\t\t\t\t|\n\t\n\t\tif_stmt : IF LPAREN bool_expr RPAREN compound_stmt \t\t\t\t%prec THEN\n\t\t\t\t| IF LPAREN bool_expr RPAREN compound_stmt ELSE compound_stmt\n\t\n\t\twhile_stmt : WHILE LPAREN bool_expr RPAREN compound_stmt\n\t\n\t\tcompound_stmt : stmt\n\t\t\t\t\t  | SEMICOLON\n\t\t\t\t\t  | LCURL RCURL\n\t\t\t\t\t  | LCURL body RCURL\n\t assgn : ptr_assgn\n\t \t\t  | num_assgn\n\t decl : type decl_list\n\t decl_list : decl_list COMMA ID\n\t\t\t\t | decl_list COMMA ptr\n\t\t\t\t | ID\n\t\t\t\t | ptr\n\t ptr_assgn : ptr EQUALS ptr_expr  num_assgn : ID EQUALS ptr_expr\n\t\tbool_expr : bool_expr OR OR a_bool_expr \n\t\t\t\t  | a_bool_expr\n\t\ta_bool_expr : a_bool_expr AND AND n_bool_expr \n\t\t\t\t \t| n_bool_expr\n\t\tn_bool_expr : NOT n_bool_expr \n\t\t\t\t | sub_bool_expr\n\t\t\t\t | LPAREN bool_expr RPAREN\n\t sub_bool_expr : ptr_expr GT ptr_expr\n\t\t\t\t\t  | ptr_expr GT EQUALS ptr_expr\n\t\t\t\t\t  | ptr_expr LT ptr_expr\n\t\t\t\t\t  | ptr_expr LT EQUALS ptr_expr\n\t\t\t\t\t  | ptr_expr EQUALS EQUALS ptr_expr\n\t\t\t\t\t  | ptr_expr NOT EQUALS ptr_expr\n\t\tptr_expr : ptr_expr PLUS ptr_factor \n\t\t\t\t | ptr_expr MINUS ptr_factor\n\t\t\t\t | ptr_factor\n\t\n\t\tptr_factor :  ptr_factor STAR ptr_term\n\t\t\t\t \t| ptr_factor SLASH ptr_term\n\t\t\t\t \t| ptr_term\n\t ptr_term :  MINUS ptr_term  \t\t%prec UMINUS\n\t\t\t\t  | ptr_expr_base\n\t ptr_expr_base : ID\n\t\t\t\t| NUM\n\t\t\t\t| ptr\n\t\t\t\t| addr\n\t\t\t\t| LPAREN ptr_expr RPAREN\n\t  ptr : STAR ptr \n\t\t\t | STAR ID\n\t\t\t | STAR addr\n\t addr : AND ID\n\t\t\t | AND ptr\n\t\t\t | AND addr\n\t'
    
_lr_action_items = {'PLUS':([20,21,22,28,29,30,70,72,74,75,76,77,78,79,83,87,93,94,107,115,116,117,118,119,122,126,139,140,141,142,],[-77,-76,-75,-80,-79,-78,-72,-71,-69,-70,95,-67,-73,-64,95,95,-68,95,95,-74,-62,-63,-65,-66,95,95,95,95,95,95,]),'EQUALS':([20,21,22,28,29,30,42,49,70,72,74,75,77,78,79,83,93,101,102,103,104,107,115,116,117,118,119,],[-77,-76,-75,-80,-79,-78,58,61,-72,-71,-69,-70,-67,-73,-64,103,-68,121,123,124,125,103,-74,-62,-63,-65,-66,]),'MINUS':([20,21,22,28,29,30,58,59,61,65,70,71,72,73,74,75,76,77,78,79,82,83,85,87,93,94,95,96,97,98,101,104,107,115,116,117,118,119,120,121,122,123,124,125,126,131,139,140,141,142,],[-77,-76,-75,-80,-79,-78,71,71,71,71,-72,71,-71,71,-69,-70,96,-67,-73,-64,71,96,71,96,-68,96,71,71,71,71,71,71,96,-74,-62,-63,-65,-66,71,71,96,71,71,71,96,71,96,96,96,96,]),'NUM':([58,59,61,65,71,73,82,85,95,96,97,98,101,104,120,121,123,124,125,131,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'RCURL':([45,46,50,51,52,60,64,127,128,129,130,136,137,143,144,150,151,],[-23,-22,-19,63,-21,-20,-18,143,-37,-35,-36,-24,-33,-38,150,-39,-34,]),'LPAREN':([13,17,44,49,53,58,59,61,65,71,73,82,85,95,96,97,98,101,104,120,121,123,124,125,131,],[19,19,59,62,65,73,85,73,85,73,73,85,85,73,73,73,73,73,73,85,73,73,73,73,85,]),'SLASH':([20,21,22,28,29,30,70,72,74,75,77,78,79,93,115,116,117,118,119,],[-77,-76,-75,-80,-79,-78,-72,-71,-69,-70,-67,-73,98,-68,-74,98,98,-65,-66,]),'NOT':([20,21,22,28,29,30,59,65,70,72,74,75,77,78,79,82,83,85,93,107,115,116,117,118,119,120,131,],[-77,-76,-75,-80,-79,-78,82,82,-72,-71,-69,-70,-67,-73,-64,82,102,82,-68,102,-74,-62,-63,-65,-66,82,82,]),'OR':([20,21,22,28,29,30,70,72,74,75,77,78,79,80,81,84,86,92,93,100,106,108,115,116,117,118,119,122,126,132,138,139,140,141,142,145,],[-77,-76,-75,-80,-79,-78,-72,-71,-69,-70,-67,-73,-64,-50,-52,106,-54,106,-68,-53,131,106,-74,-62,-63,-65,-66,-58,-56,-55,-51,-59,-61,-60,-57,-49,]),'GT':([20,21,22,28,29,30,70,72,74,75,77,78,79,83,93,107,115,116,117,118,119,],[-77,-76,-75,-80,-79,-78,-72,-71,-69,-70,-67,-73,-64,104,-68,104,-74,-62,-63,-65,-66,]),'AND':([4,5,8,14,20,21,22,23,27,28,29,30,41,58,59,61,62,65,70,71,72,73,74,75,77,78,79,80,81,82,85,86,93,95,96,97,98,99,100,101,104,110,115,116,117,118,119,120,121,122,123,124,125,126,131,132,138,139,140,141,142,145,],[-7,-8,-6,23,-77,-76,-75,23,23,-80,-79,-78,23,23,23,23,23,23,-72,23,-71,23,-69,-70,-67,-73,-64,99,-52,23,23,-54,-68,23,23,23,23,120,-53,23,23,23,-74,-62,-63,-65,-66,23,23,-58,23,23,23,-56,23,-55,-51,-59,-61,-60,-57,99,]),'LT':([20,21,22,28,29,30,70,72,74,75,77,78,79,83,93,107,115,116,117,118,119,],[-77,-76,-75,-80,-79,-78,-72,-71,-69,-70,-67,-73,-64,101,-68,101,-74,-62,-63,-65,-66,]),'LCURL':([31,105,114,149,],[35,127,127,127,]),'SEMICOLON':([9,12,13,15,20,21,22,24,25,28,29,30,43,47,48,66,70,72,74,75,76,77,78,79,87,93,105,112,114,115,116,117,118,119,149,],[16,-42,-45,-46,-77,-76,-75,-43,-44,-80,-79,-78,-41,-40,60,-45,-72,-71,-69,-70,-47,-67,-73,-64,-48,-68,128,136,128,-74,-62,-63,-65,-66,128,]),'STAR':([4,5,6,8,14,16,18,20,21,22,23,27,28,29,30,35,40,41,45,46,50,51,52,54,58,59,60,61,62,64,65,70,71,72,73,74,75,77,78,79,82,85,93,95,96,97,98,101,104,105,110,114,115,116,117,118,119,120,121,123,124,125,127,128,129,130,131,136,137,143,144,149,150,151,],[-7,-8,14,-6,14,-2,14,-77,-76,-75,14,14,-80,-79,-78,-3,14,14,-23,-22,-19,14,-21,14,14,14,-20,14,14,-18,14,-72,14,-71,14,-69,-70,-67,-73,97,14,14,-68,14,14,14,14,14,14,14,14,14,-74,97,97,-65,-66,14,14,14,14,14,14,-37,-35,-36,14,-24,-33,-38,14,14,-39,-34,]),'ELSE':([45,46,52,60,128,129,130,136,137,143,150,151,],[-23,-22,-21,-20,-37,-35,-36,-24,149,-38,-39,-34,]),'FLOAT':([0,1,3,7,11,16,19,35,37,40,63,],[-3,5,5,-5,-4,-2,5,-3,5,5,-9,]),'WHILE':([16,35,40,45,46,50,51,52,60,64,105,114,127,128,129,130,136,137,143,144,149,150,151,],[-2,-3,44,-23,-22,-19,44,-21,-20,-18,44,44,44,-37,-35,-36,-24,-33,-38,44,44,-39,-34,]),'$end':([2,3,7,11,63,],[0,-1,-5,-4,-9,]),'RPAREN':([19,20,21,22,26,28,29,30,32,33,34,36,38,39,55,56,57,62,67,68,69,70,72,74,75,77,78,79,80,81,84,86,88,89,90,91,92,93,94,100,107,108,109,111,113,115,116,117,118,119,122,126,132,133,134,135,138,139,140,141,142,145,146,147,148,],[-13,-77,-76,-75,31,-80,-79,-78,-17,-17,-17,-12,-11,-10,-17,-17,-17,-28,-15,-14,-16,-72,-71,-69,-70,-67,-73,-64,-50,-52,105,-54,-32,-32,112,-32,114,-68,115,-53,115,132,-26,-25,-27,-74,-62,-63,-65,-66,-58,-56,-55,-32,-32,-32,-51,-59,-61,-60,-57,-49,-31,-29,-30,]),'ID':([4,5,6,8,10,14,16,18,23,27,35,40,41,45,46,50,51,52,54,58,59,60,61,62,64,65,71,73,82,85,95,96,97,98,101,104,105,110,114,120,121,123,124,125,127,128,129,130,131,136,137,143,144,149,150,151,],[-7,-8,13,-6,17,21,-2,24,30,34,-3,49,56,-23,-22,-19,49,-21,66,75,75,-20,75,89,-18,75,75,75,75,75,75,75,75,75,75,75,49,134,49,75,75,75,75,75,49,-37,-35,-36,75,-24,-33,-38,49,49,-39,-34,]),'VOID':([0,1,3,7,11,16,19,35,37,40,63,],[-3,8,8,-5,-4,-2,8,-3,8,8,-9,]),'COMMA':([12,13,15,20,21,22,24,25,28,29,30,32,33,34,55,56,57,66,88,89,91,133,134,135,],[18,-45,-46,-77,-76,-75,-43,-44,-80,-79,-78,37,37,37,37,37,37,-45,110,110,110,110,110,110,]),'IF':([16,35,40,45,46,50,51,52,60,64,105,114,127,128,129,130,136,137,143,144,149,150,151,],[-2,-3,53,-23,-22,-19,53,-21,-20,-18,53,53,53,-37,-35,-36,-24,-33,-38,53,53,-39,-34,]),'INT':([0,1,3,7,11,16,19,35,37,40,63,],[-3,4,4,-5,-4,-2,4,-3,4,4,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'procedures':([1,],[3,]),'addr':([14,23,27,41,58,59,61,62,65,71,73,82,85,95,96,97,98,101,104,110,120,121,123,124,125,131,],[20,28,32,55,78,78,78,91,78,78,78,78,78,78,78,78,78,78,78,133,78,78,78,78,78,78,]),'params':([19,],[26,]),'ptr':([6,14,18,23,27,40,41,51,54,58,59,61,62,65,71,73,82,85,95,96,97,98,101,104,105,110,114,120,121,123,124,125,127,131,144,149,],[15,22,25,29,33,42,57,42,15,70,70,70,88,70,70,70,70,70,70,70,70,70,70,70,42,135,42,70,70,70,70,70,42,70,42,42,]),'num_assgn':([40,51,105,114,127,144,149,],[43,43,43,43,43,43,43,]),'n_bool_expr':([59,65,82,85,120,131,],[81,81,100,81,138,81,]),'opt_params':([62,],[90,]),'ptr_factor':([58,59,61,65,73,82,85,95,96,101,104,120,121,123,124,125,131,],[79,79,79,79,79,79,79,116,117,79,79,79,79,79,79,79,79,]),'opt_params_list':([88,89,91,133,134,135,],[109,111,113,146,147,148,]),'type':([1,3,19,37,40,],[6,10,27,41,54,]),'ptr_expr':([58,59,61,65,73,82,85,101,104,120,121,123,124,125,131,],[76,83,87,83,94,83,107,122,126,83,139,140,141,142,83,]),'ptr_term':([58,59,61,65,71,73,82,85,95,96,97,98,101,104,120,121,123,124,125,131,],[77,77,77,77,93,77,77,77,77,77,118,119,77,77,77,77,77,77,77,77,]),'a_bool_expr':([59,65,85,131,],[80,80,80,145,]),'decl_list':([6,54,],[12,12,]),'body':([40,127,],[51,144,]),'bool_expr':([59,65,85,],[84,92,108,]),'declarations':([0,35,],[1,40,]),'while_stmt':([40,51,105,114,127,144,149,],[46,46,46,46,46,46,46,]),'ptr_expr_base':([58,59,61,65,71,73,82,85,95,96,97,98,101,104,120,121,123,124,125,131,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'compound_stmt':([105,114,149,],[129,137,151,]),'ptr_assgn':([40,51,105,114,127,144,149,],[47,47,47,47,47,47,47,]),'assgn':([40,51,105,114,127,144,149,],[48,48,48,48,48,48,48,]),'procedure':([1,3,],[7,11,]),'sub_bool_expr':([59,65,82,85,120,131,],[86,86,86,86,86,86,]),'function_call':([40,51,105,114,127,144,149,],[45,45,45,45,45,45,45,]),'stmt':([40,51,105,114,127,144,149,],[50,64,130,130,50,64,130,]),'prog':([0,],[2,]),'decl':([1,40,],[9,9,]),'if_stmt':([40,51,105,114,127,144,149,],[52,52,52,52,52,52,52,]),'paramslist':([32,33,34,55,56,57,],[36,38,39,67,68,69,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> declarations procedures','prog',2,'p_def_prog','Parser.py',107),
  ('declarations -> declarations decl SEMICOLON','declarations',3,'p_def_declaration','Parser.py',115),
  ('declarations -> <empty>','declarations',0,'p_def_declaration','Parser.py',116),
  ('procedures -> procedures procedure','procedures',2,'p_def_procedures','Parser.py',127),
  ('procedures -> procedure','procedures',1,'p_def_procedures','Parser.py',128),
  ('type -> VOID','type',1,'p_def_type','Parser.py',138),
  ('type -> INT','type',1,'p_def_type','Parser.py',139),
  ('type -> FLOAT','type',1,'p_def_type','Parser.py',140),
  ('procedure -> type ID LPAREN params RPAREN LCURL declarations body RCURL','procedure',9,'p_def_procedure','Parser.py',149),
  ('params -> type ID paramslist','params',3,'p_def_parameters','Parser.py',159),
  ('params -> type ptr paramslist','params',3,'p_def_parameters','Parser.py',160),
  ('params -> type addr paramslist','params',3,'p_def_parameters','Parser.py',161),
  ('params -> <empty>','params',0,'p_def_parameters','Parser.py',162),
  ('paramslist -> COMMA type ID paramslist','paramslist',4,'p_def_paramslist','Parser.py',180),
  ('paramslist -> COMMA type addr paramslist','paramslist',4,'p_def_paramslist','Parser.py',181),
  ('paramslist -> COMMA type ptr paramslist','paramslist',4,'p_def_paramslist','Parser.py',182),
  ('paramslist -> <empty>','paramslist',0,'p_def_paramslist','Parser.py',183),
  ('body -> body stmt','body',2,'p_def_body','Parser.py',201),
  ('body -> stmt','body',1,'p_def_body','Parser.py',202),
  ('stmt -> assgn SEMICOLON','stmt',2,'p_def_stmt','Parser.py',212),
  ('stmt -> if_stmt','stmt',1,'p_def_stmt','Parser.py',213),
  ('stmt -> while_stmt','stmt',1,'p_def_stmt','Parser.py',214),
  ('stmt -> function_call','stmt',1,'p_def_stmt','Parser.py',215),
  ('function_call -> ID LPAREN opt_params RPAREN SEMICOLON','function_call',5,'p_def_function_call','Parser.py',221),
  ('opt_params -> ID opt_params_list','opt_params',2,'p_def_opt_params','Parser.py',227),
  ('opt_params -> ptr opt_params_list','opt_params',2,'p_def_opt_params','Parser.py',228),
  ('opt_params -> addr opt_params_list','opt_params',2,'p_def_opt_params','Parser.py',229),
  ('opt_params -> <empty>','opt_params',0,'p_def_opt_params','Parser.py',230),
  ('opt_params_list -> COMMA ID opt_params_list','opt_params_list',3,'p_def_opt_params','Parser.py',232),
  ('opt_params_list -> COMMA ptr opt_params_list','opt_params_list',3,'p_def_opt_params','Parser.py',233),
  ('opt_params_list -> COMMA addr opt_params_list','opt_params_list',3,'p_def_opt_params','Parser.py',234),
  ('opt_params_list -> <empty>','opt_params_list',0,'p_def_opt_params','Parser.py',235),
  ('if_stmt -> IF LPAREN bool_expr RPAREN compound_stmt','if_stmt',5,'p_def_if_stmt','Parser.py',260),
  ('if_stmt -> IF LPAREN bool_expr RPAREN compound_stmt ELSE compound_stmt','if_stmt',7,'p_def_if_stmt','Parser.py',261),
  ('while_stmt -> WHILE LPAREN bool_expr RPAREN compound_stmt','while_stmt',5,'p_def_while_stmt','Parser.py',273),
  ('compound_stmt -> stmt','compound_stmt',1,'p_def_compound_stmt','Parser.py',280),
  ('compound_stmt -> SEMICOLON','compound_stmt',1,'p_def_compound_stmt','Parser.py',281),
  ('compound_stmt -> LCURL RCURL','compound_stmt',2,'p_def_compound_stmt','Parser.py',282),
  ('compound_stmt -> LCURL body RCURL','compound_stmt',3,'p_def_compound_stmt','Parser.py',283),
  ('assgn -> ptr_assgn','assgn',1,'p_def_assgn','Parser.py',299),
  ('assgn -> num_assgn','assgn',1,'p_def_assgn','Parser.py',300),
  ('decl -> type decl_list','decl',2,'p_def_decl','Parser.py',306),
  ('decl_list -> decl_list COMMA ID','decl_list',3,'p_def_decl_list','Parser.py',313),
  ('decl_list -> decl_list COMMA ptr','decl_list',3,'p_def_decl_list','Parser.py',314),
  ('decl_list -> ID','decl_list',1,'p_def_decl_list','Parser.py',315),
  ('decl_list -> ptr','decl_list',1,'p_def_decl_list','Parser.py',316),
  ('ptr_assgn -> ptr EQUALS ptr_expr','ptr_assgn',3,'p_def_ptr_assgn','Parser.py',330),
  ('num_assgn -> ID EQUALS ptr_expr','num_assgn',3,'p_def_num_assgn','Parser.py',336),
  ('bool_expr -> bool_expr OR OR a_bool_expr','bool_expr',4,'p_def_bool_expr','Parser.py',348),
  ('bool_expr -> a_bool_expr','bool_expr',1,'p_def_bool_expr','Parser.py',349),
  ('a_bool_expr -> a_bool_expr AND AND n_bool_expr','a_bool_expr',4,'p_def_a_bool_expr','Parser.py',358),
  ('a_bool_expr -> n_bool_expr','a_bool_expr',1,'p_def_a_bool_expr','Parser.py',359),
  ('n_bool_expr -> NOT n_bool_expr','n_bool_expr',2,'p_def_n_bool_expr','Parser.py',367),
  ('n_bool_expr -> sub_bool_expr','n_bool_expr',1,'p_def_n_bool_expr','Parser.py',368),
  ('n_bool_expr -> LPAREN bool_expr RPAREN','n_bool_expr',3,'p_def_n_bool_expr','Parser.py',369),
  ('sub_bool_expr -> ptr_expr GT ptr_expr','sub_bool_expr',3,'p_def_sub_bool_expr','Parser.py',381),
  ('sub_bool_expr -> ptr_expr GT EQUALS ptr_expr','sub_bool_expr',4,'p_def_sub_bool_expr','Parser.py',382),
  ('sub_bool_expr -> ptr_expr LT ptr_expr','sub_bool_expr',3,'p_def_sub_bool_expr','Parser.py',383),
  ('sub_bool_expr -> ptr_expr LT EQUALS ptr_expr','sub_bool_expr',4,'p_def_sub_bool_expr','Parser.py',384),
  ('sub_bool_expr -> ptr_expr EQUALS EQUALS ptr_expr','sub_bool_expr',4,'p_def_sub_bool_expr','Parser.py',385),
  ('sub_bool_expr -> ptr_expr NOT EQUALS ptr_expr','sub_bool_expr',4,'p_def_sub_bool_expr','Parser.py',386),
  ('ptr_expr -> ptr_expr PLUS ptr_factor','ptr_expr',3,'p_def_ptr_add_expr','Parser.py',402),
  ('ptr_expr -> ptr_expr MINUS ptr_factor','ptr_expr',3,'p_def_ptr_add_expr','Parser.py',403),
  ('ptr_expr -> ptr_factor','ptr_expr',1,'p_def_ptr_add_expr','Parser.py',404),
  ('ptr_factor -> ptr_factor STAR ptr_term','ptr_factor',3,'p_def_ptr_factor','Parser.py',418),
  ('ptr_factor -> ptr_factor SLASH ptr_term','ptr_factor',3,'p_def_ptr_factor','Parser.py',419),
  ('ptr_factor -> ptr_term','ptr_factor',1,'p_def_ptr_factor','Parser.py',420),
  ('ptr_term -> MINUS ptr_term','ptr_term',2,'p_def_ptr_term','Parser.py',433),
  ('ptr_term -> ptr_expr_base','ptr_term',1,'p_def_ptr_term','Parser.py',434),
  ('ptr_expr_base -> ID','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',443),
  ('ptr_expr_base -> NUM','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',444),
  ('ptr_expr_base -> ptr','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',445),
  ('ptr_expr_base -> addr','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',446),
  ('ptr_expr_base -> LPAREN ptr_expr RPAREN','ptr_expr_base',3,'p_def_ptr_expr_base','Parser.py',447),
  ('ptr -> STAR ptr','ptr',2,'p_def_ptr','Parser.py',463),
  ('ptr -> STAR ID','ptr',2,'p_def_ptr','Parser.py',464),
  ('ptr -> STAR addr','ptr',2,'p_def_ptr','Parser.py',465),
  ('addr -> AND ID','addr',2,'p_def_addr','Parser.py',474),
  ('addr -> AND ptr','addr',2,'p_def_addr','Parser.py',475),
  ('addr -> AND addr','addr',2,'p_def_addr','Parser.py',476),
]
