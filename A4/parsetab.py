
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftTHENleftELSEleftPLUSMINUSleftSTARSLASHrightUMINUSID STAR AND NUM NUMFLOAT LPAREN RPAREN COMMA LCURL RCURL SEMICOLON EQUALS PLUS MINUS SLASH LT GT NOT OR RETURN INT VOID FLOAT ELSE WHILE IF prog : declarations procedures\n\t \n\t\tdeclarations : declarations decl SEMICOLON\n\t\t\t\t     | declarations func_proto\n\t\t\t\t     |\n\t\n\t\tfunc_proto : type fname LPAREN params RPAREN SEMICOLON\n\t\n\t\tprocedures : procedures procedure\n\t\t\t\t  | procedure \t\n\t\n\t\ttype : VOID \n\t\t\t | INT\n\t\t\t | FLOAT\n\t\n\t\tprocedure : type fname LPAREN params RPAREN LCURL declarations_func body RCURL\n\t \n\t\tdeclarations_func : declarations_func decl SEMICOLON\n\t\t\t\t     \t  |\n\t\n\t\treturn_stmt : RETURN ptr_expr SEMICOLON\n\t\n\t\tfname : STAR fname\n\t\t\t  | ID\n\t\n\t\tparams \t: type ID paramslist \n\t\t\t\t| type ptr paramslist\n\t\t\t\t| type addr paramslist\n\t\t\t   \t| \n\t\n\t\tparamslist \t: COMMA type ID paramslist\n\t\t\t\t\t| COMMA type addr paramslist\n\t\t\t\t\t| COMMA type ptr paramslist\n\t\t\t\t\t| \n\t body : body stmt\n\t\t\t | stmt\n\t stmt : assgn SEMICOLON\n\t\t\t | if_stmt \n\t\t\t | while_stmt\n\t\t\t | function_call SEMICOLON\n\t\t\t | return_stmt\n\t function_call : ID LPAREN opt_params RPAREN\n\t opt_params  : ID opt_params_list\n\t\t\t\t\t| ptr opt_params_list\n\t\t\t\t\t| addr opt_params_list\n\t\t\t\t\t| \n\n\t\topt_params_list : COMMA ID opt_params_list\n\t\t\t\t\t\t| COMMA ptr opt_params_list\n\t\t\t\t\t\t| COMMA addr opt_params_list\n\t\t\t\t\t\t|\n\t\n\t\tif_stmt : IF LPAREN bool_expr RPAREN compound_stmt \t\t\t\t%prec THEN\n\t\t\t\t| IF LPAREN bool_expr RPAREN compound_stmt ELSE compound_stmt\n\t\n\t\twhile_stmt : WHILE LPAREN bool_expr RPAREN compound_stmt\n\t\n\t\tcompound_stmt : stmt\n\t\t\t\t\t  | SEMICOLON\n\t\t\t\t\t  | LCURL RCURL\n\t\t\t\t\t  | LCURL body RCURL\n\t assgn : ptr_assgn\n\t \t\t  | num_assgn\n\t decl : type decl_list\n\t decl_list : decl_list COMMA ID\n\t\t\t\t | decl_list COMMA ptr\n\t\t\t\t | ID\n\t\t\t\t | ptr\n\t ptr_assgn : ptr EQUALS ptr_expr  num_assgn : ID EQUALS ptr_expr\n\t\tbool_expr : bool_expr OR OR a_bool_expr \n\t\t\t\t  | a_bool_expr\n\t\ta_bool_expr : a_bool_expr AND AND n_bool_expr \n\t\t\t\t \t| n_bool_expr\n\t\tn_bool_expr : NOT n_bool_expr \n\t\t\t\t | sub_bool_expr\n\t\t\t\t | LPAREN bool_expr RPAREN\n\t sub_bool_expr : ptr_expr GT ptr_expr\n\t\t\t\t\t  | ptr_expr GT EQUALS ptr_expr\n\t\t\t\t\t  | ptr_expr LT ptr_expr\n\t\t\t\t\t  | ptr_expr LT EQUALS ptr_expr\n\t\t\t\t\t  | ptr_expr EQUALS EQUALS ptr_expr\n\t\t\t\t\t  | ptr_expr NOT EQUALS ptr_expr\n\t\tptr_expr : ptr_expr PLUS ptr_factor \n\t\t\t\t | ptr_expr MINUS ptr_factor\n\t\t\t\t | ptr_factor\n\t\n\t\tptr_factor :  ptr_factor STAR ptr_term\n\t\t\t\t \t| ptr_factor SLASH ptr_term\n\t\t\t\t \t| ptr_term\n\t ptr_term :  MINUS ptr_term  \t\t%prec UMINUS\n\t\t\t\t  | ptr_expr_base\n\t ptr_expr_base : ID\n\t\t\t\t| NUM\n\t\t\t\t| NUMFLOAT\n\t\t\t\t| ptr\n\t\t\t\t| function_call\n\t\t\t\t| addr\n\t\t\t\t| LPAREN ptr_expr RPAREN\n\t  ptr : STAR ptr \n\t\t\t | STAR ID\n\t\t\t | STAR addr\n\t addr : AND ID\n\t'
    
_lr_action_items = {'RETURN':([43,49,55,59,61,64,66,70,83,86,89,99,125,137,140,141,142,143,154,156,157,166,167,168,],[-13,52,-31,52,-26,-28,-29,-12,-30,-27,-25,-14,52,52,52,-45,-43,-44,-41,-46,52,52,-47,-42,]),'LPAREN':([12,16,23,24,26,28,52,54,62,63,77,80,81,84,85,90,92,97,98,100,101,103,109,127,129,139,144,145,147,148,150,],[19,-16,-16,-15,35,-16,77,84,91,92,77,77,91,103,77,77,103,77,77,77,77,103,103,77,77,103,103,77,77,77,77,]),'VOID':([0,1,5,9,10,11,18,19,35,42,43,45,49,70,88,],[-4,8,-3,8,-7,-2,-6,8,8,-5,-13,8,8,-12,-11,]),'WHILE':([43,49,55,59,61,64,66,70,83,86,89,99,125,137,140,141,142,143,154,156,157,166,167,168,],[-13,54,-31,54,-26,-28,-29,-12,-30,-27,-25,-14,54,54,54,-45,-43,-44,-41,-46,54,54,-47,-42,]),'NUMFLOAT':([52,77,80,84,85,90,92,97,98,100,101,103,109,127,129,139,144,145,147,148,150,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'STAR':([4,6,7,8,15,17,20,22,25,27,30,31,34,40,43,49,50,52,55,58,59,61,64,66,70,71,72,73,74,75,76,77,78,80,81,82,83,84,85,86,89,90,91,92,97,98,99,100,101,102,103,109,117,118,119,120,121,125,127,129,132,135,137,139,140,141,142,143,144,145,147,148,150,154,156,157,166,167,168,],[-10,-9,15,-8,15,27,31,-87,-85,27,31,31,-88,-86,-13,31,31,31,-31,31,31,-26,-28,-29,-12,-80,-81,-82,-75,-77,-79,31,97,31,-78,-83,-30,31,31,-27,-25,31,31,31,31,31,-14,31,31,-76,31,31,-84,-73,-74,97,97,31,31,31,31,-32,31,31,31,-45,-43,-44,31,31,31,31,31,-41,-46,31,31,-47,-42,]),'MINUS':([22,25,34,40,52,71,72,73,74,75,76,77,78,79,80,81,82,84,85,90,92,96,97,98,100,101,102,103,107,109,110,111,117,118,119,120,121,123,127,129,135,139,144,145,146,147,148,149,150,159,160,161,162,],[-87,-85,-88,-86,80,-80,-81,-82,-75,-77,-79,80,-72,101,80,-78,-83,80,80,80,80,101,80,80,80,80,-76,80,101,80,101,101,-84,-73,-74,-70,-71,101,80,80,-32,80,80,80,101,80,80,101,80,101,101,101,101,]),'LCURL':([36,48,125,137,166,],[43,43,140,140,140,]),'RPAREN':([19,22,25,29,34,35,37,38,39,40,41,44,46,47,67,68,69,71,72,73,74,75,76,78,81,82,91,93,94,95,96,102,104,105,106,108,112,113,114,115,116,117,118,119,120,121,122,123,131,133,134,135,136,138,146,149,151,152,153,155,158,159,160,161,162,163,164,165,],[-20,-87,-85,36,-88,-20,-24,-24,-24,-86,48,-19,-18,-17,-24,-24,-24,-80,-81,-82,-75,-77,-79,-72,-78,-83,-36,-22,-21,-23,117,-76,-62,-58,125,-60,-40,-40,135,-40,137,-84,-73,-74,-70,-71,138,117,-61,-35,-34,-32,-33,-63,-64,-66,-40,-40,-40,-59,-57,-65,-68,-67,-69,-39,-38,-37,]),'SEMICOLON':([3,13,14,16,22,23,25,32,33,34,36,40,51,53,57,60,65,71,72,73,74,75,76,78,79,81,82,87,102,110,111,117,118,119,120,121,125,135,137,166,],[11,-50,-54,-53,-87,-86,-85,-52,-51,-88,42,-86,70,83,86,-49,-48,-80,-81,-82,-75,-77,-79,-72,99,-78,-83,-53,-76,-55,-56,-84,-73,-74,-70,-71,141,-32,141,141,]),'RCURL':([55,59,61,64,66,83,86,89,99,140,141,142,143,154,156,157,167,168,],[-31,88,-26,-28,-29,-30,-27,-25,-14,156,-45,-43,-44,-41,-46,167,-47,-42,]),'LT':([22,25,34,40,71,72,73,74,75,76,78,81,82,102,107,117,118,119,120,121,123,135,],[-87,-85,-88,-86,-80,-81,-82,-75,-77,-79,-72,-78,-83,-76,129,-84,-73,-74,-70,-71,129,-32,]),'NUM':([52,77,80,84,85,90,92,97,98,100,101,103,109,127,129,139,144,145,147,148,150,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'COMMA':([13,14,16,22,23,25,32,33,34,37,38,39,40,67,68,69,87,112,113,115,151,152,153,],[20,-54,-53,-87,-86,-85,-52,-51,-88,45,45,45,-86,45,45,45,-53,132,132,132,132,132,132,]),'PLUS':([22,25,34,40,71,72,73,74,75,76,78,79,81,82,96,102,107,110,111,117,118,119,120,121,123,135,146,149,159,160,161,162,],[-87,-85,-88,-86,-80,-81,-82,-75,-77,-79,-72,100,-78,-83,100,-76,100,100,100,-84,-73,-74,-70,-71,100,-32,100,100,100,100,100,100,]),'$end':([2,9,10,18,88,],[0,-1,-7,-6,-11,]),'GT':([22,25,34,40,71,72,73,74,75,76,78,81,82,102,107,117,118,119,120,121,123,135,],[-87,-85,-88,-86,-80,-81,-82,-75,-77,-79,-72,-78,-83,-76,127,-84,-73,-74,-70,-71,127,-32,]),'EQUALS':([22,25,34,40,56,62,71,72,73,74,75,76,78,81,82,102,107,117,118,119,120,121,123,127,128,129,130,135,],[-87,-85,-88,-86,85,90,-80,-81,-82,-75,-77,-79,-72,-78,-83,-76,128,-84,-73,-74,-70,-71,128,145,147,148,150,-32,]),'ELSE':([55,64,66,83,86,99,141,142,143,154,156,167,168,],[-31,-28,-29,-30,-27,-14,-45,-43,-44,166,-46,-47,-42,]),'SLASH':([22,25,34,40,71,72,73,74,75,76,78,81,82,102,117,118,119,120,121,135,],[-87,-85,-88,-86,-80,-81,-82,-75,-77,-79,98,-78,-83,-76,-84,-73,-74,98,98,-32,]),'ID':([4,6,7,8,15,17,20,21,27,30,31,43,49,50,52,55,58,59,61,64,66,70,77,80,83,84,85,86,89,90,91,92,97,98,99,100,101,103,109,125,127,129,132,137,139,140,141,142,143,144,145,147,148,150,154,156,157,166,167,168,],[-10,-9,16,-8,23,28,33,34,28,39,40,-13,62,68,81,-31,87,62,-26,-28,-29,-12,81,81,-30,81,81,-27,-25,81,115,81,81,81,-14,81,81,81,81,62,81,81,153,62,81,62,-45,-43,-44,81,81,81,81,81,-41,-46,62,62,-47,-42,]),'IF':([43,49,55,59,61,64,66,70,83,86,89,99,125,137,140,141,142,143,154,156,157,166,167,168,],[-13,63,-31,63,-26,-28,-29,-12,-30,-27,-25,-14,63,63,63,-45,-43,-44,-41,-46,63,63,-47,-42,]),'AND':([4,6,8,15,22,25,30,31,34,40,50,52,71,72,73,74,75,76,77,78,80,81,82,84,85,90,91,92,97,98,100,101,102,103,104,105,108,109,117,118,119,120,121,124,127,129,131,132,135,138,139,144,145,146,147,148,149,150,155,158,159,160,161,162,],[-10,-9,-8,21,-87,-85,21,21,-88,-86,21,21,-80,-81,-82,-75,-77,-79,21,-72,21,-78,-83,21,21,21,21,21,21,21,21,21,-76,21,-62,124,-60,21,-84,-73,-74,-70,-71,139,21,21,-61,21,-32,-63,21,21,21,-64,21,21,-66,21,-59,124,-65,-68,-67,-69,]),'INT':([0,1,5,9,10,11,18,19,35,42,43,45,49,70,88,],[-4,6,-3,6,-7,-2,-6,6,6,-5,-13,6,6,-12,-11,]),'FLOAT':([0,1,5,9,10,11,18,19,35,42,43,45,49,70,88,],[-4,4,-3,4,-7,-2,-6,4,4,-5,-13,4,4,-12,-11,]),'NOT':([22,25,34,40,71,72,73,74,75,76,78,81,82,84,92,102,103,107,109,117,118,119,120,121,123,135,139,144,],[-87,-85,-88,-86,-80,-81,-82,-75,-77,-79,-72,-78,-83,109,109,-76,109,130,109,-84,-73,-74,-70,-71,130,-32,109,109,]),'OR':([22,25,34,40,71,72,73,74,75,76,78,81,82,102,104,105,106,108,116,117,118,119,120,121,122,126,131,135,138,146,149,155,158,159,160,161,162,],[-87,-85,-88,-86,-80,-81,-82,-75,-77,-79,-72,-78,-83,-76,-62,-58,126,-60,126,-84,-73,-74,-70,-71,126,144,-61,-32,-63,-64,-66,-59,-57,-65,-68,-67,-69,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'decl':([1,49,],[3,51,]),'func_proto':([1,],[5,]),'paramslist':([37,38,39,67,68,69,],[44,46,47,93,94,95,]),'function_call':([49,52,59,77,80,84,85,90,92,97,98,100,101,103,109,125,127,129,137,139,140,144,145,147,148,150,157,166,],[53,73,53,73,73,73,73,73,73,73,73,73,73,73,73,53,73,73,53,73,53,73,73,73,73,73,53,53,]),'ptr_term':([52,77,80,84,85,90,92,97,98,100,101,103,109,127,129,139,144,145,147,148,150,],[74,74,102,74,74,74,74,118,119,74,74,74,74,74,74,74,74,74,74,74,74,]),'return_stmt':([49,59,125,137,140,157,166,],[55,55,55,55,55,55,55,]),'a_bool_expr':([84,92,103,144,],[105,105,105,158,]),'ptr_factor':([52,77,84,85,90,92,100,101,103,109,127,129,139,144,145,147,148,150,],[78,78,78,78,78,78,120,121,78,78,78,78,78,78,78,78,78,78,]),'opt_params_list':([112,113,115,151,152,153,],[133,134,136,163,164,165,]),'ptr':([7,15,20,30,31,49,50,52,58,59,77,80,84,85,90,91,92,97,98,100,101,103,109,125,127,129,132,137,139,140,144,145,147,148,150,157,166,],[14,25,32,38,25,56,69,72,14,56,72,72,72,72,72,113,72,72,72,72,72,72,72,56,72,72,152,56,72,56,72,72,72,72,72,56,56,]),'assgn':([49,59,125,137,140,157,166,],[57,57,57,57,57,57,57,]),'addr':([15,30,31,50,52,77,80,84,85,90,91,92,97,98,100,101,103,109,127,129,132,139,144,145,147,148,150,],[22,37,22,67,82,82,82,82,82,82,112,82,82,82,82,82,82,82,82,82,151,82,82,82,82,82,82,]),'ptr_expr':([52,77,84,85,90,92,103,109,127,129,139,144,145,147,148,150,],[79,96,107,110,111,107,123,107,146,149,107,107,159,160,161,162,]),'ptr_expr_base':([52,77,80,84,85,90,92,97,98,100,101,103,109,127,129,139,144,145,147,148,150,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'params':([19,35,],[29,41,]),'fname':([7,15,17,27,],[12,24,26,24,]),'prog':([0,],[2,]),'type':([1,9,19,35,45,49,],[7,17,30,30,50,58,]),'compound_stmt':([125,137,166,],[142,154,168,]),'body':([49,140,],[59,157,]),'num_assgn':([49,59,125,137,140,157,166,],[60,60,60,60,60,60,60,]),'sub_bool_expr':([84,92,103,109,139,144,],[104,104,104,104,104,104,]),'bool_expr':([84,92,103,],[106,116,122,]),'stmt':([49,59,125,137,140,157,166,],[61,89,143,143,61,89,143,]),'procedures':([1,],[9,]),'n_bool_expr':([84,92,103,109,139,144,],[108,108,108,131,155,108,]),'if_stmt':([49,59,125,137,140,157,166,],[64,64,64,64,64,64,64,]),'ptr_assgn':([49,59,125,137,140,157,166,],[65,65,65,65,65,65,65,]),'declarations':([0,],[1,]),'decl_list':([7,58,],[13,13,]),'while_stmt':([49,59,125,137,140,157,166,],[66,66,66,66,66,66,66,]),'declarations_func':([43,],[49,]),'opt_params':([91,],[114,]),'procedure':([1,9,],[10,18,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> declarations procedures','prog',2,'p_def_prog','Parser.py',114),
  ('declarations -> declarations decl SEMICOLON','declarations',3,'p_def_declaration','Parser.py',137),
  ('declarations -> declarations func_proto','declarations',2,'p_def_declaration','Parser.py',138),
  ('declarations -> <empty>','declarations',0,'p_def_declaration','Parser.py',139),
  ('func_proto -> type fname LPAREN params RPAREN SEMICOLON','func_proto',6,'p_def_func_proto','Parser.py',150),
  ('procedures -> procedures procedure','procedures',2,'p_def_procedures','Parser.py',159),
  ('procedures -> procedure','procedures',1,'p_def_procedures','Parser.py',160),
  ('type -> VOID','type',1,'p_def_type','Parser.py',170),
  ('type -> INT','type',1,'p_def_type','Parser.py',171),
  ('type -> FLOAT','type',1,'p_def_type','Parser.py',172),
  ('procedure -> type fname LPAREN params RPAREN LCURL declarations_func body RCURL','procedure',9,'p_def_procedure','Parser.py',182),
  ('declarations_func -> declarations_func decl SEMICOLON','declarations_func',3,'p_def_declarations_func','Parser.py',192),
  ('declarations_func -> <empty>','declarations_func',0,'p_def_declarations_func','Parser.py',193),
  ('return_stmt -> RETURN ptr_expr SEMICOLON','return_stmt',3,'p_def_return_stmt','Parser.py',205),
  ('fname -> STAR fname','fname',2,'p_def_fname','Parser.py',213),
  ('fname -> ID','fname',1,'p_def_fname','Parser.py',214),
  ('params -> type ID paramslist','params',3,'p_def_parameters','Parser.py',227),
  ('params -> type ptr paramslist','params',3,'p_def_parameters','Parser.py',228),
  ('params -> type addr paramslist','params',3,'p_def_parameters','Parser.py',229),
  ('params -> <empty>','params',0,'p_def_parameters','Parser.py',230),
  ('paramslist -> COMMA type ID paramslist','paramslist',4,'p_def_paramslist','Parser.py',249),
  ('paramslist -> COMMA type addr paramslist','paramslist',4,'p_def_paramslist','Parser.py',250),
  ('paramslist -> COMMA type ptr paramslist','paramslist',4,'p_def_paramslist','Parser.py',251),
  ('paramslist -> <empty>','paramslist',0,'p_def_paramslist','Parser.py',252),
  ('body -> body stmt','body',2,'p_def_body','Parser.py',271),
  ('body -> stmt','body',1,'p_def_body','Parser.py',272),
  ('stmt -> assgn SEMICOLON','stmt',2,'p_def_stmt','Parser.py',282),
  ('stmt -> if_stmt','stmt',1,'p_def_stmt','Parser.py',283),
  ('stmt -> while_stmt','stmt',1,'p_def_stmt','Parser.py',284),
  ('stmt -> function_call SEMICOLON','stmt',2,'p_def_stmt','Parser.py',285),
  ('stmt -> return_stmt','stmt',1,'p_def_stmt','Parser.py',286),
  ('function_call -> ID LPAREN opt_params RPAREN','function_call',4,'p_def_function_call','Parser.py',292),
  ('opt_params -> ID opt_params_list','opt_params',2,'p_def_opt_params','Parser.py',299),
  ('opt_params -> ptr opt_params_list','opt_params',2,'p_def_opt_params','Parser.py',300),
  ('opt_params -> addr opt_params_list','opt_params',2,'p_def_opt_params','Parser.py',301),
  ('opt_params -> <empty>','opt_params',0,'p_def_opt_params','Parser.py',302),
  ('opt_params_list -> COMMA ID opt_params_list','opt_params_list',3,'p_def_opt_params','Parser.py',304),
  ('opt_params_list -> COMMA ptr opt_params_list','opt_params_list',3,'p_def_opt_params','Parser.py',305),
  ('opt_params_list -> COMMA addr opt_params_list','opt_params_list',3,'p_def_opt_params','Parser.py',306),
  ('opt_params_list -> <empty>','opt_params_list',0,'p_def_opt_params','Parser.py',307),
  ('if_stmt -> IF LPAREN bool_expr RPAREN compound_stmt','if_stmt',5,'p_def_if_stmt','Parser.py',332),
  ('if_stmt -> IF LPAREN bool_expr RPAREN compound_stmt ELSE compound_stmt','if_stmt',7,'p_def_if_stmt','Parser.py',333),
  ('while_stmt -> WHILE LPAREN bool_expr RPAREN compound_stmt','while_stmt',5,'p_def_while_stmt','Parser.py',345),
  ('compound_stmt -> stmt','compound_stmt',1,'p_def_compound_stmt','Parser.py',352),
  ('compound_stmt -> SEMICOLON','compound_stmt',1,'p_def_compound_stmt','Parser.py',353),
  ('compound_stmt -> LCURL RCURL','compound_stmt',2,'p_def_compound_stmt','Parser.py',354),
  ('compound_stmt -> LCURL body RCURL','compound_stmt',3,'p_def_compound_stmt','Parser.py',355),
  ('assgn -> ptr_assgn','assgn',1,'p_def_assgn','Parser.py',371),
  ('assgn -> num_assgn','assgn',1,'p_def_assgn','Parser.py',372),
  ('decl -> type decl_list','decl',2,'p_def_decl','Parser.py',378),
  ('decl_list -> decl_list COMMA ID','decl_list',3,'p_def_decl_list','Parser.py',385),
  ('decl_list -> decl_list COMMA ptr','decl_list',3,'p_def_decl_list','Parser.py',386),
  ('decl_list -> ID','decl_list',1,'p_def_decl_list','Parser.py',387),
  ('decl_list -> ptr','decl_list',1,'p_def_decl_list','Parser.py',388),
  ('ptr_assgn -> ptr EQUALS ptr_expr','ptr_assgn',3,'p_def_ptr_assgn','Parser.py',402),
  ('num_assgn -> ID EQUALS ptr_expr','num_assgn',3,'p_def_num_assgn','Parser.py',408),
  ('bool_expr -> bool_expr OR OR a_bool_expr','bool_expr',4,'p_def_bool_expr','Parser.py',420),
  ('bool_expr -> a_bool_expr','bool_expr',1,'p_def_bool_expr','Parser.py',421),
  ('a_bool_expr -> a_bool_expr AND AND n_bool_expr','a_bool_expr',4,'p_def_a_bool_expr','Parser.py',430),
  ('a_bool_expr -> n_bool_expr','a_bool_expr',1,'p_def_a_bool_expr','Parser.py',431),
  ('n_bool_expr -> NOT n_bool_expr','n_bool_expr',2,'p_def_n_bool_expr','Parser.py',439),
  ('n_bool_expr -> sub_bool_expr','n_bool_expr',1,'p_def_n_bool_expr','Parser.py',440),
  ('n_bool_expr -> LPAREN bool_expr RPAREN','n_bool_expr',3,'p_def_n_bool_expr','Parser.py',441),
  ('sub_bool_expr -> ptr_expr GT ptr_expr','sub_bool_expr',3,'p_def_sub_bool_expr','Parser.py',453),
  ('sub_bool_expr -> ptr_expr GT EQUALS ptr_expr','sub_bool_expr',4,'p_def_sub_bool_expr','Parser.py',454),
  ('sub_bool_expr -> ptr_expr LT ptr_expr','sub_bool_expr',3,'p_def_sub_bool_expr','Parser.py',455),
  ('sub_bool_expr -> ptr_expr LT EQUALS ptr_expr','sub_bool_expr',4,'p_def_sub_bool_expr','Parser.py',456),
  ('sub_bool_expr -> ptr_expr EQUALS EQUALS ptr_expr','sub_bool_expr',4,'p_def_sub_bool_expr','Parser.py',457),
  ('sub_bool_expr -> ptr_expr NOT EQUALS ptr_expr','sub_bool_expr',4,'p_def_sub_bool_expr','Parser.py',458),
  ('ptr_expr -> ptr_expr PLUS ptr_factor','ptr_expr',3,'p_def_ptr_add_expr','Parser.py',474),
  ('ptr_expr -> ptr_expr MINUS ptr_factor','ptr_expr',3,'p_def_ptr_add_expr','Parser.py',475),
  ('ptr_expr -> ptr_factor','ptr_expr',1,'p_def_ptr_add_expr','Parser.py',476),
  ('ptr_factor -> ptr_factor STAR ptr_term','ptr_factor',3,'p_def_ptr_factor','Parser.py',490),
  ('ptr_factor -> ptr_factor SLASH ptr_term','ptr_factor',3,'p_def_ptr_factor','Parser.py',491),
  ('ptr_factor -> ptr_term','ptr_factor',1,'p_def_ptr_factor','Parser.py',492),
  ('ptr_term -> MINUS ptr_term','ptr_term',2,'p_def_ptr_term','Parser.py',505),
  ('ptr_term -> ptr_expr_base','ptr_term',1,'p_def_ptr_term','Parser.py',506),
  ('ptr_expr_base -> ID','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',515),
  ('ptr_expr_base -> NUM','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',516),
  ('ptr_expr_base -> NUMFLOAT','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',517),
  ('ptr_expr_base -> ptr','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',518),
  ('ptr_expr_base -> function_call','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',519),
  ('ptr_expr_base -> addr','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',520),
  ('ptr_expr_base -> LPAREN ptr_expr RPAREN','ptr_expr_base',3,'p_def_ptr_expr_base','Parser.py',521),
  ('ptr -> STAR ptr','ptr',2,'p_def_ptr','Parser.py',541),
  ('ptr -> STAR ID','ptr',2,'p_def_ptr','Parser.py',542),
  ('ptr -> STAR addr','ptr',2,'p_def_ptr','Parser.py',543),
  ('addr -> AND ID','addr',2,'p_def_addr','Parser.py',553),
]
