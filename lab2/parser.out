Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> VOID MAIN LPAREN RPAREN LCURL body RCURL
Rule 2     prog -> VOID MAIN LPAREN RPAREN LCURL RCURL
Rule 3     body -> stmt body
Rule 4     body -> stmt
Rule 5     stmt -> decl SEMICOLON
Rule 6     stmt -> assgn_list SEMICOLON
Rule 7     assgn_list -> assgn_list COMMA assgn
Rule 8     assgn_list -> assgn
Rule 9     assgn -> ptr_assgn
Rule 10    assgn -> num_assgn
Rule 11    decl -> INT decl_list
Rule 12    decl_list -> decl_list COMMA ID
Rule 13    decl_list -> decl_list COMMA ptr
Rule 14    decl_list -> ID
Rule 15    decl_list -> ptr
Rule 16    ptr_assgn -> ptr EQUALS ptr_expr
Rule 17    num_assgn -> ID EQUALS addr
Rule 18    num_assgn -> ID EQUALS ID
Rule 19    ptr_expr -> ID
Rule 20    ptr_expr -> NUM
Rule 21    ptr_expr -> ptr
Rule 22    ptr_expr -> addr
Rule 23    ptr -> STAR ptr
Rule 24    ptr -> STAR ID
Rule 25    ptr -> STAR addr
Rule 26    addr -> AND ID
Rule 27    addr -> AND ptr

Terminals, with rules where they appear

AND                  : 26 27
COMMA                : 7 12 13
EQUALS               : 16 17 18
ID                   : 12 14 17 18 18 19 24 26
INT                  : 11
LCURL                : 1 2
LPAREN               : 1 2
MAIN                 : 1 2
NUM                  : 20
RCURL                : 1 2
RPAREN               : 1 2
SEMICOLON            : 5 6
STAR                 : 23 24 25
VOID                 : 1 2
error                : 

Nonterminals, with rules where they appear

addr                 : 17 22 25
assgn                : 7 8
assgn_list           : 6 7
body                 : 1 3
decl                 : 5
decl_list            : 11 12 13
num_assgn            : 10
prog                 : 0
ptr                  : 13 15 16 21 23 27
ptr_assgn            : 9
ptr_expr             : 16
stmt                 : 3 4

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . VOID MAIN LPAREN RPAREN LCURL body RCURL
    (2) prog -> . VOID MAIN LPAREN RPAREN LCURL RCURL

    VOID            shift and go to state 2

    prog                           shift and go to state 1

state 1

    (0) S' -> prog .



state 2

    (1) prog -> VOID . MAIN LPAREN RPAREN LCURL body RCURL
    (2) prog -> VOID . MAIN LPAREN RPAREN LCURL RCURL

    MAIN            shift and go to state 3


state 3

    (1) prog -> VOID MAIN . LPAREN RPAREN LCURL body RCURL
    (2) prog -> VOID MAIN . LPAREN RPAREN LCURL RCURL

    LPAREN          shift and go to state 4


state 4

    (1) prog -> VOID MAIN LPAREN . RPAREN LCURL body RCURL
    (2) prog -> VOID MAIN LPAREN . RPAREN LCURL RCURL

    RPAREN          shift and go to state 5


state 5

    (1) prog -> VOID MAIN LPAREN RPAREN . LCURL body RCURL
    (2) prog -> VOID MAIN LPAREN RPAREN . LCURL RCURL

    LCURL           shift and go to state 6


state 6

    (1) prog -> VOID MAIN LPAREN RPAREN LCURL . body RCURL
    (2) prog -> VOID MAIN LPAREN RPAREN LCURL . RCURL
    (3) body -> . stmt body
    (4) body -> . stmt
    (5) stmt -> . decl SEMICOLON
    (6) stmt -> . assgn_list SEMICOLON
    (11) decl -> . INT decl_list
    (7) assgn_list -> . assgn_list COMMA assgn
    (8) assgn_list -> . assgn
    (9) assgn -> . ptr_assgn
    (10) assgn -> . num_assgn
    (16) ptr_assgn -> . ptr EQUALS ptr_expr
    (17) num_assgn -> . ID EQUALS addr
    (18) num_assgn -> . ID EQUALS ID
    (23) ptr -> . STAR ptr
    (24) ptr -> . STAR ID
    (25) ptr -> . STAR addr

    RCURL           shift and go to state 14
    INT             shift and go to state 7
    ID              shift and go to state 8
    STAR            shift and go to state 15

    assgn_list                     shift and go to state 11
    ptr_assgn                      shift and go to state 17
    stmt                           shift and go to state 18
    ptr                            shift and go to state 16
    num_assgn                      shift and go to state 12
    body                           shift and go to state 10
    assgn                          shift and go to state 9
    decl                           shift and go to state 13

state 7

    (11) decl -> INT . decl_list
    (12) decl_list -> . decl_list COMMA ID
    (13) decl_list -> . decl_list COMMA ptr
    (14) decl_list -> . ID
    (15) decl_list -> . ptr
    (23) ptr -> . STAR ptr
    (24) ptr -> . STAR ID
    (25) ptr -> . STAR addr

    ID              shift and go to state 20
    STAR            shift and go to state 15

    ptr                            shift and go to state 19
    decl_list                      shift and go to state 21

state 8

    (17) num_assgn -> ID . EQUALS addr
    (18) num_assgn -> ID . EQUALS ID

    EQUALS          shift and go to state 22


state 9

    (8) assgn_list -> assgn .

    SEMICOLON       reduce using rule 8 (assgn_list -> assgn .)
    COMMA           reduce using rule 8 (assgn_list -> assgn .)


state 10

    (1) prog -> VOID MAIN LPAREN RPAREN LCURL body . RCURL

    RCURL           shift and go to state 23


state 11

    (6) stmt -> assgn_list . SEMICOLON
    (7) assgn_list -> assgn_list . COMMA assgn

    SEMICOLON       shift and go to state 24
    COMMA           shift and go to state 25


state 12

    (10) assgn -> num_assgn .

    SEMICOLON       reduce using rule 10 (assgn -> num_assgn .)
    COMMA           reduce using rule 10 (assgn -> num_assgn .)


state 13

    (5) stmt -> decl . SEMICOLON

    SEMICOLON       shift and go to state 26


state 14

    (2) prog -> VOID MAIN LPAREN RPAREN LCURL RCURL .

    $end            reduce using rule 2 (prog -> VOID MAIN LPAREN RPAREN LCURL RCURL .)


state 15

    (23) ptr -> STAR . ptr
    (24) ptr -> STAR . ID
    (25) ptr -> STAR . addr
    (23) ptr -> . STAR ptr
    (24) ptr -> . STAR ID
    (25) ptr -> . STAR addr
    (26) addr -> . AND ID
    (27) addr -> . AND ptr

    ID              shift and go to state 28
    STAR            shift and go to state 15
    AND             shift and go to state 29

    addr                           shift and go to state 30
    ptr                            shift and go to state 27

state 16

    (16) ptr_assgn -> ptr . EQUALS ptr_expr

    EQUALS          shift and go to state 31


state 17

    (9) assgn -> ptr_assgn .

    SEMICOLON       reduce using rule 9 (assgn -> ptr_assgn .)
    COMMA           reduce using rule 9 (assgn -> ptr_assgn .)


state 18

    (3) body -> stmt . body
    (4) body -> stmt .
    (3) body -> . stmt body
    (4) body -> . stmt
    (5) stmt -> . decl SEMICOLON
    (6) stmt -> . assgn_list SEMICOLON
    (11) decl -> . INT decl_list
    (7) assgn_list -> . assgn_list COMMA assgn
    (8) assgn_list -> . assgn
    (9) assgn -> . ptr_assgn
    (10) assgn -> . num_assgn
    (16) ptr_assgn -> . ptr EQUALS ptr_expr
    (17) num_assgn -> . ID EQUALS addr
    (18) num_assgn -> . ID EQUALS ID
    (23) ptr -> . STAR ptr
    (24) ptr -> . STAR ID
    (25) ptr -> . STAR addr

    RCURL           reduce using rule 4 (body -> stmt .)
    INT             shift and go to state 7
    ID              shift and go to state 8
    STAR            shift and go to state 15

    stmt                           shift and go to state 18
    ptr_assgn                      shift and go to state 17
    ptr                            shift and go to state 16
    assgn                          shift and go to state 9
    num_assgn                      shift and go to state 12
    body                           shift and go to state 32
    assgn_list                     shift and go to state 11
    decl                           shift and go to state 13

state 19

    (15) decl_list -> ptr .

    COMMA           reduce using rule 15 (decl_list -> ptr .)
    SEMICOLON       reduce using rule 15 (decl_list -> ptr .)


state 20

    (14) decl_list -> ID .

    COMMA           reduce using rule 14 (decl_list -> ID .)
    SEMICOLON       reduce using rule 14 (decl_list -> ID .)


state 21

    (11) decl -> INT decl_list .
    (12) decl_list -> decl_list . COMMA ID
    (13) decl_list -> decl_list . COMMA ptr

    SEMICOLON       reduce using rule 11 (decl -> INT decl_list .)
    COMMA           shift and go to state 33


state 22

    (17) num_assgn -> ID EQUALS . addr
    (18) num_assgn -> ID EQUALS . ID
    (26) addr -> . AND ID
    (27) addr -> . AND ptr

    ID              shift and go to state 35
    AND             shift and go to state 29

    addr                           shift and go to state 34

state 23

    (1) prog -> VOID MAIN LPAREN RPAREN LCURL body RCURL .

    $end            reduce using rule 1 (prog -> VOID MAIN LPAREN RPAREN LCURL body RCURL .)


state 24

    (6) stmt -> assgn_list SEMICOLON .

    INT             reduce using rule 6 (stmt -> assgn_list SEMICOLON .)
    ID              reduce using rule 6 (stmt -> assgn_list SEMICOLON .)
    STAR            reduce using rule 6 (stmt -> assgn_list SEMICOLON .)
    RCURL           reduce using rule 6 (stmt -> assgn_list SEMICOLON .)


state 25

    (7) assgn_list -> assgn_list COMMA . assgn
    (9) assgn -> . ptr_assgn
    (10) assgn -> . num_assgn
    (16) ptr_assgn -> . ptr EQUALS ptr_expr
    (17) num_assgn -> . ID EQUALS addr
    (18) num_assgn -> . ID EQUALS ID
    (23) ptr -> . STAR ptr
    (24) ptr -> . STAR ID
    (25) ptr -> . STAR addr

    ID              shift and go to state 8
    STAR            shift and go to state 15

    ptr_assgn                      shift and go to state 17
    ptr                            shift and go to state 16
    assgn                          shift and go to state 36
    num_assgn                      shift and go to state 12

state 26

    (5) stmt -> decl SEMICOLON .

    INT             reduce using rule 5 (stmt -> decl SEMICOLON .)
    ID              reduce using rule 5 (stmt -> decl SEMICOLON .)
    STAR            reduce using rule 5 (stmt -> decl SEMICOLON .)
    RCURL           reduce using rule 5 (stmt -> decl SEMICOLON .)


state 27

    (23) ptr -> STAR ptr .

    EQUALS          reduce using rule 23 (ptr -> STAR ptr .)
    COMMA           reduce using rule 23 (ptr -> STAR ptr .)
    SEMICOLON       reduce using rule 23 (ptr -> STAR ptr .)


state 28

    (24) ptr -> STAR ID .

    EQUALS          reduce using rule 24 (ptr -> STAR ID .)
    COMMA           reduce using rule 24 (ptr -> STAR ID .)
    SEMICOLON       reduce using rule 24 (ptr -> STAR ID .)


state 29

    (26) addr -> AND . ID
    (27) addr -> AND . ptr
    (23) ptr -> . STAR ptr
    (24) ptr -> . STAR ID
    (25) ptr -> . STAR addr

    ID              shift and go to state 37
    STAR            shift and go to state 15

    ptr                            shift and go to state 38

state 30

    (25) ptr -> STAR addr .

    EQUALS          reduce using rule 25 (ptr -> STAR addr .)
    COMMA           reduce using rule 25 (ptr -> STAR addr .)
    SEMICOLON       reduce using rule 25 (ptr -> STAR addr .)


state 31

    (16) ptr_assgn -> ptr EQUALS . ptr_expr
    (19) ptr_expr -> . ID
    (20) ptr_expr -> . NUM
    (21) ptr_expr -> . ptr
    (22) ptr_expr -> . addr
    (23) ptr -> . STAR ptr
    (24) ptr -> . STAR ID
    (25) ptr -> . STAR addr
    (26) addr -> . AND ID
    (27) addr -> . AND ptr

    ID              shift and go to state 43
    NUM             shift and go to state 41
    STAR            shift and go to state 15
    AND             shift and go to state 29

    ptr_expr                       shift and go to state 40
    addr                           shift and go to state 39
    ptr                            shift and go to state 42

state 32

    (3) body -> stmt body .

    RCURL           reduce using rule 3 (body -> stmt body .)


state 33

    (12) decl_list -> decl_list COMMA . ID
    (13) decl_list -> decl_list COMMA . ptr
    (23) ptr -> . STAR ptr
    (24) ptr -> . STAR ID
    (25) ptr -> . STAR addr

    ID              shift and go to state 45
    STAR            shift and go to state 15

    ptr                            shift and go to state 44

state 34

    (17) num_assgn -> ID EQUALS addr .

    SEMICOLON       reduce using rule 17 (num_assgn -> ID EQUALS addr .)
    COMMA           reduce using rule 17 (num_assgn -> ID EQUALS addr .)


state 35

    (18) num_assgn -> ID EQUALS ID .

    SEMICOLON       reduce using rule 18 (num_assgn -> ID EQUALS ID .)
    COMMA           reduce using rule 18 (num_assgn -> ID EQUALS ID .)


state 36

    (7) assgn_list -> assgn_list COMMA assgn .

    SEMICOLON       reduce using rule 7 (assgn_list -> assgn_list COMMA assgn .)
    COMMA           reduce using rule 7 (assgn_list -> assgn_list COMMA assgn .)


state 37

    (26) addr -> AND ID .

    SEMICOLON       reduce using rule 26 (addr -> AND ID .)
    COMMA           reduce using rule 26 (addr -> AND ID .)
    EQUALS          reduce using rule 26 (addr -> AND ID .)


state 38

    (27) addr -> AND ptr .

    SEMICOLON       reduce using rule 27 (addr -> AND ptr .)
    COMMA           reduce using rule 27 (addr -> AND ptr .)
    EQUALS          reduce using rule 27 (addr -> AND ptr .)


state 39

    (22) ptr_expr -> addr .

    SEMICOLON       reduce using rule 22 (ptr_expr -> addr .)
    COMMA           reduce using rule 22 (ptr_expr -> addr .)


state 40

    (16) ptr_assgn -> ptr EQUALS ptr_expr .

    SEMICOLON       reduce using rule 16 (ptr_assgn -> ptr EQUALS ptr_expr .)
    COMMA           reduce using rule 16 (ptr_assgn -> ptr EQUALS ptr_expr .)


state 41

    (20) ptr_expr -> NUM .

    SEMICOLON       reduce using rule 20 (ptr_expr -> NUM .)
    COMMA           reduce using rule 20 (ptr_expr -> NUM .)


state 42

    (21) ptr_expr -> ptr .

    SEMICOLON       reduce using rule 21 (ptr_expr -> ptr .)
    COMMA           reduce using rule 21 (ptr_expr -> ptr .)


state 43

    (19) ptr_expr -> ID .

    SEMICOLON       reduce using rule 19 (ptr_expr -> ID .)
    COMMA           reduce using rule 19 (ptr_expr -> ID .)


state 44

    (13) decl_list -> decl_list COMMA ptr .

    COMMA           reduce using rule 13 (decl_list -> decl_list COMMA ptr .)
    SEMICOLON       reduce using rule 13 (decl_list -> decl_list COMMA ptr .)


state 45

    (12) decl_list -> decl_list COMMA ID .

    COMMA           reduce using rule 12 (decl_list -> decl_list COMMA ID .)
    SEMICOLON       reduce using rule 12 (decl_list -> decl_list COMMA ID .)

