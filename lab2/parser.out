Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> VOID MAIN LPAREN RPAREN LCURL body RCURL
Rule 2     prog -> VOID MAIN LPAREN RPAREN LCURL RCURL
Rule 3     body -> stmt body
Rule 4     body -> stmt
Rule 5     stmt -> expr1 SEMICOLON
Rule 6     stmt -> expr2 SEMICOLON
Rule 7     expr2 -> expr2 COMMA equality
Rule 8     expr2 -> equality
Rule 9     equality -> equality1
Rule 10    equality -> equality2
Rule 11    expr1 -> INT subexpr1
Rule 12    subexpr1 -> subexpr1 COMMA ID
Rule 13    subexpr1 -> subexpr1 COMMA ptr
Rule 14    subexpr1 -> subexpr1 COMMA equality1
Rule 15    subexpr1 -> ID
Rule 16    subexpr1 -> ptr
Rule 17    subexpr1 -> equality1
Rule 18    equality1 -> ptr EQUALS ptrexpr
Rule 19    equality2 -> ID EQUALS addr
Rule 20    ptrexpr -> ptr EQUALS ptrexpr
Rule 21    ptrexpr -> NUM
Rule 22    ptrexpr -> ptr
Rule 23    ptr -> STAR ID
Rule 24    addr -> AND ID

Terminals, with rules where they appear

AND                  : 24
COMMA                : 7 12 13 14
EQUALS               : 18 19 20
ID                   : 12 15 19 23 24
INT                  : 11
LCURL                : 1 2
LPAREN               : 1 2
MAIN                 : 1 2
NUM                  : 21
RCURL                : 1 2
RPAREN               : 1 2
SEMICOLON            : 5 6
STAR                 : 23
VOID                 : 1 2
error                : 

Nonterminals, with rules where they appear

addr                 : 19
body                 : 1 3
equality             : 7 8
equality1            : 9 14 17
equality2            : 10
expr1                : 5
expr2                : 6 7
prog                 : 0
ptr                  : 13 16 18 20 22
ptrexpr              : 18 20
stmt                 : 3 4
subexpr1             : 11 12 13 14

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . VOID MAIN LPAREN RPAREN LCURL body RCURL
    (2) prog -> . VOID MAIN LPAREN RPAREN LCURL RCURL

    VOID            shift and go to state 1

    prog                           shift and go to state 2

state 1

    (1) prog -> VOID . MAIN LPAREN RPAREN LCURL body RCURL
    (2) prog -> VOID . MAIN LPAREN RPAREN LCURL RCURL

    MAIN            shift and go to state 3


state 2

    (0) S' -> prog .



state 3

    (1) prog -> VOID MAIN . LPAREN RPAREN LCURL body RCURL
    (2) prog -> VOID MAIN . LPAREN RPAREN LCURL RCURL

    LPAREN          shift and go to state 4


state 4

    (1) prog -> VOID MAIN LPAREN . RPAREN LCURL body RCURL
    (2) prog -> VOID MAIN LPAREN . RPAREN LCURL RCURL

    RPAREN          shift and go to state 5


state 5

    (1) prog -> VOID MAIN LPAREN RPAREN . LCURL body RCURL
    (2) prog -> VOID MAIN LPAREN RPAREN . LCURL RCURL

    LCURL           shift and go to state 6


state 6

    (1) prog -> VOID MAIN LPAREN RPAREN LCURL . body RCURL
    (2) prog -> VOID MAIN LPAREN RPAREN LCURL . RCURL
    (3) body -> . stmt body
    (4) body -> . stmt
    (5) stmt -> . expr1 SEMICOLON
    (6) stmt -> . expr2 SEMICOLON
    (11) expr1 -> . INT subexpr1
    (7) expr2 -> . expr2 COMMA equality
    (8) expr2 -> . equality
    (9) equality -> . equality1
    (10) equality -> . equality2
    (18) equality1 -> . ptr EQUALS ptrexpr
    (19) equality2 -> . ID EQUALS addr
    (23) ptr -> . STAR ID

    RCURL           shift and go to state 9
    INT             shift and go to state 16
    ID              shift and go to state 14
    STAR            shift and go to state 7

    body                           shift and go to state 12
    equality                       shift and go to state 15
    stmt                           shift and go to state 13
    expr2                          shift and go to state 10
    expr1                          shift and go to state 11
    equality1                      shift and go to state 17
    ptr                            shift and go to state 8
    equality2                      shift and go to state 18

state 7

    (23) ptr -> STAR . ID

    ID              shift and go to state 19


state 8

    (18) equality1 -> ptr . EQUALS ptrexpr

    EQUALS          shift and go to state 20


state 9

    (2) prog -> VOID MAIN LPAREN RPAREN LCURL RCURL .

    $end            reduce using rule 2 (prog -> VOID MAIN LPAREN RPAREN LCURL RCURL .)


state 10

    (6) stmt -> expr2 . SEMICOLON
    (7) expr2 -> expr2 . COMMA equality

    SEMICOLON       shift and go to state 22
    COMMA           shift and go to state 21


state 11

    (5) stmt -> expr1 . SEMICOLON

    SEMICOLON       shift and go to state 23


state 12

    (1) prog -> VOID MAIN LPAREN RPAREN LCURL body . RCURL

    RCURL           shift and go to state 24


state 13

    (3) body -> stmt . body
    (4) body -> stmt .
    (3) body -> . stmt body
    (4) body -> . stmt
    (5) stmt -> . expr1 SEMICOLON
    (6) stmt -> . expr2 SEMICOLON
    (11) expr1 -> . INT subexpr1
    (7) expr2 -> . expr2 COMMA equality
    (8) expr2 -> . equality
    (9) equality -> . equality1
    (10) equality -> . equality2
    (18) equality1 -> . ptr EQUALS ptrexpr
    (19) equality2 -> . ID EQUALS addr
    (23) ptr -> . STAR ID

    RCURL           reduce using rule 4 (body -> stmt .)
    INT             shift and go to state 16
    ID              shift and go to state 14
    STAR            shift and go to state 7

    body                           shift and go to state 25
    equality                       shift and go to state 15
    stmt                           shift and go to state 13
    expr2                          shift and go to state 10
    expr1                          shift and go to state 11
    equality1                      shift and go to state 17
    ptr                            shift and go to state 8
    equality2                      shift and go to state 18

state 14

    (19) equality2 -> ID . EQUALS addr

    EQUALS          shift and go to state 26


state 15

    (8) expr2 -> equality .

    SEMICOLON       reduce using rule 8 (expr2 -> equality .)
    COMMA           reduce using rule 8 (expr2 -> equality .)


state 16

    (11) expr1 -> INT . subexpr1
    (12) subexpr1 -> . subexpr1 COMMA ID
    (13) subexpr1 -> . subexpr1 COMMA ptr
    (14) subexpr1 -> . subexpr1 COMMA equality1
    (15) subexpr1 -> . ID
    (16) subexpr1 -> . ptr
    (17) subexpr1 -> . equality1
    (23) ptr -> . STAR ID
    (18) equality1 -> . ptr EQUALS ptrexpr

    ID              shift and go to state 30
    STAR            shift and go to state 7

    equality1                      shift and go to state 29
    subexpr1                       shift and go to state 27
    ptr                            shift and go to state 28

state 17

    (9) equality -> equality1 .

    SEMICOLON       reduce using rule 9 (equality -> equality1 .)
    COMMA           reduce using rule 9 (equality -> equality1 .)


state 18

    (10) equality -> equality2 .

    SEMICOLON       reduce using rule 10 (equality -> equality2 .)
    COMMA           reduce using rule 10 (equality -> equality2 .)


state 19

    (23) ptr -> STAR ID .

    EQUALS          reduce using rule 23 (ptr -> STAR ID .)
    SEMICOLON       reduce using rule 23 (ptr -> STAR ID .)
    COMMA           reduce using rule 23 (ptr -> STAR ID .)


state 20

    (18) equality1 -> ptr EQUALS . ptrexpr
    (20) ptrexpr -> . ptr EQUALS ptrexpr
    (21) ptrexpr -> . NUM
    (22) ptrexpr -> . ptr
    (23) ptr -> . STAR ID

    NUM             shift and go to state 33
    STAR            shift and go to state 7

    ptrexpr                        shift and go to state 31
    ptr                            shift and go to state 32

state 21

    (7) expr2 -> expr2 COMMA . equality
    (9) equality -> . equality1
    (10) equality -> . equality2
    (18) equality1 -> . ptr EQUALS ptrexpr
    (19) equality2 -> . ID EQUALS addr
    (23) ptr -> . STAR ID

    ID              shift and go to state 14
    STAR            shift and go to state 7

    equality                       shift and go to state 34
    equality1                      shift and go to state 17
    ptr                            shift and go to state 8
    equality2                      shift and go to state 18

state 22

    (6) stmt -> expr2 SEMICOLON .

    INT             reduce using rule 6 (stmt -> expr2 SEMICOLON .)
    ID              reduce using rule 6 (stmt -> expr2 SEMICOLON .)
    STAR            reduce using rule 6 (stmt -> expr2 SEMICOLON .)
    RCURL           reduce using rule 6 (stmt -> expr2 SEMICOLON .)


state 23

    (5) stmt -> expr1 SEMICOLON .

    INT             reduce using rule 5 (stmt -> expr1 SEMICOLON .)
    ID              reduce using rule 5 (stmt -> expr1 SEMICOLON .)
    STAR            reduce using rule 5 (stmt -> expr1 SEMICOLON .)
    RCURL           reduce using rule 5 (stmt -> expr1 SEMICOLON .)


state 24

    (1) prog -> VOID MAIN LPAREN RPAREN LCURL body RCURL .

    $end            reduce using rule 1 (prog -> VOID MAIN LPAREN RPAREN LCURL body RCURL .)


state 25

    (3) body -> stmt body .

    RCURL           reduce using rule 3 (body -> stmt body .)


state 26

    (19) equality2 -> ID EQUALS . addr
    (24) addr -> . AND ID

    AND             shift and go to state 35

    addr                           shift and go to state 36

state 27

    (11) expr1 -> INT subexpr1 .
    (12) subexpr1 -> subexpr1 . COMMA ID
    (13) subexpr1 -> subexpr1 . COMMA ptr
    (14) subexpr1 -> subexpr1 . COMMA equality1

    SEMICOLON       reduce using rule 11 (expr1 -> INT subexpr1 .)
    COMMA           shift and go to state 37


state 28

    (16) subexpr1 -> ptr .
    (18) equality1 -> ptr . EQUALS ptrexpr

    COMMA           reduce using rule 16 (subexpr1 -> ptr .)
    SEMICOLON       reduce using rule 16 (subexpr1 -> ptr .)
    EQUALS          shift and go to state 20


state 29

    (17) subexpr1 -> equality1 .

    COMMA           reduce using rule 17 (subexpr1 -> equality1 .)
    SEMICOLON       reduce using rule 17 (subexpr1 -> equality1 .)


state 30

    (15) subexpr1 -> ID .

    COMMA           reduce using rule 15 (subexpr1 -> ID .)
    SEMICOLON       reduce using rule 15 (subexpr1 -> ID .)


state 31

    (18) equality1 -> ptr EQUALS ptrexpr .

    SEMICOLON       reduce using rule 18 (equality1 -> ptr EQUALS ptrexpr .)
    COMMA           reduce using rule 18 (equality1 -> ptr EQUALS ptrexpr .)


state 32

    (20) ptrexpr -> ptr . EQUALS ptrexpr
    (22) ptrexpr -> ptr .

    EQUALS          shift and go to state 38
    SEMICOLON       reduce using rule 22 (ptrexpr -> ptr .)
    COMMA           reduce using rule 22 (ptrexpr -> ptr .)


state 33

    (21) ptrexpr -> NUM .

    SEMICOLON       reduce using rule 21 (ptrexpr -> NUM .)
    COMMA           reduce using rule 21 (ptrexpr -> NUM .)


state 34

    (7) expr2 -> expr2 COMMA equality .

    SEMICOLON       reduce using rule 7 (expr2 -> expr2 COMMA equality .)
    COMMA           reduce using rule 7 (expr2 -> expr2 COMMA equality .)


state 35

    (24) addr -> AND . ID

    ID              shift and go to state 39


state 36

    (19) equality2 -> ID EQUALS addr .

    SEMICOLON       reduce using rule 19 (equality2 -> ID EQUALS addr .)
    COMMA           reduce using rule 19 (equality2 -> ID EQUALS addr .)


state 37

    (12) subexpr1 -> subexpr1 COMMA . ID
    (13) subexpr1 -> subexpr1 COMMA . ptr
    (14) subexpr1 -> subexpr1 COMMA . equality1
    (23) ptr -> . STAR ID
    (18) equality1 -> . ptr EQUALS ptrexpr

    ID              shift and go to state 42
    STAR            shift and go to state 7

    equality1                      shift and go to state 41
    ptr                            shift and go to state 40

state 38

    (20) ptrexpr -> ptr EQUALS . ptrexpr
    (20) ptrexpr -> . ptr EQUALS ptrexpr
    (21) ptrexpr -> . NUM
    (22) ptrexpr -> . ptr
    (23) ptr -> . STAR ID

    NUM             shift and go to state 33
    STAR            shift and go to state 7

    ptrexpr                        shift and go to state 43
    ptr                            shift and go to state 32

state 39

    (24) addr -> AND ID .

    SEMICOLON       reduce using rule 24 (addr -> AND ID .)
    COMMA           reduce using rule 24 (addr -> AND ID .)


state 40

    (13) subexpr1 -> subexpr1 COMMA ptr .
    (18) equality1 -> ptr . EQUALS ptrexpr

    COMMA           reduce using rule 13 (subexpr1 -> subexpr1 COMMA ptr .)
    SEMICOLON       reduce using rule 13 (subexpr1 -> subexpr1 COMMA ptr .)
    EQUALS          shift and go to state 20


state 41

    (14) subexpr1 -> subexpr1 COMMA equality1 .

    COMMA           reduce using rule 14 (subexpr1 -> subexpr1 COMMA equality1 .)
    SEMICOLON       reduce using rule 14 (subexpr1 -> subexpr1 COMMA equality1 .)


state 42

    (12) subexpr1 -> subexpr1 COMMA ID .

    COMMA           reduce using rule 12 (subexpr1 -> subexpr1 COMMA ID .)
    SEMICOLON       reduce using rule 12 (subexpr1 -> subexpr1 COMMA ID .)


state 43

    (20) ptrexpr -> ptr EQUALS ptrexpr .

    SEMICOLON       reduce using rule 20 (ptrexpr -> ptr EQUALS ptrexpr .)
    COMMA           reduce using rule 20 (ptrexpr -> ptr EQUALS ptrexpr .)

