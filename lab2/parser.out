Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> VOID MAIN LPAREN RPAREN LCURL body RCURL
Rule 2     prog -> VOID MAIN LPAREN RPAREN LCURL RCURL
Rule 3     body -> stmt body
Rule 4     body -> stmt
Rule 5     stmt -> decl SEMICOLON
Rule 6     stmt -> assgn_list SEMICOLON
Rule 7     assgn_list -> assgn_list COMMA assgn
Rule 8     assgn_list -> assgn
Rule 9     assgn -> ptr_assgn
Rule 10    assgn -> num_assgn
Rule 11    decl -> INT decl_list
Rule 12    decl_list -> decl_list COMMA ID
Rule 13    decl_list -> decl_list COMMA ptr
Rule 14    decl_list -> decl_list COMMA ptr_assgn
Rule 15    decl_list -> ID
Rule 16    decl_list -> ptr
Rule 17    decl_list -> ptr_assgn
Rule 18    ptr_assgn -> ptr EQUALS ptr_expr
Rule 19    num_assgn -> ID EQUALS addr
Rule 20    ptr_expr -> ptr EQUALS ptr_expr
Rule 21    ptr_expr -> NUM
Rule 22    ptr_expr -> ptr
Rule 23    ptr -> STAR ID
Rule 24    addr -> AND ID

Terminals, with rules where they appear

AND                  : 24
COMMA                : 7 12 13 14
EQUALS               : 18 19 20
ID                   : 12 15 19 23 24
INT                  : 11
LCURL                : 1 2
LPAREN               : 1 2
MAIN                 : 1 2
NUM                  : 21
RCURL                : 1 2
RPAREN               : 1 2
SEMICOLON            : 5 6
STAR                 : 23
VOID                 : 1 2
error                : 

Nonterminals, with rules where they appear

addr                 : 19
assgn                : 7 8
assgn_list           : 6 7
body                 : 1 3
decl                 : 5
decl_list            : 11 12 13 14
num_assgn            : 10
prog                 : 0
ptr                  : 13 16 18 20 22
ptr_assgn            : 9 14 17
ptr_expr             : 18 20
stmt                 : 3 4

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . VOID MAIN LPAREN RPAREN LCURL body RCURL
    (2) prog -> . VOID MAIN LPAREN RPAREN LCURL RCURL

    VOID            shift and go to state 2

    prog                           shift and go to state 1

state 1

    (0) S' -> prog .



state 2

    (1) prog -> VOID . MAIN LPAREN RPAREN LCURL body RCURL
    (2) prog -> VOID . MAIN LPAREN RPAREN LCURL RCURL

    MAIN            shift and go to state 3


state 3

    (1) prog -> VOID MAIN . LPAREN RPAREN LCURL body RCURL
    (2) prog -> VOID MAIN . LPAREN RPAREN LCURL RCURL

    LPAREN          shift and go to state 4


state 4

    (1) prog -> VOID MAIN LPAREN . RPAREN LCURL body RCURL
    (2) prog -> VOID MAIN LPAREN . RPAREN LCURL RCURL

    RPAREN          shift and go to state 5


state 5

    (1) prog -> VOID MAIN LPAREN RPAREN . LCURL body RCURL
    (2) prog -> VOID MAIN LPAREN RPAREN . LCURL RCURL

    LCURL           shift and go to state 6


state 6

    (1) prog -> VOID MAIN LPAREN RPAREN LCURL . body RCURL
    (2) prog -> VOID MAIN LPAREN RPAREN LCURL . RCURL
    (3) body -> . stmt body
    (4) body -> . stmt
    (5) stmt -> . decl SEMICOLON
    (6) stmt -> . assgn_list SEMICOLON
    (11) decl -> . INT decl_list
    (7) assgn_list -> . assgn_list COMMA assgn
    (8) assgn_list -> . assgn
    (9) assgn -> . ptr_assgn
    (10) assgn -> . num_assgn
    (18) ptr_assgn -> . ptr EQUALS ptr_expr
    (19) num_assgn -> . ID EQUALS addr
    (23) ptr -> . STAR ID

    RCURL           shift and go to state 18
    INT             shift and go to state 16
    ID              shift and go to state 11
    STAR            shift and go to state 17

    assgn_list                     shift and go to state 7
    assgn                          shift and go to state 15
    ptr                            shift and go to state 14
    stmt                           shift and go to state 12
    decl                           shift and go to state 13
    num_assgn                      shift and go to state 8
    ptr_assgn                      shift and go to state 9
    body                           shift and go to state 10

state 7

    (6) stmt -> assgn_list . SEMICOLON
    (7) assgn_list -> assgn_list . COMMA assgn

    SEMICOLON       shift and go to state 20
    COMMA           shift and go to state 19


state 8

    (10) assgn -> num_assgn .

    SEMICOLON       reduce using rule 10 (assgn -> num_assgn .)
    COMMA           reduce using rule 10 (assgn -> num_assgn .)


state 9

    (9) assgn -> ptr_assgn .

    SEMICOLON       reduce using rule 9 (assgn -> ptr_assgn .)
    COMMA           reduce using rule 9 (assgn -> ptr_assgn .)


state 10

    (1) prog -> VOID MAIN LPAREN RPAREN LCURL body . RCURL

    RCURL           shift and go to state 21


state 11

    (19) num_assgn -> ID . EQUALS addr

    EQUALS          shift and go to state 22


state 12

    (3) body -> stmt . body
    (4) body -> stmt .
    (3) body -> . stmt body
    (4) body -> . stmt
    (5) stmt -> . decl SEMICOLON
    (6) stmt -> . assgn_list SEMICOLON
    (11) decl -> . INT decl_list
    (7) assgn_list -> . assgn_list COMMA assgn
    (8) assgn_list -> . assgn
    (9) assgn -> . ptr_assgn
    (10) assgn -> . num_assgn
    (18) ptr_assgn -> . ptr EQUALS ptr_expr
    (19) num_assgn -> . ID EQUALS addr
    (23) ptr -> . STAR ID

    RCURL           reduce using rule 4 (body -> stmt .)
    INT             shift and go to state 16
    ID              shift and go to state 11
    STAR            shift and go to state 17

    assgn_list                     shift and go to state 7
    assgn                          shift and go to state 15
    ptr                            shift and go to state 14
    stmt                           shift and go to state 12
    decl                           shift and go to state 13
    num_assgn                      shift and go to state 8
    ptr_assgn                      shift and go to state 9
    body                           shift and go to state 23

state 13

    (5) stmt -> decl . SEMICOLON

    SEMICOLON       shift and go to state 24


state 14

    (18) ptr_assgn -> ptr . EQUALS ptr_expr

    EQUALS          shift and go to state 25


state 15

    (8) assgn_list -> assgn .

    SEMICOLON       reduce using rule 8 (assgn_list -> assgn .)
    COMMA           reduce using rule 8 (assgn_list -> assgn .)


state 16

    (11) decl -> INT . decl_list
    (12) decl_list -> . decl_list COMMA ID
    (13) decl_list -> . decl_list COMMA ptr
    (14) decl_list -> . decl_list COMMA ptr_assgn
    (15) decl_list -> . ID
    (16) decl_list -> . ptr
    (17) decl_list -> . ptr_assgn
    (23) ptr -> . STAR ID
    (18) ptr_assgn -> . ptr EQUALS ptr_expr

    ID              shift and go to state 26
    STAR            shift and go to state 17

    ptr_assgn                      shift and go to state 27
    ptr                            shift and go to state 28
    decl_list                      shift and go to state 29

state 17

    (23) ptr -> STAR . ID

    ID              shift and go to state 30


state 18

    (2) prog -> VOID MAIN LPAREN RPAREN LCURL RCURL .

    $end            reduce using rule 2 (prog -> VOID MAIN LPAREN RPAREN LCURL RCURL .)


state 19

    (7) assgn_list -> assgn_list COMMA . assgn
    (9) assgn -> . ptr_assgn
    (10) assgn -> . num_assgn
    (18) ptr_assgn -> . ptr EQUALS ptr_expr
    (19) num_assgn -> . ID EQUALS addr
    (23) ptr -> . STAR ID

    ID              shift and go to state 11
    STAR            shift and go to state 17

    assgn                          shift and go to state 31
    ptr_assgn                      shift and go to state 9
    num_assgn                      shift and go to state 8
    ptr                            shift and go to state 14

state 20

    (6) stmt -> assgn_list SEMICOLON .

    INT             reduce using rule 6 (stmt -> assgn_list SEMICOLON .)
    ID              reduce using rule 6 (stmt -> assgn_list SEMICOLON .)
    STAR            reduce using rule 6 (stmt -> assgn_list SEMICOLON .)
    RCURL           reduce using rule 6 (stmt -> assgn_list SEMICOLON .)


state 21

    (1) prog -> VOID MAIN LPAREN RPAREN LCURL body RCURL .

    $end            reduce using rule 1 (prog -> VOID MAIN LPAREN RPAREN LCURL body RCURL .)


state 22

    (19) num_assgn -> ID EQUALS . addr
    (24) addr -> . AND ID

    AND             shift and go to state 33

    addr                           shift and go to state 32

state 23

    (3) body -> stmt body .

    RCURL           reduce using rule 3 (body -> stmt body .)


state 24

    (5) stmt -> decl SEMICOLON .

    INT             reduce using rule 5 (stmt -> decl SEMICOLON .)
    ID              reduce using rule 5 (stmt -> decl SEMICOLON .)
    STAR            reduce using rule 5 (stmt -> decl SEMICOLON .)
    RCURL           reduce using rule 5 (stmt -> decl SEMICOLON .)


state 25

    (18) ptr_assgn -> ptr EQUALS . ptr_expr
    (20) ptr_expr -> . ptr EQUALS ptr_expr
    (21) ptr_expr -> . NUM
    (22) ptr_expr -> . ptr
    (23) ptr -> . STAR ID

    NUM             shift and go to state 35
    STAR            shift and go to state 17

    ptr                            shift and go to state 36
    ptr_expr                       shift and go to state 34

state 26

    (15) decl_list -> ID .

    COMMA           reduce using rule 15 (decl_list -> ID .)
    SEMICOLON       reduce using rule 15 (decl_list -> ID .)


state 27

    (17) decl_list -> ptr_assgn .

    COMMA           reduce using rule 17 (decl_list -> ptr_assgn .)
    SEMICOLON       reduce using rule 17 (decl_list -> ptr_assgn .)


state 28

    (16) decl_list -> ptr .
    (18) ptr_assgn -> ptr . EQUALS ptr_expr

    COMMA           reduce using rule 16 (decl_list -> ptr .)
    SEMICOLON       reduce using rule 16 (decl_list -> ptr .)
    EQUALS          shift and go to state 25


state 29

    (11) decl -> INT decl_list .
    (12) decl_list -> decl_list . COMMA ID
    (13) decl_list -> decl_list . COMMA ptr
    (14) decl_list -> decl_list . COMMA ptr_assgn

    SEMICOLON       reduce using rule 11 (decl -> INT decl_list .)
    COMMA           shift and go to state 37


state 30

    (23) ptr -> STAR ID .

    EQUALS          reduce using rule 23 (ptr -> STAR ID .)
    COMMA           reduce using rule 23 (ptr -> STAR ID .)
    SEMICOLON       reduce using rule 23 (ptr -> STAR ID .)


state 31

    (7) assgn_list -> assgn_list COMMA assgn .

    SEMICOLON       reduce using rule 7 (assgn_list -> assgn_list COMMA assgn .)
    COMMA           reduce using rule 7 (assgn_list -> assgn_list COMMA assgn .)


state 32

    (19) num_assgn -> ID EQUALS addr .

    SEMICOLON       reduce using rule 19 (num_assgn -> ID EQUALS addr .)
    COMMA           reduce using rule 19 (num_assgn -> ID EQUALS addr .)


state 33

    (24) addr -> AND . ID

    ID              shift and go to state 38


state 34

    (18) ptr_assgn -> ptr EQUALS ptr_expr .

    SEMICOLON       reduce using rule 18 (ptr_assgn -> ptr EQUALS ptr_expr .)
    COMMA           reduce using rule 18 (ptr_assgn -> ptr EQUALS ptr_expr .)


state 35

    (21) ptr_expr -> NUM .

    SEMICOLON       reduce using rule 21 (ptr_expr -> NUM .)
    COMMA           reduce using rule 21 (ptr_expr -> NUM .)


state 36

    (20) ptr_expr -> ptr . EQUALS ptr_expr
    (22) ptr_expr -> ptr .

    EQUALS          shift and go to state 39
    SEMICOLON       reduce using rule 22 (ptr_expr -> ptr .)
    COMMA           reduce using rule 22 (ptr_expr -> ptr .)


state 37

    (12) decl_list -> decl_list COMMA . ID
    (13) decl_list -> decl_list COMMA . ptr
    (14) decl_list -> decl_list COMMA . ptr_assgn
    (23) ptr -> . STAR ID
    (18) ptr_assgn -> . ptr EQUALS ptr_expr

    ID              shift and go to state 40
    STAR            shift and go to state 17

    ptr_assgn                      shift and go to state 42
    ptr                            shift and go to state 41

state 38

    (24) addr -> AND ID .

    SEMICOLON       reduce using rule 24 (addr -> AND ID .)
    COMMA           reduce using rule 24 (addr -> AND ID .)


state 39

    (20) ptr_expr -> ptr EQUALS . ptr_expr
    (20) ptr_expr -> . ptr EQUALS ptr_expr
    (21) ptr_expr -> . NUM
    (22) ptr_expr -> . ptr
    (23) ptr -> . STAR ID

    NUM             shift and go to state 35
    STAR            shift and go to state 17

    ptr                            shift and go to state 36
    ptr_expr                       shift and go to state 43

state 40

    (12) decl_list -> decl_list COMMA ID .

    COMMA           reduce using rule 12 (decl_list -> decl_list COMMA ID .)
    SEMICOLON       reduce using rule 12 (decl_list -> decl_list COMMA ID .)


state 41

    (13) decl_list -> decl_list COMMA ptr .
    (18) ptr_assgn -> ptr . EQUALS ptr_expr

    COMMA           reduce using rule 13 (decl_list -> decl_list COMMA ptr .)
    SEMICOLON       reduce using rule 13 (decl_list -> decl_list COMMA ptr .)
    EQUALS          shift and go to state 25


state 42

    (14) decl_list -> decl_list COMMA ptr_assgn .

    COMMA           reduce using rule 14 (decl_list -> decl_list COMMA ptr_assgn .)
    SEMICOLON       reduce using rule 14 (decl_list -> decl_list COMMA ptr_assgn .)


state 43

    (20) ptr_expr -> ptr EQUALS ptr_expr .

    SEMICOLON       reduce using rule 20 (ptr_expr -> ptr EQUALS ptr_expr .)
    COMMA           reduce using rule 20 (ptr_expr -> ptr EQUALS ptr_expr .)

