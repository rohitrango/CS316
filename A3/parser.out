Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> VOID MAIN LPAREN RPAREN LCURL body RCURL
Rule 2     prog -> VOID MAIN LPAREN RPAREN LCURL RCURL
Rule 3     body -> stmt body
Rule 4     body -> stmt
Rule 5     stmt -> decl SEMICOLON
Rule 6     stmt -> assgn SEMICOLON
Rule 7     stmt -> if_stmt
Rule 8     stmt -> while_stmt
Rule 9     if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt
Rule 10    if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt ELSE compound_stmt
Rule 11    while_stmt -> WHILE LPAREN ptr_expr RPAREN compound_stmt
Rule 12    compound_stmt -> stmt
Rule 13    compound_stmt -> LCURL body RCURL
Rule 14    assgn -> ptr_assgn
Rule 15    assgn -> num_assgn
Rule 16    decl -> INT decl_list
Rule 17    decl_list -> decl_list COMMA ID
Rule 18    decl_list -> decl_list COMMA ptr
Rule 19    decl_list -> ID
Rule 20    decl_list -> ptr
Rule 21    ptr_assgn -> ptr EQUALS ptr_expr
Rule 22    num_assgn -> ID EQUALS ptr_expr
Rule 23    ptr_expr -> ptr_expr PLUS ptr_factor
Rule 24    ptr_expr -> ptr_expr MINUS ptr_factor
Rule 25    ptr_expr -> ptr_factor
Rule 26    ptr_factor -> ptr_factor STAR ptr_term
Rule 27    ptr_factor -> ptr_factor SLASH ptr_term
Rule 28    ptr_factor -> ptr_term
Rule 29    ptr_term -> MINUS ptr_term
Rule 30    ptr_term -> ptr_expr_base
Rule 31    ptr_expr_base -> ID
Rule 32    ptr_expr_base -> NUM
Rule 33    ptr_expr_base -> ptr
Rule 34    ptr_expr_base -> addr
Rule 35    ptr_expr_base -> LPAREN ptr_expr RPAREN
Rule 36    ptr -> STAR ptr
Rule 37    ptr -> STAR ID
Rule 38    ptr -> STAR addr
Rule 39    addr -> AND ID
Rule 40    addr -> AND ptr
Rule 41    addr -> AND addr

Terminals, with rules where they appear

AND                  : 39 40 41
COMMA                : 17 18
ELSE                 : 10
EQUALS               : 21 22
ID                   : 17 19 22 31 37 39
IF                   : 9 10
INT                  : 16
LCURL                : 1 2 13
LPAREN               : 1 2 9 10 11 35
MAIN                 : 1 2
MINUS                : 24 29
NUM                  : 32
PLUS                 : 23
RCURL                : 1 2 13
RPAREN               : 1 2 9 10 11 35
SEMICOLON            : 5 6
SLASH                : 27
STAR                 : 26 36 37 38
VOID                 : 1 2
WHILE                : 11
error                : 

Nonterminals, with rules where they appear

addr                 : 34 38 41
assgn                : 6
body                 : 1 3 13
compound_stmt        : 9 10 10 11
decl                 : 5
decl_list            : 16 17 18
if_stmt              : 7
num_assgn            : 15
prog                 : 0
ptr                  : 18 20 21 33 36 40
ptr_assgn            : 14
ptr_expr             : 9 10 11 21 22 23 24 35
ptr_expr_base        : 30
ptr_factor           : 23 24 25 26 27
ptr_term             : 26 27 28 29
stmt                 : 3 4 12
while_stmt           : 8

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . VOID MAIN LPAREN RPAREN LCURL body RCURL
    (2) prog -> . VOID MAIN LPAREN RPAREN LCURL RCURL

    VOID            shift and go to state 1

    prog                           shift and go to state 2

state 1

    (1) prog -> VOID . MAIN LPAREN RPAREN LCURL body RCURL
    (2) prog -> VOID . MAIN LPAREN RPAREN LCURL RCURL

    MAIN            shift and go to state 3


state 2

    (0) S' -> prog .



state 3

    (1) prog -> VOID MAIN . LPAREN RPAREN LCURL body RCURL
    (2) prog -> VOID MAIN . LPAREN RPAREN LCURL RCURL

    LPAREN          shift and go to state 4


state 4

    (1) prog -> VOID MAIN LPAREN . RPAREN LCURL body RCURL
    (2) prog -> VOID MAIN LPAREN . RPAREN LCURL RCURL

    RPAREN          shift and go to state 5


state 5

    (1) prog -> VOID MAIN LPAREN RPAREN . LCURL body RCURL
    (2) prog -> VOID MAIN LPAREN RPAREN . LCURL RCURL

    LCURL           shift and go to state 6


state 6

    (1) prog -> VOID MAIN LPAREN RPAREN LCURL . body RCURL
    (2) prog -> VOID MAIN LPAREN RPAREN LCURL . RCURL
    (3) body -> . stmt body
    (4) body -> . stmt
    (5) stmt -> . decl SEMICOLON
    (6) stmt -> . assgn SEMICOLON
    (7) stmt -> . if_stmt
    (8) stmt -> . while_stmt
    (16) decl -> . INT decl_list
    (14) assgn -> . ptr_assgn
    (15) assgn -> . num_assgn
    (9) if_stmt -> . IF LPAREN ptr_expr RPAREN compound_stmt
    (10) if_stmt -> . IF LPAREN ptr_expr RPAREN compound_stmt ELSE compound_stmt
    (11) while_stmt -> . WHILE LPAREN ptr_expr RPAREN compound_stmt
    (21) ptr_assgn -> . ptr EQUALS ptr_expr
    (22) num_assgn -> . ID EQUALS ptr_expr
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr

    RCURL           shift and go to state 12
    INT             shift and go to state 19
    IF              shift and go to state 17
    WHILE           shift and go to state 9
    ID              shift and go to state 16
    STAR            shift and go to state 8

    body                           shift and go to state 13
    decl                           shift and go to state 7
    if_stmt                        shift and go to state 18
    assgn                          shift and go to state 11
    num_assgn                      shift and go to state 14
    ptr_assgn                      shift and go to state 20
    stmt                           shift and go to state 15
    ptr                            shift and go to state 10
    while_stmt                     shift and go to state 21

state 7

    (5) stmt -> decl . SEMICOLON

    SEMICOLON       shift and go to state 22


state 8

    (36) ptr -> STAR . ptr
    (37) ptr -> STAR . ID
    (38) ptr -> STAR . addr
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr
    (39) addr -> . AND ID
    (40) addr -> . AND ptr
    (41) addr -> . AND addr

    ID              shift and go to state 26
    STAR            shift and go to state 8
    AND             shift and go to state 23

    ptr                            shift and go to state 25
    addr                           shift and go to state 24

state 9

    (11) while_stmt -> WHILE . LPAREN ptr_expr RPAREN compound_stmt

    LPAREN          shift and go to state 27


state 10

    (21) ptr_assgn -> ptr . EQUALS ptr_expr

    EQUALS          shift and go to state 28


state 11

    (6) stmt -> assgn . SEMICOLON

    SEMICOLON       shift and go to state 29


state 12

    (2) prog -> VOID MAIN LPAREN RPAREN LCURL RCURL .

    $end            reduce using rule 2 (prog -> VOID MAIN LPAREN RPAREN LCURL RCURL .)


state 13

    (1) prog -> VOID MAIN LPAREN RPAREN LCURL body . RCURL

    RCURL           shift and go to state 30


state 14

    (15) assgn -> num_assgn .

    SEMICOLON       reduce using rule 15 (assgn -> num_assgn .)


state 15

    (3) body -> stmt . body
    (4) body -> stmt .
    (3) body -> . stmt body
    (4) body -> . stmt
    (5) stmt -> . decl SEMICOLON
    (6) stmt -> . assgn SEMICOLON
    (7) stmt -> . if_stmt
    (8) stmt -> . while_stmt
    (16) decl -> . INT decl_list
    (14) assgn -> . ptr_assgn
    (15) assgn -> . num_assgn
    (9) if_stmt -> . IF LPAREN ptr_expr RPAREN compound_stmt
    (10) if_stmt -> . IF LPAREN ptr_expr RPAREN compound_stmt ELSE compound_stmt
    (11) while_stmt -> . WHILE LPAREN ptr_expr RPAREN compound_stmt
    (21) ptr_assgn -> . ptr EQUALS ptr_expr
    (22) num_assgn -> . ID EQUALS ptr_expr
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr

    RCURL           reduce using rule 4 (body -> stmt .)
    INT             shift and go to state 19
    IF              shift and go to state 17
    WHILE           shift and go to state 9
    ID              shift and go to state 16
    STAR            shift and go to state 8

    body                           shift and go to state 31
    decl                           shift and go to state 7
    if_stmt                        shift and go to state 18
    assgn                          shift and go to state 11
    num_assgn                      shift and go to state 14
    ptr_assgn                      shift and go to state 20
    stmt                           shift and go to state 15
    ptr                            shift and go to state 10
    while_stmt                     shift and go to state 21

state 16

    (22) num_assgn -> ID . EQUALS ptr_expr

    EQUALS          shift and go to state 32


state 17

    (9) if_stmt -> IF . LPAREN ptr_expr RPAREN compound_stmt
    (10) if_stmt -> IF . LPAREN ptr_expr RPAREN compound_stmt ELSE compound_stmt

    LPAREN          shift and go to state 33


state 18

    (7) stmt -> if_stmt .

    INT             reduce using rule 7 (stmt -> if_stmt .)
    IF              reduce using rule 7 (stmt -> if_stmt .)
    WHILE           reduce using rule 7 (stmt -> if_stmt .)
    ID              reduce using rule 7 (stmt -> if_stmt .)
    STAR            reduce using rule 7 (stmt -> if_stmt .)
    RCURL           reduce using rule 7 (stmt -> if_stmt .)
    ELSE            reduce using rule 7 (stmt -> if_stmt .)


state 19

    (16) decl -> INT . decl_list
    (17) decl_list -> . decl_list COMMA ID
    (18) decl_list -> . decl_list COMMA ptr
    (19) decl_list -> . ID
    (20) decl_list -> . ptr
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr

    ID              shift and go to state 36
    STAR            shift and go to state 8

    ptr                            shift and go to state 35
    decl_list                      shift and go to state 34

state 20

    (14) assgn -> ptr_assgn .

    SEMICOLON       reduce using rule 14 (assgn -> ptr_assgn .)


state 21

    (8) stmt -> while_stmt .

    INT             reduce using rule 8 (stmt -> while_stmt .)
    IF              reduce using rule 8 (stmt -> while_stmt .)
    WHILE           reduce using rule 8 (stmt -> while_stmt .)
    ID              reduce using rule 8 (stmt -> while_stmt .)
    STAR            reduce using rule 8 (stmt -> while_stmt .)
    RCURL           reduce using rule 8 (stmt -> while_stmt .)
    ELSE            reduce using rule 8 (stmt -> while_stmt .)


state 22

    (5) stmt -> decl SEMICOLON .

    INT             reduce using rule 5 (stmt -> decl SEMICOLON .)
    IF              reduce using rule 5 (stmt -> decl SEMICOLON .)
    WHILE           reduce using rule 5 (stmt -> decl SEMICOLON .)
    ID              reduce using rule 5 (stmt -> decl SEMICOLON .)
    STAR            reduce using rule 5 (stmt -> decl SEMICOLON .)
    RCURL           reduce using rule 5 (stmt -> decl SEMICOLON .)
    ELSE            reduce using rule 5 (stmt -> decl SEMICOLON .)


state 23

    (39) addr -> AND . ID
    (40) addr -> AND . ptr
    (41) addr -> AND . addr
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr
    (39) addr -> . AND ID
    (40) addr -> . AND ptr
    (41) addr -> . AND addr

    ID              shift and go to state 38
    STAR            shift and go to state 8
    AND             shift and go to state 23

    ptr                            shift and go to state 39
    addr                           shift and go to state 37

state 24

    (38) ptr -> STAR addr .

    EQUALS          reduce using rule 38 (ptr -> STAR addr .)
    COMMA           reduce using rule 38 (ptr -> STAR addr .)
    SEMICOLON       reduce using rule 38 (ptr -> STAR addr .)
    STAR            reduce using rule 38 (ptr -> STAR addr .)
    SLASH           reduce using rule 38 (ptr -> STAR addr .)
    RPAREN          reduce using rule 38 (ptr -> STAR addr .)
    PLUS            reduce using rule 38 (ptr -> STAR addr .)
    MINUS           reduce using rule 38 (ptr -> STAR addr .)


state 25

    (36) ptr -> STAR ptr .

    EQUALS          reduce using rule 36 (ptr -> STAR ptr .)
    COMMA           reduce using rule 36 (ptr -> STAR ptr .)
    SEMICOLON       reduce using rule 36 (ptr -> STAR ptr .)
    STAR            reduce using rule 36 (ptr -> STAR ptr .)
    SLASH           reduce using rule 36 (ptr -> STAR ptr .)
    RPAREN          reduce using rule 36 (ptr -> STAR ptr .)
    PLUS            reduce using rule 36 (ptr -> STAR ptr .)
    MINUS           reduce using rule 36 (ptr -> STAR ptr .)


state 26

    (37) ptr -> STAR ID .

    EQUALS          reduce using rule 37 (ptr -> STAR ID .)
    COMMA           reduce using rule 37 (ptr -> STAR ID .)
    SEMICOLON       reduce using rule 37 (ptr -> STAR ID .)
    STAR            reduce using rule 37 (ptr -> STAR ID .)
    SLASH           reduce using rule 37 (ptr -> STAR ID .)
    RPAREN          reduce using rule 37 (ptr -> STAR ID .)
    PLUS            reduce using rule 37 (ptr -> STAR ID .)
    MINUS           reduce using rule 37 (ptr -> STAR ID .)


state 27

    (11) while_stmt -> WHILE LPAREN . ptr_expr RPAREN compound_stmt
    (23) ptr_expr -> . ptr_expr PLUS ptr_factor
    (24) ptr_expr -> . ptr_expr MINUS ptr_factor
    (25) ptr_expr -> . ptr_factor
    (26) ptr_factor -> . ptr_factor STAR ptr_term
    (27) ptr_factor -> . ptr_factor SLASH ptr_term
    (28) ptr_factor -> . ptr_term
    (29) ptr_term -> . MINUS ptr_term
    (30) ptr_term -> . ptr_expr_base
    (31) ptr_expr_base -> . ID
    (32) ptr_expr_base -> . NUM
    (33) ptr_expr_base -> . ptr
    (34) ptr_expr_base -> . addr
    (35) ptr_expr_base -> . LPAREN ptr_expr RPAREN
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr
    (39) addr -> . AND ID
    (40) addr -> . AND ptr
    (41) addr -> . AND addr

    MINUS           shift and go to state 41
    ID              shift and go to state 48
    NUM             shift and go to state 43
    LPAREN          shift and go to state 44
    STAR            shift and go to state 8
    AND             shift and go to state 23

    addr                           shift and go to state 49
    ptr_expr_base                  shift and go to state 42
    ptr_factor                     shift and go to state 45
    ptr_term                       shift and go to state 46
    ptr_expr                       shift and go to state 47
    ptr                            shift and go to state 40

state 28

    (21) ptr_assgn -> ptr EQUALS . ptr_expr
    (23) ptr_expr -> . ptr_expr PLUS ptr_factor
    (24) ptr_expr -> . ptr_expr MINUS ptr_factor
    (25) ptr_expr -> . ptr_factor
    (26) ptr_factor -> . ptr_factor STAR ptr_term
    (27) ptr_factor -> . ptr_factor SLASH ptr_term
    (28) ptr_factor -> . ptr_term
    (29) ptr_term -> . MINUS ptr_term
    (30) ptr_term -> . ptr_expr_base
    (31) ptr_expr_base -> . ID
    (32) ptr_expr_base -> . NUM
    (33) ptr_expr_base -> . ptr
    (34) ptr_expr_base -> . addr
    (35) ptr_expr_base -> . LPAREN ptr_expr RPAREN
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr
    (39) addr -> . AND ID
    (40) addr -> . AND ptr
    (41) addr -> . AND addr

    MINUS           shift and go to state 41
    ID              shift and go to state 48
    NUM             shift and go to state 43
    LPAREN          shift and go to state 44
    STAR            shift and go to state 8
    AND             shift and go to state 23

    addr                           shift and go to state 49
    ptr_term                       shift and go to state 46
    ptr_expr_base                  shift and go to state 42
    ptr_factor                     shift and go to state 45
    ptr_expr                       shift and go to state 50
    ptr                            shift and go to state 40

state 29

    (6) stmt -> assgn SEMICOLON .

    INT             reduce using rule 6 (stmt -> assgn SEMICOLON .)
    IF              reduce using rule 6 (stmt -> assgn SEMICOLON .)
    WHILE           reduce using rule 6 (stmt -> assgn SEMICOLON .)
    ID              reduce using rule 6 (stmt -> assgn SEMICOLON .)
    STAR            reduce using rule 6 (stmt -> assgn SEMICOLON .)
    RCURL           reduce using rule 6 (stmt -> assgn SEMICOLON .)
    ELSE            reduce using rule 6 (stmt -> assgn SEMICOLON .)


state 30

    (1) prog -> VOID MAIN LPAREN RPAREN LCURL body RCURL .

    $end            reduce using rule 1 (prog -> VOID MAIN LPAREN RPAREN LCURL body RCURL .)


state 31

    (3) body -> stmt body .

    RCURL           reduce using rule 3 (body -> stmt body .)


state 32

    (22) num_assgn -> ID EQUALS . ptr_expr
    (23) ptr_expr -> . ptr_expr PLUS ptr_factor
    (24) ptr_expr -> . ptr_expr MINUS ptr_factor
    (25) ptr_expr -> . ptr_factor
    (26) ptr_factor -> . ptr_factor STAR ptr_term
    (27) ptr_factor -> . ptr_factor SLASH ptr_term
    (28) ptr_factor -> . ptr_term
    (29) ptr_term -> . MINUS ptr_term
    (30) ptr_term -> . ptr_expr_base
    (31) ptr_expr_base -> . ID
    (32) ptr_expr_base -> . NUM
    (33) ptr_expr_base -> . ptr
    (34) ptr_expr_base -> . addr
    (35) ptr_expr_base -> . LPAREN ptr_expr RPAREN
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr
    (39) addr -> . AND ID
    (40) addr -> . AND ptr
    (41) addr -> . AND addr

    MINUS           shift and go to state 41
    ID              shift and go to state 48
    NUM             shift and go to state 43
    LPAREN          shift and go to state 44
    STAR            shift and go to state 8
    AND             shift and go to state 23

    addr                           shift and go to state 49
    ptr_term                       shift and go to state 46
    ptr_expr_base                  shift and go to state 42
    ptr_factor                     shift and go to state 45
    ptr_expr                       shift and go to state 51
    ptr                            shift and go to state 40

state 33

    (9) if_stmt -> IF LPAREN . ptr_expr RPAREN compound_stmt
    (10) if_stmt -> IF LPAREN . ptr_expr RPAREN compound_stmt ELSE compound_stmt
    (23) ptr_expr -> . ptr_expr PLUS ptr_factor
    (24) ptr_expr -> . ptr_expr MINUS ptr_factor
    (25) ptr_expr -> . ptr_factor
    (26) ptr_factor -> . ptr_factor STAR ptr_term
    (27) ptr_factor -> . ptr_factor SLASH ptr_term
    (28) ptr_factor -> . ptr_term
    (29) ptr_term -> . MINUS ptr_term
    (30) ptr_term -> . ptr_expr_base
    (31) ptr_expr_base -> . ID
    (32) ptr_expr_base -> . NUM
    (33) ptr_expr_base -> . ptr
    (34) ptr_expr_base -> . addr
    (35) ptr_expr_base -> . LPAREN ptr_expr RPAREN
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr
    (39) addr -> . AND ID
    (40) addr -> . AND ptr
    (41) addr -> . AND addr

    MINUS           shift and go to state 41
    ID              shift and go to state 48
    NUM             shift and go to state 43
    LPAREN          shift and go to state 44
    STAR            shift and go to state 8
    AND             shift and go to state 23

    addr                           shift and go to state 49
    ptr_expr_base                  shift and go to state 42
    ptr_factor                     shift and go to state 45
    ptr_term                       shift and go to state 46
    ptr_expr                       shift and go to state 52
    ptr                            shift and go to state 40

state 34

    (16) decl -> INT decl_list .
    (17) decl_list -> decl_list . COMMA ID
    (18) decl_list -> decl_list . COMMA ptr

    SEMICOLON       reduce using rule 16 (decl -> INT decl_list .)
    COMMA           shift and go to state 53


state 35

    (20) decl_list -> ptr .

    COMMA           reduce using rule 20 (decl_list -> ptr .)
    SEMICOLON       reduce using rule 20 (decl_list -> ptr .)


state 36

    (19) decl_list -> ID .

    COMMA           reduce using rule 19 (decl_list -> ID .)
    SEMICOLON       reduce using rule 19 (decl_list -> ID .)


state 37

    (41) addr -> AND addr .

    STAR            reduce using rule 41 (addr -> AND addr .)
    SLASH           reduce using rule 41 (addr -> AND addr .)
    PLUS            reduce using rule 41 (addr -> AND addr .)
    MINUS           reduce using rule 41 (addr -> AND addr .)
    SEMICOLON       reduce using rule 41 (addr -> AND addr .)
    EQUALS          reduce using rule 41 (addr -> AND addr .)
    COMMA           reduce using rule 41 (addr -> AND addr .)
    RPAREN          reduce using rule 41 (addr -> AND addr .)


state 38

    (39) addr -> AND ID .

    STAR            reduce using rule 39 (addr -> AND ID .)
    SLASH           reduce using rule 39 (addr -> AND ID .)
    PLUS            reduce using rule 39 (addr -> AND ID .)
    MINUS           reduce using rule 39 (addr -> AND ID .)
    SEMICOLON       reduce using rule 39 (addr -> AND ID .)
    EQUALS          reduce using rule 39 (addr -> AND ID .)
    COMMA           reduce using rule 39 (addr -> AND ID .)
    RPAREN          reduce using rule 39 (addr -> AND ID .)


state 39

    (40) addr -> AND ptr .

    STAR            reduce using rule 40 (addr -> AND ptr .)
    SLASH           reduce using rule 40 (addr -> AND ptr .)
    PLUS            reduce using rule 40 (addr -> AND ptr .)
    MINUS           reduce using rule 40 (addr -> AND ptr .)
    SEMICOLON       reduce using rule 40 (addr -> AND ptr .)
    EQUALS          reduce using rule 40 (addr -> AND ptr .)
    COMMA           reduce using rule 40 (addr -> AND ptr .)
    RPAREN          reduce using rule 40 (addr -> AND ptr .)


state 40

    (33) ptr_expr_base -> ptr .

    STAR            reduce using rule 33 (ptr_expr_base -> ptr .)
    SLASH           reduce using rule 33 (ptr_expr_base -> ptr .)
    RPAREN          reduce using rule 33 (ptr_expr_base -> ptr .)
    PLUS            reduce using rule 33 (ptr_expr_base -> ptr .)
    MINUS           reduce using rule 33 (ptr_expr_base -> ptr .)
    SEMICOLON       reduce using rule 33 (ptr_expr_base -> ptr .)


state 41

    (29) ptr_term -> MINUS . ptr_term
    (29) ptr_term -> . MINUS ptr_term
    (30) ptr_term -> . ptr_expr_base
    (31) ptr_expr_base -> . ID
    (32) ptr_expr_base -> . NUM
    (33) ptr_expr_base -> . ptr
    (34) ptr_expr_base -> . addr
    (35) ptr_expr_base -> . LPAREN ptr_expr RPAREN
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr
    (39) addr -> . AND ID
    (40) addr -> . AND ptr
    (41) addr -> . AND addr

    MINUS           shift and go to state 41
    ID              shift and go to state 48
    NUM             shift and go to state 43
    LPAREN          shift and go to state 44
    STAR            shift and go to state 8
    AND             shift and go to state 23

    addr                           shift and go to state 49
    ptr_expr_base                  shift and go to state 42
    ptr                            shift and go to state 40
    ptr_term                       shift and go to state 54

state 42

    (30) ptr_term -> ptr_expr_base .

    STAR            reduce using rule 30 (ptr_term -> ptr_expr_base .)
    SLASH           reduce using rule 30 (ptr_term -> ptr_expr_base .)
    RPAREN          reduce using rule 30 (ptr_term -> ptr_expr_base .)
    PLUS            reduce using rule 30 (ptr_term -> ptr_expr_base .)
    MINUS           reduce using rule 30 (ptr_term -> ptr_expr_base .)
    SEMICOLON       reduce using rule 30 (ptr_term -> ptr_expr_base .)


state 43

    (32) ptr_expr_base -> NUM .

    STAR            reduce using rule 32 (ptr_expr_base -> NUM .)
    SLASH           reduce using rule 32 (ptr_expr_base -> NUM .)
    RPAREN          reduce using rule 32 (ptr_expr_base -> NUM .)
    PLUS            reduce using rule 32 (ptr_expr_base -> NUM .)
    MINUS           reduce using rule 32 (ptr_expr_base -> NUM .)
    SEMICOLON       reduce using rule 32 (ptr_expr_base -> NUM .)


state 44

    (35) ptr_expr_base -> LPAREN . ptr_expr RPAREN
    (23) ptr_expr -> . ptr_expr PLUS ptr_factor
    (24) ptr_expr -> . ptr_expr MINUS ptr_factor
    (25) ptr_expr -> . ptr_factor
    (26) ptr_factor -> . ptr_factor STAR ptr_term
    (27) ptr_factor -> . ptr_factor SLASH ptr_term
    (28) ptr_factor -> . ptr_term
    (29) ptr_term -> . MINUS ptr_term
    (30) ptr_term -> . ptr_expr_base
    (31) ptr_expr_base -> . ID
    (32) ptr_expr_base -> . NUM
    (33) ptr_expr_base -> . ptr
    (34) ptr_expr_base -> . addr
    (35) ptr_expr_base -> . LPAREN ptr_expr RPAREN
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr
    (39) addr -> . AND ID
    (40) addr -> . AND ptr
    (41) addr -> . AND addr

    MINUS           shift and go to state 41
    ID              shift and go to state 48
    NUM             shift and go to state 43
    LPAREN          shift and go to state 44
    STAR            shift and go to state 8
    AND             shift and go to state 23

    addr                           shift and go to state 49
    ptr_term                       shift and go to state 46
    ptr_expr_base                  shift and go to state 42
    ptr_factor                     shift and go to state 45
    ptr_expr                       shift and go to state 55
    ptr                            shift and go to state 40

state 45

    (25) ptr_expr -> ptr_factor .
    (26) ptr_factor -> ptr_factor . STAR ptr_term
    (27) ptr_factor -> ptr_factor . SLASH ptr_term

    PLUS            reduce using rule 25 (ptr_expr -> ptr_factor .)
    MINUS           reduce using rule 25 (ptr_expr -> ptr_factor .)
    SEMICOLON       reduce using rule 25 (ptr_expr -> ptr_factor .)
    RPAREN          reduce using rule 25 (ptr_expr -> ptr_factor .)
    STAR            shift and go to state 56
    SLASH           shift and go to state 57


state 46

    (28) ptr_factor -> ptr_term .

    STAR            reduce using rule 28 (ptr_factor -> ptr_term .)
    SLASH           reduce using rule 28 (ptr_factor -> ptr_term .)
    RPAREN          reduce using rule 28 (ptr_factor -> ptr_term .)
    PLUS            reduce using rule 28 (ptr_factor -> ptr_term .)
    MINUS           reduce using rule 28 (ptr_factor -> ptr_term .)
    SEMICOLON       reduce using rule 28 (ptr_factor -> ptr_term .)


state 47

    (11) while_stmt -> WHILE LPAREN ptr_expr . RPAREN compound_stmt
    (23) ptr_expr -> ptr_expr . PLUS ptr_factor
    (24) ptr_expr -> ptr_expr . MINUS ptr_factor

    RPAREN          shift and go to state 58
    PLUS            shift and go to state 60
    MINUS           shift and go to state 59


state 48

    (31) ptr_expr_base -> ID .

    STAR            reduce using rule 31 (ptr_expr_base -> ID .)
    SLASH           reduce using rule 31 (ptr_expr_base -> ID .)
    RPAREN          reduce using rule 31 (ptr_expr_base -> ID .)
    PLUS            reduce using rule 31 (ptr_expr_base -> ID .)
    MINUS           reduce using rule 31 (ptr_expr_base -> ID .)
    SEMICOLON       reduce using rule 31 (ptr_expr_base -> ID .)


state 49

    (34) ptr_expr_base -> addr .

    STAR            reduce using rule 34 (ptr_expr_base -> addr .)
    SLASH           reduce using rule 34 (ptr_expr_base -> addr .)
    RPAREN          reduce using rule 34 (ptr_expr_base -> addr .)
    PLUS            reduce using rule 34 (ptr_expr_base -> addr .)
    MINUS           reduce using rule 34 (ptr_expr_base -> addr .)
    SEMICOLON       reduce using rule 34 (ptr_expr_base -> addr .)


state 50

    (21) ptr_assgn -> ptr EQUALS ptr_expr .
    (23) ptr_expr -> ptr_expr . PLUS ptr_factor
    (24) ptr_expr -> ptr_expr . MINUS ptr_factor

    SEMICOLON       reduce using rule 21 (ptr_assgn -> ptr EQUALS ptr_expr .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 59


state 51

    (22) num_assgn -> ID EQUALS ptr_expr .
    (23) ptr_expr -> ptr_expr . PLUS ptr_factor
    (24) ptr_expr -> ptr_expr . MINUS ptr_factor

    SEMICOLON       reduce using rule 22 (num_assgn -> ID EQUALS ptr_expr .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 59


state 52

    (9) if_stmt -> IF LPAREN ptr_expr . RPAREN compound_stmt
    (10) if_stmt -> IF LPAREN ptr_expr . RPAREN compound_stmt ELSE compound_stmt
    (23) ptr_expr -> ptr_expr . PLUS ptr_factor
    (24) ptr_expr -> ptr_expr . MINUS ptr_factor

    RPAREN          shift and go to state 61
    PLUS            shift and go to state 60
    MINUS           shift and go to state 59


state 53

    (17) decl_list -> decl_list COMMA . ID
    (18) decl_list -> decl_list COMMA . ptr
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr

    ID              shift and go to state 63
    STAR            shift and go to state 8

    ptr                            shift and go to state 62

state 54

    (29) ptr_term -> MINUS ptr_term .

    STAR            reduce using rule 29 (ptr_term -> MINUS ptr_term .)
    SLASH           reduce using rule 29 (ptr_term -> MINUS ptr_term .)
    RPAREN          reduce using rule 29 (ptr_term -> MINUS ptr_term .)
    PLUS            reduce using rule 29 (ptr_term -> MINUS ptr_term .)
    MINUS           reduce using rule 29 (ptr_term -> MINUS ptr_term .)
    SEMICOLON       reduce using rule 29 (ptr_term -> MINUS ptr_term .)


state 55

    (35) ptr_expr_base -> LPAREN ptr_expr . RPAREN
    (23) ptr_expr -> ptr_expr . PLUS ptr_factor
    (24) ptr_expr -> ptr_expr . MINUS ptr_factor

    RPAREN          shift and go to state 64
    PLUS            shift and go to state 60
    MINUS           shift and go to state 59


state 56

    (26) ptr_factor -> ptr_factor STAR . ptr_term
    (29) ptr_term -> . MINUS ptr_term
    (30) ptr_term -> . ptr_expr_base
    (31) ptr_expr_base -> . ID
    (32) ptr_expr_base -> . NUM
    (33) ptr_expr_base -> . ptr
    (34) ptr_expr_base -> . addr
    (35) ptr_expr_base -> . LPAREN ptr_expr RPAREN
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr
    (39) addr -> . AND ID
    (40) addr -> . AND ptr
    (41) addr -> . AND addr

    MINUS           shift and go to state 41
    ID              shift and go to state 48
    NUM             shift and go to state 43
    LPAREN          shift and go to state 44
    STAR            shift and go to state 8
    AND             shift and go to state 23

    addr                           shift and go to state 49
    ptr_term                       shift and go to state 65
    ptr_expr_base                  shift and go to state 42
    ptr                            shift and go to state 40

state 57

    (27) ptr_factor -> ptr_factor SLASH . ptr_term
    (29) ptr_term -> . MINUS ptr_term
    (30) ptr_term -> . ptr_expr_base
    (31) ptr_expr_base -> . ID
    (32) ptr_expr_base -> . NUM
    (33) ptr_expr_base -> . ptr
    (34) ptr_expr_base -> . addr
    (35) ptr_expr_base -> . LPAREN ptr_expr RPAREN
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr
    (39) addr -> . AND ID
    (40) addr -> . AND ptr
    (41) addr -> . AND addr

    MINUS           shift and go to state 41
    ID              shift and go to state 48
    NUM             shift and go to state 43
    LPAREN          shift and go to state 44
    STAR            shift and go to state 8
    AND             shift and go to state 23

    addr                           shift and go to state 49
    ptr_term                       shift and go to state 66
    ptr_expr_base                  shift and go to state 42
    ptr                            shift and go to state 40

state 58

    (11) while_stmt -> WHILE LPAREN ptr_expr RPAREN . compound_stmt
    (12) compound_stmt -> . stmt
    (13) compound_stmt -> . LCURL body RCURL
    (5) stmt -> . decl SEMICOLON
    (6) stmt -> . assgn SEMICOLON
    (7) stmt -> . if_stmt
    (8) stmt -> . while_stmt
    (16) decl -> . INT decl_list
    (14) assgn -> . ptr_assgn
    (15) assgn -> . num_assgn
    (9) if_stmt -> . IF LPAREN ptr_expr RPAREN compound_stmt
    (10) if_stmt -> . IF LPAREN ptr_expr RPAREN compound_stmt ELSE compound_stmt
    (11) while_stmt -> . WHILE LPAREN ptr_expr RPAREN compound_stmt
    (21) ptr_assgn -> . ptr EQUALS ptr_expr
    (22) num_assgn -> . ID EQUALS ptr_expr
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr

    LCURL           shift and go to state 67
    INT             shift and go to state 19
    IF              shift and go to state 17
    WHILE           shift and go to state 9
    ID              shift and go to state 16
    STAR            shift and go to state 8

    decl                           shift and go to state 7
    if_stmt                        shift and go to state 18
    assgn                          shift and go to state 11
    num_assgn                      shift and go to state 14
    ptr_assgn                      shift and go to state 20
    stmt                           shift and go to state 69
    ptr                            shift and go to state 10
    while_stmt                     shift and go to state 21
    compound_stmt                  shift and go to state 68

state 59

    (24) ptr_expr -> ptr_expr MINUS . ptr_factor
    (26) ptr_factor -> . ptr_factor STAR ptr_term
    (27) ptr_factor -> . ptr_factor SLASH ptr_term
    (28) ptr_factor -> . ptr_term
    (29) ptr_term -> . MINUS ptr_term
    (30) ptr_term -> . ptr_expr_base
    (31) ptr_expr_base -> . ID
    (32) ptr_expr_base -> . NUM
    (33) ptr_expr_base -> . ptr
    (34) ptr_expr_base -> . addr
    (35) ptr_expr_base -> . LPAREN ptr_expr RPAREN
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr
    (39) addr -> . AND ID
    (40) addr -> . AND ptr
    (41) addr -> . AND addr

    MINUS           shift and go to state 41
    ID              shift and go to state 48
    NUM             shift and go to state 43
    LPAREN          shift and go to state 44
    STAR            shift and go to state 8
    AND             shift and go to state 23

    addr                           shift and go to state 49
    ptr_term                       shift and go to state 46
    ptr_expr_base                  shift and go to state 42
    ptr_factor                     shift and go to state 70
    ptr                            shift and go to state 40

state 60

    (23) ptr_expr -> ptr_expr PLUS . ptr_factor
    (26) ptr_factor -> . ptr_factor STAR ptr_term
    (27) ptr_factor -> . ptr_factor SLASH ptr_term
    (28) ptr_factor -> . ptr_term
    (29) ptr_term -> . MINUS ptr_term
    (30) ptr_term -> . ptr_expr_base
    (31) ptr_expr_base -> . ID
    (32) ptr_expr_base -> . NUM
    (33) ptr_expr_base -> . ptr
    (34) ptr_expr_base -> . addr
    (35) ptr_expr_base -> . LPAREN ptr_expr RPAREN
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr
    (39) addr -> . AND ID
    (40) addr -> . AND ptr
    (41) addr -> . AND addr

    MINUS           shift and go to state 41
    ID              shift and go to state 48
    NUM             shift and go to state 43
    LPAREN          shift and go to state 44
    STAR            shift and go to state 8
    AND             shift and go to state 23

    addr                           shift and go to state 49
    ptr_term                       shift and go to state 46
    ptr_expr_base                  shift and go to state 42
    ptr_factor                     shift and go to state 71
    ptr                            shift and go to state 40

state 61

    (9) if_stmt -> IF LPAREN ptr_expr RPAREN . compound_stmt
    (10) if_stmt -> IF LPAREN ptr_expr RPAREN . compound_stmt ELSE compound_stmt
    (12) compound_stmt -> . stmt
    (13) compound_stmt -> . LCURL body RCURL
    (5) stmt -> . decl SEMICOLON
    (6) stmt -> . assgn SEMICOLON
    (7) stmt -> . if_stmt
    (8) stmt -> . while_stmt
    (16) decl -> . INT decl_list
    (14) assgn -> . ptr_assgn
    (15) assgn -> . num_assgn
    (9) if_stmt -> . IF LPAREN ptr_expr RPAREN compound_stmt
    (10) if_stmt -> . IF LPAREN ptr_expr RPAREN compound_stmt ELSE compound_stmt
    (11) while_stmt -> . WHILE LPAREN ptr_expr RPAREN compound_stmt
    (21) ptr_assgn -> . ptr EQUALS ptr_expr
    (22) num_assgn -> . ID EQUALS ptr_expr
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr

    LCURL           shift and go to state 67
    INT             shift and go to state 19
    IF              shift and go to state 17
    WHILE           shift and go to state 9
    ID              shift and go to state 16
    STAR            shift and go to state 8

    decl                           shift and go to state 7
    if_stmt                        shift and go to state 18
    assgn                          shift and go to state 11
    num_assgn                      shift and go to state 14
    ptr_assgn                      shift and go to state 20
    stmt                           shift and go to state 69
    ptr                            shift and go to state 10
    while_stmt                     shift and go to state 21
    compound_stmt                  shift and go to state 72

state 62

    (18) decl_list -> decl_list COMMA ptr .

    COMMA           reduce using rule 18 (decl_list -> decl_list COMMA ptr .)
    SEMICOLON       reduce using rule 18 (decl_list -> decl_list COMMA ptr .)


state 63

    (17) decl_list -> decl_list COMMA ID .

    COMMA           reduce using rule 17 (decl_list -> decl_list COMMA ID .)
    SEMICOLON       reduce using rule 17 (decl_list -> decl_list COMMA ID .)


state 64

    (35) ptr_expr_base -> LPAREN ptr_expr RPAREN .

    STAR            reduce using rule 35 (ptr_expr_base -> LPAREN ptr_expr RPAREN .)
    SLASH           reduce using rule 35 (ptr_expr_base -> LPAREN ptr_expr RPAREN .)
    RPAREN          reduce using rule 35 (ptr_expr_base -> LPAREN ptr_expr RPAREN .)
    PLUS            reduce using rule 35 (ptr_expr_base -> LPAREN ptr_expr RPAREN .)
    MINUS           reduce using rule 35 (ptr_expr_base -> LPAREN ptr_expr RPAREN .)
    SEMICOLON       reduce using rule 35 (ptr_expr_base -> LPAREN ptr_expr RPAREN .)


state 65

    (26) ptr_factor -> ptr_factor STAR ptr_term .

    STAR            reduce using rule 26 (ptr_factor -> ptr_factor STAR ptr_term .)
    SLASH           reduce using rule 26 (ptr_factor -> ptr_factor STAR ptr_term .)
    RPAREN          reduce using rule 26 (ptr_factor -> ptr_factor STAR ptr_term .)
    PLUS            reduce using rule 26 (ptr_factor -> ptr_factor STAR ptr_term .)
    MINUS           reduce using rule 26 (ptr_factor -> ptr_factor STAR ptr_term .)
    SEMICOLON       reduce using rule 26 (ptr_factor -> ptr_factor STAR ptr_term .)


state 66

    (27) ptr_factor -> ptr_factor SLASH ptr_term .

    STAR            reduce using rule 27 (ptr_factor -> ptr_factor SLASH ptr_term .)
    SLASH           reduce using rule 27 (ptr_factor -> ptr_factor SLASH ptr_term .)
    RPAREN          reduce using rule 27 (ptr_factor -> ptr_factor SLASH ptr_term .)
    PLUS            reduce using rule 27 (ptr_factor -> ptr_factor SLASH ptr_term .)
    MINUS           reduce using rule 27 (ptr_factor -> ptr_factor SLASH ptr_term .)
    SEMICOLON       reduce using rule 27 (ptr_factor -> ptr_factor SLASH ptr_term .)


state 67

    (13) compound_stmt -> LCURL . body RCURL
    (3) body -> . stmt body
    (4) body -> . stmt
    (5) stmt -> . decl SEMICOLON
    (6) stmt -> . assgn SEMICOLON
    (7) stmt -> . if_stmt
    (8) stmt -> . while_stmt
    (16) decl -> . INT decl_list
    (14) assgn -> . ptr_assgn
    (15) assgn -> . num_assgn
    (9) if_stmt -> . IF LPAREN ptr_expr RPAREN compound_stmt
    (10) if_stmt -> . IF LPAREN ptr_expr RPAREN compound_stmt ELSE compound_stmt
    (11) while_stmt -> . WHILE LPAREN ptr_expr RPAREN compound_stmt
    (21) ptr_assgn -> . ptr EQUALS ptr_expr
    (22) num_assgn -> . ID EQUALS ptr_expr
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr

    INT             shift and go to state 19
    IF              shift and go to state 17
    WHILE           shift and go to state 9
    ID              shift and go to state 16
    STAR            shift and go to state 8

    body                           shift and go to state 73
    decl                           shift and go to state 7
    if_stmt                        shift and go to state 18
    assgn                          shift and go to state 11
    num_assgn                      shift and go to state 14
    ptr_assgn                      shift and go to state 20
    stmt                           shift and go to state 15
    ptr                            shift and go to state 10
    while_stmt                     shift and go to state 21

state 68

    (11) while_stmt -> WHILE LPAREN ptr_expr RPAREN compound_stmt .

    INT             reduce using rule 11 (while_stmt -> WHILE LPAREN ptr_expr RPAREN compound_stmt .)
    IF              reduce using rule 11 (while_stmt -> WHILE LPAREN ptr_expr RPAREN compound_stmt .)
    WHILE           reduce using rule 11 (while_stmt -> WHILE LPAREN ptr_expr RPAREN compound_stmt .)
    ID              reduce using rule 11 (while_stmt -> WHILE LPAREN ptr_expr RPAREN compound_stmt .)
    STAR            reduce using rule 11 (while_stmt -> WHILE LPAREN ptr_expr RPAREN compound_stmt .)
    RCURL           reduce using rule 11 (while_stmt -> WHILE LPAREN ptr_expr RPAREN compound_stmt .)
    ELSE            reduce using rule 11 (while_stmt -> WHILE LPAREN ptr_expr RPAREN compound_stmt .)


state 69

    (12) compound_stmt -> stmt .

    INT             reduce using rule 12 (compound_stmt -> stmt .)
    IF              reduce using rule 12 (compound_stmt -> stmt .)
    WHILE           reduce using rule 12 (compound_stmt -> stmt .)
    ID              reduce using rule 12 (compound_stmt -> stmt .)
    STAR            reduce using rule 12 (compound_stmt -> stmt .)
    RCURL           reduce using rule 12 (compound_stmt -> stmt .)
    ELSE            reduce using rule 12 (compound_stmt -> stmt .)


state 70

    (24) ptr_expr -> ptr_expr MINUS ptr_factor .
    (26) ptr_factor -> ptr_factor . STAR ptr_term
    (27) ptr_factor -> ptr_factor . SLASH ptr_term

    PLUS            reduce using rule 24 (ptr_expr -> ptr_expr MINUS ptr_factor .)
    MINUS           reduce using rule 24 (ptr_expr -> ptr_expr MINUS ptr_factor .)
    SEMICOLON       reduce using rule 24 (ptr_expr -> ptr_expr MINUS ptr_factor .)
    RPAREN          reduce using rule 24 (ptr_expr -> ptr_expr MINUS ptr_factor .)
    STAR            shift and go to state 56
    SLASH           shift and go to state 57


state 71

    (23) ptr_expr -> ptr_expr PLUS ptr_factor .
    (26) ptr_factor -> ptr_factor . STAR ptr_term
    (27) ptr_factor -> ptr_factor . SLASH ptr_term

    PLUS            reduce using rule 23 (ptr_expr -> ptr_expr PLUS ptr_factor .)
    MINUS           reduce using rule 23 (ptr_expr -> ptr_expr PLUS ptr_factor .)
    SEMICOLON       reduce using rule 23 (ptr_expr -> ptr_expr PLUS ptr_factor .)
    RPAREN          reduce using rule 23 (ptr_expr -> ptr_expr PLUS ptr_factor .)
    STAR            shift and go to state 56
    SLASH           shift and go to state 57


state 72

    (9) if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt .
    (10) if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt . ELSE compound_stmt

  ! shift/reduce conflict for ELSE resolved as shift
    INT             reduce using rule 9 (if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt .)
    IF              reduce using rule 9 (if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt .)
    WHILE           reduce using rule 9 (if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt .)
    ID              reduce using rule 9 (if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt .)
    STAR            reduce using rule 9 (if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt .)
    RCURL           reduce using rule 9 (if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt .)
    ELSE            shift and go to state 74

  ! ELSE            [ reduce using rule 9 (if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt .) ]


state 73

    (13) compound_stmt -> LCURL body . RCURL

    RCURL           shift and go to state 75


state 74

    (10) if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt ELSE . compound_stmt
    (12) compound_stmt -> . stmt
    (13) compound_stmt -> . LCURL body RCURL
    (5) stmt -> . decl SEMICOLON
    (6) stmt -> . assgn SEMICOLON
    (7) stmt -> . if_stmt
    (8) stmt -> . while_stmt
    (16) decl -> . INT decl_list
    (14) assgn -> . ptr_assgn
    (15) assgn -> . num_assgn
    (9) if_stmt -> . IF LPAREN ptr_expr RPAREN compound_stmt
    (10) if_stmt -> . IF LPAREN ptr_expr RPAREN compound_stmt ELSE compound_stmt
    (11) while_stmt -> . WHILE LPAREN ptr_expr RPAREN compound_stmt
    (21) ptr_assgn -> . ptr EQUALS ptr_expr
    (22) num_assgn -> . ID EQUALS ptr_expr
    (36) ptr -> . STAR ptr
    (37) ptr -> . STAR ID
    (38) ptr -> . STAR addr

    LCURL           shift and go to state 67
    INT             shift and go to state 19
    IF              shift and go to state 17
    WHILE           shift and go to state 9
    ID              shift and go to state 16
    STAR            shift and go to state 8

    decl                           shift and go to state 7
    if_stmt                        shift and go to state 18
    assgn                          shift and go to state 11
    num_assgn                      shift and go to state 14
    ptr_assgn                      shift and go to state 20
    stmt                           shift and go to state 69
    ptr                            shift and go to state 10
    while_stmt                     shift and go to state 21
    compound_stmt                  shift and go to state 76

state 75

    (13) compound_stmt -> LCURL body RCURL .

    INT             reduce using rule 13 (compound_stmt -> LCURL body RCURL .)
    IF              reduce using rule 13 (compound_stmt -> LCURL body RCURL .)
    WHILE           reduce using rule 13 (compound_stmt -> LCURL body RCURL .)
    ID              reduce using rule 13 (compound_stmt -> LCURL body RCURL .)
    STAR            reduce using rule 13 (compound_stmt -> LCURL body RCURL .)
    RCURL           reduce using rule 13 (compound_stmt -> LCURL body RCURL .)
    ELSE            reduce using rule 13 (compound_stmt -> LCURL body RCURL .)


state 76

    (10) if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt ELSE compound_stmt .

    INT             reduce using rule 10 (if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt ELSE compound_stmt .)
    IF              reduce using rule 10 (if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt ELSE compound_stmt .)
    WHILE           reduce using rule 10 (if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt ELSE compound_stmt .)
    ID              reduce using rule 10 (if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt ELSE compound_stmt .)
    STAR            reduce using rule 10 (if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt ELSE compound_stmt .)
    RCURL           reduce using rule 10 (if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt ELSE compound_stmt .)
    ELSE            reduce using rule 10 (if_stmt -> IF LPAREN ptr_expr RPAREN compound_stmt ELSE compound_stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 72 resolved as shift
