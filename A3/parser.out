Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> main_proc
Rule 3     main_proc -> VOID MAIN LPAREN RPAREN { variable_declaration_list statement_list }
Rule 4     statement_list -> statement_list statement
Rule 5     statement_list -> empty
Rule 6     statement -> ctrlflow
Rule 7     statement -> assignment_statement
Rule 8     ctrlflow -> IF LPAREN condition RPAREN statement_block
Rule 9     ctrlflow -> WHILE LPAREN condition RPAREN statement_block
Rule 10    ctrlflow -> IF LPAREN condition RPAREN statement_block ELSE statement_block
Rule 11    statement_block -> { statement_list }
Rule 12    statement_block -> ;
Rule 13    statement_block -> statement
Rule 14    condition -> LPAREN condition RPAREN
Rule 15    condition -> expression LESSTHEN expression
Rule 16    condition -> expression GREATTHEN expression
Rule 17    condition -> expression LESSTHENE expression
Rule 18    condition -> expression GREATTHENE expression
Rule 19    condition -> expression ISEQL expression
Rule 20    condition -> expression ISNEQL expression
Rule 21    condition -> condition LAND condition
Rule 22    condition -> condition LOR condition
Rule 23    condition -> LNOT condition
Rule 24    variable_declaration_list -> empty
Rule 25    variable_declaration_list -> variable_declaration variable_declaration_list
Rule 26    variable_declaration -> INT var_list ;
Rule 27    var_list -> var_list , variable_dec
Rule 28    var_list -> var_list , ptr_var
Rule 29    var_list -> variable_dec
Rule 30    var_list -> ptr_var
Rule 31    ptr_var -> TIMES ptr_var
Rule 32    ptr_var -> TIMES variable_dec
Rule 33    assignment_statement -> lvalue EQUAL expression ;
Rule 34    expression -> expression PLUS expression
Rule 35    expression -> expression TIMES expression
Rule 36    expression -> expression MINUS expression
Rule 37    expression -> expression DIVIDE expression
Rule 38    expression -> ptr_expr
Rule 39    expression -> addr_expr
Rule 40    expression -> variable
Rule 41    expression -> LPAREN expression RPAREN
Rule 42    expression -> MINUS expression
Rule 43    expression -> NUMBER
Rule 44    ptr_expr -> TIMES variable
Rule 45    ptr_expr -> TIMES ptr_expr
Rule 46    ptr_expr -> TIMES addr_expr
Rule 47    addr_expr -> ADDR variable
Rule 48    addr_expr -> ADDR ptr_expr
Rule 49    lvalue -> variable
Rule 50    lvalue -> ptr_expr
Rule 51    variable -> NAME
Rule 52    variable_dec -> NAME

Terminals, with rules where they appear

,                    : 27 28
;                    : 12 26 33
ADDR                 : 47 48
DIVIDE               : 37
ELSE                 : 10
EQUAL                : 33
GREATTHEN            : 16
GREATTHENE           : 18
IF                   : 8 10
INT                  : 26
ISEQL                : 19
ISNEQL               : 20
LAND                 : 21
LESSTHEN             : 15
LESSTHENE            : 17
LNOT                 : 23
LOR                  : 22
LPAREN               : 3 8 9 10 14 41
MAIN                 : 3
MINUS                : 36 42
NAME                 : 51 52
NUMBER               : 43
PLUS                 : 34
RPAREN               : 3 8 9 10 14 41
TIMES                : 31 32 35 44 45 46
VOID                 : 3
WHILE                : 9
error                : 
{                    : 3 11
}                    : 3 11

Nonterminals, with rules where they appear

addr_expr            : 39 46
assignment_statement : 7
condition            : 8 9 10 14 21 21 22 22 23
ctrlflow             : 6
empty                : 5 24
expression           : 15 15 16 16 17 17 18 18 19 19 20 20 33 34 34 35 35 36 36 37 37 41 42
lvalue               : 33
main_proc            : 2
program              : 0
ptr_expr             : 38 45 48 50
ptr_var              : 28 30 31
statement            : 4 13
statement_block      : 8 9 10 10
statement_list       : 3 4 11
var_list             : 26 27 28
variable             : 40 44 47 49
variable_dec         : 27 29 32
variable_declaration : 25
variable_declaration_list : 3 25

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . main_proc
    (3) main_proc -> . VOID MAIN LPAREN RPAREN { variable_declaration_list statement_list }

    VOID            shift and go to state 3

    program                        shift and go to state 1
    main_proc                      shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (2) program -> main_proc .

    $end            reduce using rule 2 (program -> main_proc .)


state 3

    (3) main_proc -> VOID . MAIN LPAREN RPAREN { variable_declaration_list statement_list }

    MAIN            shift and go to state 4


state 4

    (3) main_proc -> VOID MAIN . LPAREN RPAREN { variable_declaration_list statement_list }

    LPAREN          shift and go to state 5


state 5

    (3) main_proc -> VOID MAIN LPAREN . RPAREN { variable_declaration_list statement_list }

    RPAREN          shift and go to state 6


state 6

    (3) main_proc -> VOID MAIN LPAREN RPAREN . { variable_declaration_list statement_list }

    {               shift and go to state 7


state 7

    (3) main_proc -> VOID MAIN LPAREN RPAREN { . variable_declaration_list statement_list }
    (24) variable_declaration_list -> . empty
    (25) variable_declaration_list -> . variable_declaration variable_declaration_list
    (1) empty -> .
    (26) variable_declaration -> . INT var_list ;

    }               reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    NAME            reduce using rule 1 (empty -> .)
    TIMES           reduce using rule 1 (empty -> .)
    INT             shift and go to state 10

    variable_declaration           shift and go to state 9
    empty                          shift and go to state 11
    variable_declaration_list      shift and go to state 8

state 8

    (3) main_proc -> VOID MAIN LPAREN RPAREN { variable_declaration_list . statement_list }
    (4) statement_list -> . statement_list statement
    (5) statement_list -> . empty
    (1) empty -> .

    }               reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    NAME            reduce using rule 1 (empty -> .)
    TIMES           reduce using rule 1 (empty -> .)

    empty                          shift and go to state 13
    statement_list                 shift and go to state 12

state 9

    (25) variable_declaration_list -> variable_declaration . variable_declaration_list
    (24) variable_declaration_list -> . empty
    (25) variable_declaration_list -> . variable_declaration variable_declaration_list
    (1) empty -> .
    (26) variable_declaration -> . INT var_list ;

    }               reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    NAME            reduce using rule 1 (empty -> .)
    TIMES           reduce using rule 1 (empty -> .)
    INT             shift and go to state 10

    variable_declaration           shift and go to state 9
    empty                          shift and go to state 11
    variable_declaration_list      shift and go to state 14

state 10

    (26) variable_declaration -> INT . var_list ;
    (27) var_list -> . var_list , variable_dec
    (28) var_list -> . var_list , ptr_var
    (29) var_list -> . variable_dec
    (30) var_list -> . ptr_var
    (52) variable_dec -> . NAME
    (31) ptr_var -> . TIMES ptr_var
    (32) ptr_var -> . TIMES variable_dec

    NAME            shift and go to state 17
    TIMES           shift and go to state 19

    ptr_var                        shift and go to state 15
    var_list                       shift and go to state 16
    variable_dec                   shift and go to state 18

state 11

    (24) variable_declaration_list -> empty .

    }               reduce using rule 24 (variable_declaration_list -> empty .)
    IF              reduce using rule 24 (variable_declaration_list -> empty .)
    WHILE           reduce using rule 24 (variable_declaration_list -> empty .)
    NAME            reduce using rule 24 (variable_declaration_list -> empty .)
    TIMES           reduce using rule 24 (variable_declaration_list -> empty .)


state 12

    (3) main_proc -> VOID MAIN LPAREN RPAREN { variable_declaration_list statement_list . }
    (4) statement_list -> statement_list . statement
    (6) statement -> . ctrlflow
    (7) statement -> . assignment_statement
    (8) ctrlflow -> . IF LPAREN condition RPAREN statement_block
    (9) ctrlflow -> . WHILE LPAREN condition RPAREN statement_block
    (10) ctrlflow -> . IF LPAREN condition RPAREN statement_block ELSE statement_block
    (33) assignment_statement -> . lvalue EQUAL expression ;
    (49) lvalue -> . variable
    (50) lvalue -> . ptr_expr
    (51) variable -> . NAME
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr

    }               shift and go to state 29
    IF              shift and go to state 22
    WHILE           shift and go to state 27
    NAME            shift and go to state 20
    TIMES           shift and go to state 24

    lvalue                         shift and go to state 23
    statement                      shift and go to state 21
    assignment_statement           shift and go to state 28
    variable                       shift and go to state 26
    ctrlflow                       shift and go to state 25
    ptr_expr                       shift and go to state 30

state 13

    (5) statement_list -> empty .

    }               reduce using rule 5 (statement_list -> empty .)
    IF              reduce using rule 5 (statement_list -> empty .)
    WHILE           reduce using rule 5 (statement_list -> empty .)
    NAME            reduce using rule 5 (statement_list -> empty .)
    TIMES           reduce using rule 5 (statement_list -> empty .)


state 14

    (25) variable_declaration_list -> variable_declaration variable_declaration_list .

    }               reduce using rule 25 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    IF              reduce using rule 25 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    WHILE           reduce using rule 25 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    NAME            reduce using rule 25 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    TIMES           reduce using rule 25 (variable_declaration_list -> variable_declaration variable_declaration_list .)


state 15

    (30) var_list -> ptr_var .

    ;               reduce using rule 30 (var_list -> ptr_var .)
    ,               reduce using rule 30 (var_list -> ptr_var .)


state 16

    (26) variable_declaration -> INT var_list . ;
    (27) var_list -> var_list . , variable_dec
    (28) var_list -> var_list . , ptr_var

    ;               shift and go to state 31
    ,               shift and go to state 32


state 17

    (52) variable_dec -> NAME .

    ;               reduce using rule 52 (variable_dec -> NAME .)
    ,               reduce using rule 52 (variable_dec -> NAME .)


state 18

    (29) var_list -> variable_dec .

    ;               reduce using rule 29 (var_list -> variable_dec .)
    ,               reduce using rule 29 (var_list -> variable_dec .)


state 19

    (31) ptr_var -> TIMES . ptr_var
    (32) ptr_var -> TIMES . variable_dec
    (31) ptr_var -> . TIMES ptr_var
    (32) ptr_var -> . TIMES variable_dec
    (52) variable_dec -> . NAME

    TIMES           shift and go to state 19
    NAME            shift and go to state 17

    ptr_var                        shift and go to state 33
    variable_dec                   shift and go to state 34

state 20

    (51) variable -> NAME .

    PLUS            reduce using rule 51 (variable -> NAME .)
    TIMES           reduce using rule 51 (variable -> NAME .)
    MINUS           reduce using rule 51 (variable -> NAME .)
    DIVIDE          reduce using rule 51 (variable -> NAME .)
    RPAREN          reduce using rule 51 (variable -> NAME .)
    LAND            reduce using rule 51 (variable -> NAME .)
    LOR             reduce using rule 51 (variable -> NAME .)
    LESSTHEN        reduce using rule 51 (variable -> NAME .)
    GREATTHEN       reduce using rule 51 (variable -> NAME .)
    LESSTHENE       reduce using rule 51 (variable -> NAME .)
    GREATTHENE      reduce using rule 51 (variable -> NAME .)
    ISEQL           reduce using rule 51 (variable -> NAME .)
    ISNEQL          reduce using rule 51 (variable -> NAME .)
    EQUAL           reduce using rule 51 (variable -> NAME .)
    ;               reduce using rule 51 (variable -> NAME .)


state 21

    (4) statement_list -> statement_list statement .

    }               reduce using rule 4 (statement_list -> statement_list statement .)
    IF              reduce using rule 4 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 4 (statement_list -> statement_list statement .)
    NAME            reduce using rule 4 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 4 (statement_list -> statement_list statement .)


state 22

    (8) ctrlflow -> IF . LPAREN condition RPAREN statement_block
    (10) ctrlflow -> IF . LPAREN condition RPAREN statement_block ELSE statement_block

    LPAREN          shift and go to state 35


state 23

    (33) assignment_statement -> lvalue . EQUAL expression ;

    EQUAL           shift and go to state 36


state 24

    (44) ptr_expr -> TIMES . variable
    (45) ptr_expr -> TIMES . ptr_expr
    (46) ptr_expr -> TIMES . addr_expr
    (51) variable -> . NAME
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr

    NAME            shift and go to state 20
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37

    variable                       shift and go to state 38
    ptr_expr                       shift and go to state 39
    addr_expr                      shift and go to state 40

state 25

    (6) statement -> ctrlflow .

    ELSE            reduce using rule 6 (statement -> ctrlflow .)
    }               reduce using rule 6 (statement -> ctrlflow .)
    IF              reduce using rule 6 (statement -> ctrlflow .)
    WHILE           reduce using rule 6 (statement -> ctrlflow .)
    NAME            reduce using rule 6 (statement -> ctrlflow .)
    TIMES           reduce using rule 6 (statement -> ctrlflow .)


state 26

    (49) lvalue -> variable .

    EQUAL           reduce using rule 49 (lvalue -> variable .)


state 27

    (9) ctrlflow -> WHILE . LPAREN condition RPAREN statement_block

    LPAREN          shift and go to state 41


state 28

    (7) statement -> assignment_statement .

    ELSE            reduce using rule 7 (statement -> assignment_statement .)
    }               reduce using rule 7 (statement -> assignment_statement .)
    IF              reduce using rule 7 (statement -> assignment_statement .)
    WHILE           reduce using rule 7 (statement -> assignment_statement .)
    NAME            reduce using rule 7 (statement -> assignment_statement .)
    TIMES           reduce using rule 7 (statement -> assignment_statement .)


state 29

    (3) main_proc -> VOID MAIN LPAREN RPAREN { variable_declaration_list statement_list } .

    $end            reduce using rule 3 (main_proc -> VOID MAIN LPAREN RPAREN { variable_declaration_list statement_list } .)


state 30

    (50) lvalue -> ptr_expr .

    EQUAL           reduce using rule 50 (lvalue -> ptr_expr .)


state 31

    (26) variable_declaration -> INT var_list ; .

    INT             reduce using rule 26 (variable_declaration -> INT var_list ; .)
    }               reduce using rule 26 (variable_declaration -> INT var_list ; .)
    IF              reduce using rule 26 (variable_declaration -> INT var_list ; .)
    WHILE           reduce using rule 26 (variable_declaration -> INT var_list ; .)
    NAME            reduce using rule 26 (variable_declaration -> INT var_list ; .)
    TIMES           reduce using rule 26 (variable_declaration -> INT var_list ; .)


state 32

    (27) var_list -> var_list , . variable_dec
    (28) var_list -> var_list , . ptr_var
    (52) variable_dec -> . NAME
    (31) ptr_var -> . TIMES ptr_var
    (32) ptr_var -> . TIMES variable_dec

    NAME            shift and go to state 17
    TIMES           shift and go to state 19

    ptr_var                        shift and go to state 42
    variable_dec                   shift and go to state 43

state 33

    (31) ptr_var -> TIMES ptr_var .

    ;               reduce using rule 31 (ptr_var -> TIMES ptr_var .)
    ,               reduce using rule 31 (ptr_var -> TIMES ptr_var .)


state 34

    (32) ptr_var -> TIMES variable_dec .

    ;               reduce using rule 32 (ptr_var -> TIMES variable_dec .)
    ,               reduce using rule 32 (ptr_var -> TIMES variable_dec .)


state 35

    (8) ctrlflow -> IF LPAREN . condition RPAREN statement_block
    (10) ctrlflow -> IF LPAREN . condition RPAREN statement_block ELSE statement_block
    (14) condition -> . LPAREN condition RPAREN
    (15) condition -> . expression LESSTHEN expression
    (16) condition -> . expression GREATTHEN expression
    (17) condition -> . expression LESSTHENE expression
    (18) condition -> . expression GREATTHENE expression
    (19) condition -> . expression ISEQL expression
    (20) condition -> . expression ISNEQL expression
    (21) condition -> . condition LAND condition
    (22) condition -> . condition LOR condition
    (23) condition -> . LNOT condition
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 44
    LNOT            shift and go to state 50
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    condition                      shift and go to state 46
    addr_expr                      shift and go to state 51
    variable                       shift and go to state 45
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 52

state 36

    (33) assignment_statement -> lvalue EQUAL . expression ;
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 53
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    addr_expr                      shift and go to state 51
    variable                       shift and go to state 45
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 54

state 37

    (47) addr_expr -> ADDR . variable
    (48) addr_expr -> ADDR . ptr_expr
    (51) variable -> . NAME
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr

    NAME            shift and go to state 20
    TIMES           shift and go to state 24

    variable                       shift and go to state 55
    ptr_expr                       shift and go to state 56

state 38

    (44) ptr_expr -> TIMES variable .

    EQUAL           reduce using rule 44 (ptr_expr -> TIMES variable .)
    LESSTHEN        reduce using rule 44 (ptr_expr -> TIMES variable .)
    GREATTHEN       reduce using rule 44 (ptr_expr -> TIMES variable .)
    LESSTHENE       reduce using rule 44 (ptr_expr -> TIMES variable .)
    GREATTHENE      reduce using rule 44 (ptr_expr -> TIMES variable .)
    ISEQL           reduce using rule 44 (ptr_expr -> TIMES variable .)
    ISNEQL          reduce using rule 44 (ptr_expr -> TIMES variable .)
    PLUS            reduce using rule 44 (ptr_expr -> TIMES variable .)
    TIMES           reduce using rule 44 (ptr_expr -> TIMES variable .)
    MINUS           reduce using rule 44 (ptr_expr -> TIMES variable .)
    DIVIDE          reduce using rule 44 (ptr_expr -> TIMES variable .)
    ;               reduce using rule 44 (ptr_expr -> TIMES variable .)
    RPAREN          reduce using rule 44 (ptr_expr -> TIMES variable .)
    LAND            reduce using rule 44 (ptr_expr -> TIMES variable .)
    LOR             reduce using rule 44 (ptr_expr -> TIMES variable .)


state 39

    (45) ptr_expr -> TIMES ptr_expr .

    EQUAL           reduce using rule 45 (ptr_expr -> TIMES ptr_expr .)
    LESSTHEN        reduce using rule 45 (ptr_expr -> TIMES ptr_expr .)
    GREATTHEN       reduce using rule 45 (ptr_expr -> TIMES ptr_expr .)
    LESSTHENE       reduce using rule 45 (ptr_expr -> TIMES ptr_expr .)
    GREATTHENE      reduce using rule 45 (ptr_expr -> TIMES ptr_expr .)
    ISEQL           reduce using rule 45 (ptr_expr -> TIMES ptr_expr .)
    ISNEQL          reduce using rule 45 (ptr_expr -> TIMES ptr_expr .)
    PLUS            reduce using rule 45 (ptr_expr -> TIMES ptr_expr .)
    TIMES           reduce using rule 45 (ptr_expr -> TIMES ptr_expr .)
    MINUS           reduce using rule 45 (ptr_expr -> TIMES ptr_expr .)
    DIVIDE          reduce using rule 45 (ptr_expr -> TIMES ptr_expr .)
    ;               reduce using rule 45 (ptr_expr -> TIMES ptr_expr .)
    RPAREN          reduce using rule 45 (ptr_expr -> TIMES ptr_expr .)
    LAND            reduce using rule 45 (ptr_expr -> TIMES ptr_expr .)
    LOR             reduce using rule 45 (ptr_expr -> TIMES ptr_expr .)


state 40

    (46) ptr_expr -> TIMES addr_expr .

    EQUAL           reduce using rule 46 (ptr_expr -> TIMES addr_expr .)
    LESSTHEN        reduce using rule 46 (ptr_expr -> TIMES addr_expr .)
    GREATTHEN       reduce using rule 46 (ptr_expr -> TIMES addr_expr .)
    LESSTHENE       reduce using rule 46 (ptr_expr -> TIMES addr_expr .)
    GREATTHENE      reduce using rule 46 (ptr_expr -> TIMES addr_expr .)
    ISEQL           reduce using rule 46 (ptr_expr -> TIMES addr_expr .)
    ISNEQL          reduce using rule 46 (ptr_expr -> TIMES addr_expr .)
    PLUS            reduce using rule 46 (ptr_expr -> TIMES addr_expr .)
    TIMES           reduce using rule 46 (ptr_expr -> TIMES addr_expr .)
    MINUS           reduce using rule 46 (ptr_expr -> TIMES addr_expr .)
    DIVIDE          reduce using rule 46 (ptr_expr -> TIMES addr_expr .)
    ;               reduce using rule 46 (ptr_expr -> TIMES addr_expr .)
    RPAREN          reduce using rule 46 (ptr_expr -> TIMES addr_expr .)
    LAND            reduce using rule 46 (ptr_expr -> TIMES addr_expr .)
    LOR             reduce using rule 46 (ptr_expr -> TIMES addr_expr .)


state 41

    (9) ctrlflow -> WHILE LPAREN . condition RPAREN statement_block
    (14) condition -> . LPAREN condition RPAREN
    (15) condition -> . expression LESSTHEN expression
    (16) condition -> . expression GREATTHEN expression
    (17) condition -> . expression LESSTHENE expression
    (18) condition -> . expression GREATTHENE expression
    (19) condition -> . expression ISEQL expression
    (20) condition -> . expression ISNEQL expression
    (21) condition -> . condition LAND condition
    (22) condition -> . condition LOR condition
    (23) condition -> . LNOT condition
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 44
    LNOT            shift and go to state 50
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    condition                      shift and go to state 57
    addr_expr                      shift and go to state 51
    variable                       shift and go to state 45
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 52

state 42

    (28) var_list -> var_list , ptr_var .

    ;               reduce using rule 28 (var_list -> var_list , ptr_var .)
    ,               reduce using rule 28 (var_list -> var_list , ptr_var .)


state 43

    (27) var_list -> var_list , variable_dec .

    ;               reduce using rule 27 (var_list -> var_list , variable_dec .)
    ,               reduce using rule 27 (var_list -> var_list , variable_dec .)


state 44

    (14) condition -> LPAREN . condition RPAREN
    (41) expression -> LPAREN . expression RPAREN
    (14) condition -> . LPAREN condition RPAREN
    (15) condition -> . expression LESSTHEN expression
    (16) condition -> . expression GREATTHEN expression
    (17) condition -> . expression LESSTHENE expression
    (18) condition -> . expression GREATTHENE expression
    (19) condition -> . expression ISEQL expression
    (20) condition -> . expression ISNEQL expression
    (21) condition -> . condition LAND condition
    (22) condition -> . condition LOR condition
    (23) condition -> . LNOT condition
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 44
    LNOT            shift and go to state 50
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    condition                      shift and go to state 58
    addr_expr                      shift and go to state 51
    variable                       shift and go to state 45
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 59

state 45

    (40) expression -> variable .

    LESSTHEN        reduce using rule 40 (expression -> variable .)
    GREATTHEN       reduce using rule 40 (expression -> variable .)
    LESSTHENE       reduce using rule 40 (expression -> variable .)
    GREATTHENE      reduce using rule 40 (expression -> variable .)
    ISEQL           reduce using rule 40 (expression -> variable .)
    ISNEQL          reduce using rule 40 (expression -> variable .)
    PLUS            reduce using rule 40 (expression -> variable .)
    TIMES           reduce using rule 40 (expression -> variable .)
    MINUS           reduce using rule 40 (expression -> variable .)
    DIVIDE          reduce using rule 40 (expression -> variable .)
    RPAREN          reduce using rule 40 (expression -> variable .)
    LAND            reduce using rule 40 (expression -> variable .)
    LOR             reduce using rule 40 (expression -> variable .)
    ;               reduce using rule 40 (expression -> variable .)


state 46

    (8) ctrlflow -> IF LPAREN condition . RPAREN statement_block
    (10) ctrlflow -> IF LPAREN condition . RPAREN statement_block ELSE statement_block
    (21) condition -> condition . LAND condition
    (22) condition -> condition . LOR condition

    RPAREN          shift and go to state 61
    LAND            shift and go to state 62
    LOR             shift and go to state 60


state 47

    (38) expression -> ptr_expr .

    LESSTHEN        reduce using rule 38 (expression -> ptr_expr .)
    GREATTHEN       reduce using rule 38 (expression -> ptr_expr .)
    LESSTHENE       reduce using rule 38 (expression -> ptr_expr .)
    GREATTHENE      reduce using rule 38 (expression -> ptr_expr .)
    ISEQL           reduce using rule 38 (expression -> ptr_expr .)
    ISNEQL          reduce using rule 38 (expression -> ptr_expr .)
    PLUS            reduce using rule 38 (expression -> ptr_expr .)
    TIMES           reduce using rule 38 (expression -> ptr_expr .)
    MINUS           reduce using rule 38 (expression -> ptr_expr .)
    DIVIDE          reduce using rule 38 (expression -> ptr_expr .)
    RPAREN          reduce using rule 38 (expression -> ptr_expr .)
    LAND            reduce using rule 38 (expression -> ptr_expr .)
    LOR             reduce using rule 38 (expression -> ptr_expr .)
    ;               reduce using rule 38 (expression -> ptr_expr .)


state 48

    (42) expression -> MINUS . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 53
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    variable                       shift and go to state 45
    addr_expr                      shift and go to state 51
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 63

state 49

    (43) expression -> NUMBER .

    LESSTHEN        reduce using rule 43 (expression -> NUMBER .)
    GREATTHEN       reduce using rule 43 (expression -> NUMBER .)
    LESSTHENE       reduce using rule 43 (expression -> NUMBER .)
    GREATTHENE      reduce using rule 43 (expression -> NUMBER .)
    ISEQL           reduce using rule 43 (expression -> NUMBER .)
    ISNEQL          reduce using rule 43 (expression -> NUMBER .)
    PLUS            reduce using rule 43 (expression -> NUMBER .)
    TIMES           reduce using rule 43 (expression -> NUMBER .)
    MINUS           reduce using rule 43 (expression -> NUMBER .)
    DIVIDE          reduce using rule 43 (expression -> NUMBER .)
    RPAREN          reduce using rule 43 (expression -> NUMBER .)
    LAND            reduce using rule 43 (expression -> NUMBER .)
    LOR             reduce using rule 43 (expression -> NUMBER .)
    ;               reduce using rule 43 (expression -> NUMBER .)


state 50

    (23) condition -> LNOT . condition
    (14) condition -> . LPAREN condition RPAREN
    (15) condition -> . expression LESSTHEN expression
    (16) condition -> . expression GREATTHEN expression
    (17) condition -> . expression LESSTHENE expression
    (18) condition -> . expression GREATTHENE expression
    (19) condition -> . expression ISEQL expression
    (20) condition -> . expression ISNEQL expression
    (21) condition -> . condition LAND condition
    (22) condition -> . condition LOR condition
    (23) condition -> . LNOT condition
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 44
    LNOT            shift and go to state 50
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    condition                      shift and go to state 64
    addr_expr                      shift and go to state 51
    variable                       shift and go to state 45
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 52

state 51

    (39) expression -> addr_expr .

    LESSTHEN        reduce using rule 39 (expression -> addr_expr .)
    GREATTHEN       reduce using rule 39 (expression -> addr_expr .)
    LESSTHENE       reduce using rule 39 (expression -> addr_expr .)
    GREATTHENE      reduce using rule 39 (expression -> addr_expr .)
    ISEQL           reduce using rule 39 (expression -> addr_expr .)
    ISNEQL          reduce using rule 39 (expression -> addr_expr .)
    PLUS            reduce using rule 39 (expression -> addr_expr .)
    TIMES           reduce using rule 39 (expression -> addr_expr .)
    MINUS           reduce using rule 39 (expression -> addr_expr .)
    DIVIDE          reduce using rule 39 (expression -> addr_expr .)
    RPAREN          reduce using rule 39 (expression -> addr_expr .)
    LAND            reduce using rule 39 (expression -> addr_expr .)
    LOR             reduce using rule 39 (expression -> addr_expr .)
    ;               reduce using rule 39 (expression -> addr_expr .)


state 52

    (15) condition -> expression . LESSTHEN expression
    (16) condition -> expression . GREATTHEN expression
    (17) condition -> expression . LESSTHENE expression
    (18) condition -> expression . GREATTHENE expression
    (19) condition -> expression . ISEQL expression
    (20) condition -> expression . ISNEQL expression
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . DIVIDE expression

    LESSTHEN        shift and go to state 73
    GREATTHEN       shift and go to state 72
    LESSTHENE       shift and go to state 74
    GREATTHENE      shift and go to state 71
    ISEQL           shift and go to state 66
    ISNEQL          shift and go to state 70
    PLUS            shift and go to state 69
    TIMES           shift and go to state 67
    MINUS           shift and go to state 65
    DIVIDE          shift and go to state 68


state 53

    (41) expression -> LPAREN . expression RPAREN
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 53
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    variable                       shift and go to state 45
    addr_expr                      shift and go to state 51
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 75

state 54

    (33) assignment_statement -> lvalue EQUAL expression . ;
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . DIVIDE expression

    ;               shift and go to state 76
    PLUS            shift and go to state 69
    TIMES           shift and go to state 67
    MINUS           shift and go to state 65
    DIVIDE          shift and go to state 68


state 55

    (47) addr_expr -> ADDR variable .

    PLUS            reduce using rule 47 (addr_expr -> ADDR variable .)
    TIMES           reduce using rule 47 (addr_expr -> ADDR variable .)
    MINUS           reduce using rule 47 (addr_expr -> ADDR variable .)
    DIVIDE          reduce using rule 47 (addr_expr -> ADDR variable .)
    RPAREN          reduce using rule 47 (addr_expr -> ADDR variable .)
    LAND            reduce using rule 47 (addr_expr -> ADDR variable .)
    LOR             reduce using rule 47 (addr_expr -> ADDR variable .)
    LESSTHEN        reduce using rule 47 (addr_expr -> ADDR variable .)
    GREATTHEN       reduce using rule 47 (addr_expr -> ADDR variable .)
    LESSTHENE       reduce using rule 47 (addr_expr -> ADDR variable .)
    GREATTHENE      reduce using rule 47 (addr_expr -> ADDR variable .)
    ISEQL           reduce using rule 47 (addr_expr -> ADDR variable .)
    ISNEQL          reduce using rule 47 (addr_expr -> ADDR variable .)
    ;               reduce using rule 47 (addr_expr -> ADDR variable .)
    EQUAL           reduce using rule 47 (addr_expr -> ADDR variable .)


state 56

    (48) addr_expr -> ADDR ptr_expr .

    PLUS            reduce using rule 48 (addr_expr -> ADDR ptr_expr .)
    TIMES           reduce using rule 48 (addr_expr -> ADDR ptr_expr .)
    MINUS           reduce using rule 48 (addr_expr -> ADDR ptr_expr .)
    DIVIDE          reduce using rule 48 (addr_expr -> ADDR ptr_expr .)
    RPAREN          reduce using rule 48 (addr_expr -> ADDR ptr_expr .)
    LAND            reduce using rule 48 (addr_expr -> ADDR ptr_expr .)
    LOR             reduce using rule 48 (addr_expr -> ADDR ptr_expr .)
    LESSTHEN        reduce using rule 48 (addr_expr -> ADDR ptr_expr .)
    GREATTHEN       reduce using rule 48 (addr_expr -> ADDR ptr_expr .)
    LESSTHENE       reduce using rule 48 (addr_expr -> ADDR ptr_expr .)
    GREATTHENE      reduce using rule 48 (addr_expr -> ADDR ptr_expr .)
    ISEQL           reduce using rule 48 (addr_expr -> ADDR ptr_expr .)
    ISNEQL          reduce using rule 48 (addr_expr -> ADDR ptr_expr .)
    ;               reduce using rule 48 (addr_expr -> ADDR ptr_expr .)
    EQUAL           reduce using rule 48 (addr_expr -> ADDR ptr_expr .)


state 57

    (9) ctrlflow -> WHILE LPAREN condition . RPAREN statement_block
    (21) condition -> condition . LAND condition
    (22) condition -> condition . LOR condition

    RPAREN          shift and go to state 77
    LAND            shift and go to state 62
    LOR             shift and go to state 60


state 58

    (14) condition -> LPAREN condition . RPAREN
    (21) condition -> condition . LAND condition
    (22) condition -> condition . LOR condition

    RPAREN          shift and go to state 78
    LAND            shift and go to state 62
    LOR             shift and go to state 60


state 59

    (41) expression -> LPAREN expression . RPAREN
    (15) condition -> expression . LESSTHEN expression
    (16) condition -> expression . GREATTHEN expression
    (17) condition -> expression . LESSTHENE expression
    (18) condition -> expression . GREATTHENE expression
    (19) condition -> expression . ISEQL expression
    (20) condition -> expression . ISNEQL expression
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 79
    LESSTHEN        shift and go to state 73
    GREATTHEN       shift and go to state 72
    LESSTHENE       shift and go to state 74
    GREATTHENE      shift and go to state 71
    ISEQL           shift and go to state 66
    ISNEQL          shift and go to state 70
    PLUS            shift and go to state 69
    TIMES           shift and go to state 67
    MINUS           shift and go to state 65
    DIVIDE          shift and go to state 68


state 60

    (22) condition -> condition LOR . condition
    (14) condition -> . LPAREN condition RPAREN
    (15) condition -> . expression LESSTHEN expression
    (16) condition -> . expression GREATTHEN expression
    (17) condition -> . expression LESSTHENE expression
    (18) condition -> . expression GREATTHENE expression
    (19) condition -> . expression ISEQL expression
    (20) condition -> . expression ISNEQL expression
    (21) condition -> . condition LAND condition
    (22) condition -> . condition LOR condition
    (23) condition -> . LNOT condition
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 44
    LNOT            shift and go to state 50
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    condition                      shift and go to state 80
    addr_expr                      shift and go to state 51
    variable                       shift and go to state 45
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 52

state 61

    (8) ctrlflow -> IF LPAREN condition RPAREN . statement_block
    (10) ctrlflow -> IF LPAREN condition RPAREN . statement_block ELSE statement_block
    (11) statement_block -> . { statement_list }
    (12) statement_block -> . ;
    (13) statement_block -> . statement
    (6) statement -> . ctrlflow
    (7) statement -> . assignment_statement
    (8) ctrlflow -> . IF LPAREN condition RPAREN statement_block
    (9) ctrlflow -> . WHILE LPAREN condition RPAREN statement_block
    (10) ctrlflow -> . IF LPAREN condition RPAREN statement_block ELSE statement_block
    (33) assignment_statement -> . lvalue EQUAL expression ;
    (49) lvalue -> . variable
    (50) lvalue -> . ptr_expr
    (51) variable -> . NAME
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr

    {               shift and go to state 84
    ;               shift and go to state 82
    IF              shift and go to state 22
    WHILE           shift and go to state 27
    NAME            shift and go to state 20
    TIMES           shift and go to state 24

    statement                      shift and go to state 81
    assignment_statement           shift and go to state 28
    ctrlflow                       shift and go to state 25
    variable                       shift and go to state 26
    lvalue                         shift and go to state 23
    ptr_expr                       shift and go to state 30
    statement_block                shift and go to state 83

state 62

    (21) condition -> condition LAND . condition
    (14) condition -> . LPAREN condition RPAREN
    (15) condition -> . expression LESSTHEN expression
    (16) condition -> . expression GREATTHEN expression
    (17) condition -> . expression LESSTHENE expression
    (18) condition -> . expression GREATTHENE expression
    (19) condition -> . expression ISEQL expression
    (20) condition -> . expression ISNEQL expression
    (21) condition -> . condition LAND condition
    (22) condition -> . condition LOR condition
    (23) condition -> . LNOT condition
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 44
    LNOT            shift and go to state 50
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    condition                      shift and go to state 85
    addr_expr                      shift and go to state 51
    variable                       shift and go to state 45
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 52

state 63

    (42) expression -> MINUS expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . DIVIDE expression

    LESSTHEN        reduce using rule 42 (expression -> MINUS expression .)
    GREATTHEN       reduce using rule 42 (expression -> MINUS expression .)
    LESSTHENE       reduce using rule 42 (expression -> MINUS expression .)
    GREATTHENE      reduce using rule 42 (expression -> MINUS expression .)
    ISEQL           reduce using rule 42 (expression -> MINUS expression .)
    ISNEQL          reduce using rule 42 (expression -> MINUS expression .)
    PLUS            reduce using rule 42 (expression -> MINUS expression .)
    TIMES           reduce using rule 42 (expression -> MINUS expression .)
    MINUS           reduce using rule 42 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 42 (expression -> MINUS expression .)
    RPAREN          reduce using rule 42 (expression -> MINUS expression .)
    LAND            reduce using rule 42 (expression -> MINUS expression .)
    LOR             reduce using rule 42 (expression -> MINUS expression .)
    ;               reduce using rule 42 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 69 ]
  ! TIMES           [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 65 ]
  ! DIVIDE          [ shift and go to state 68 ]


state 64

    (23) condition -> LNOT condition .
    (21) condition -> condition . LAND condition
    (22) condition -> condition . LOR condition

    RPAREN          reduce using rule 23 (condition -> LNOT condition .)
    LAND            reduce using rule 23 (condition -> LNOT condition .)
    LOR             reduce using rule 23 (condition -> LNOT condition .)

  ! LAND            [ shift and go to state 62 ]
  ! LOR             [ shift and go to state 60 ]


state 65

    (36) expression -> expression MINUS . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 53
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    variable                       shift and go to state 45
    addr_expr                      shift and go to state 51
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 86

state 66

    (19) condition -> expression ISEQL . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 53
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    variable                       shift and go to state 45
    addr_expr                      shift and go to state 51
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 87

state 67

    (35) expression -> expression TIMES . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 53
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    variable                       shift and go to state 45
    addr_expr                      shift and go to state 51
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 88

state 68

    (37) expression -> expression DIVIDE . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 53
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    variable                       shift and go to state 45
    addr_expr                      shift and go to state 51
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 89

state 69

    (34) expression -> expression PLUS . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 53
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    variable                       shift and go to state 45
    addr_expr                      shift and go to state 51
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 90

state 70

    (20) condition -> expression ISNEQL . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 53
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    variable                       shift and go to state 45
    addr_expr                      shift and go to state 51
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 91

state 71

    (18) condition -> expression GREATTHENE . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 53
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    variable                       shift and go to state 45
    addr_expr                      shift and go to state 51
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 92

state 72

    (16) condition -> expression GREATTHEN . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 53
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    variable                       shift and go to state 45
    addr_expr                      shift and go to state 51
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 93

state 73

    (15) condition -> expression LESSTHEN . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 53
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    variable                       shift and go to state 45
    addr_expr                      shift and go to state 51
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 94

state 74

    (17) condition -> expression LESSTHENE . expression
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression MINUS expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . ptr_expr
    (39) expression -> . addr_expr
    (40) expression -> . variable
    (41) expression -> . LPAREN expression RPAREN
    (42) expression -> . MINUS expression
    (43) expression -> . NUMBER
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr
    (47) addr_expr -> . ADDR variable
    (48) addr_expr -> . ADDR ptr_expr
    (51) variable -> . NAME

    LPAREN          shift and go to state 53
    MINUS           shift and go to state 48
    NUMBER          shift and go to state 49
    TIMES           shift and go to state 24
    ADDR            shift and go to state 37
    NAME            shift and go to state 20

    variable                       shift and go to state 45
    addr_expr                      shift and go to state 51
    ptr_expr                       shift and go to state 47
    expression                     shift and go to state 95

state 75

    (41) expression -> LPAREN expression . RPAREN
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 79
    PLUS            shift and go to state 69
    TIMES           shift and go to state 67
    MINUS           shift and go to state 65
    DIVIDE          shift and go to state 68


state 76

    (33) assignment_statement -> lvalue EQUAL expression ; .

    }               reduce using rule 33 (assignment_statement -> lvalue EQUAL expression ; .)
    IF              reduce using rule 33 (assignment_statement -> lvalue EQUAL expression ; .)
    WHILE           reduce using rule 33 (assignment_statement -> lvalue EQUAL expression ; .)
    NAME            reduce using rule 33 (assignment_statement -> lvalue EQUAL expression ; .)
    TIMES           reduce using rule 33 (assignment_statement -> lvalue EQUAL expression ; .)
    ELSE            reduce using rule 33 (assignment_statement -> lvalue EQUAL expression ; .)


state 77

    (9) ctrlflow -> WHILE LPAREN condition RPAREN . statement_block
    (11) statement_block -> . { statement_list }
    (12) statement_block -> . ;
    (13) statement_block -> . statement
    (6) statement -> . ctrlflow
    (7) statement -> . assignment_statement
    (8) ctrlflow -> . IF LPAREN condition RPAREN statement_block
    (9) ctrlflow -> . WHILE LPAREN condition RPAREN statement_block
    (10) ctrlflow -> . IF LPAREN condition RPAREN statement_block ELSE statement_block
    (33) assignment_statement -> . lvalue EQUAL expression ;
    (49) lvalue -> . variable
    (50) lvalue -> . ptr_expr
    (51) variable -> . NAME
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr

    {               shift and go to state 84
    ;               shift and go to state 82
    IF              shift and go to state 22
    WHILE           shift and go to state 27
    NAME            shift and go to state 20
    TIMES           shift and go to state 24

    statement                      shift and go to state 81
    assignment_statement           shift and go to state 28
    ctrlflow                       shift and go to state 25
    variable                       shift and go to state 26
    lvalue                         shift and go to state 23
    ptr_expr                       shift and go to state 30
    statement_block                shift and go to state 96

state 78

    (14) condition -> LPAREN condition RPAREN .

    RPAREN          reduce using rule 14 (condition -> LPAREN condition RPAREN .)
    LAND            reduce using rule 14 (condition -> LPAREN condition RPAREN .)
    LOR             reduce using rule 14 (condition -> LPAREN condition RPAREN .)


state 79

    (41) expression -> LPAREN expression RPAREN .

    LESSTHEN        reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    GREATTHEN       reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    LESSTHENE       reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    GREATTHENE      reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    ISEQL           reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    ISNEQL          reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    ;               reduce using rule 41 (expression -> LPAREN expression RPAREN .)


state 80

    (22) condition -> condition LOR condition .
    (21) condition -> condition . LAND condition
    (22) condition -> condition . LOR condition

    RPAREN          reduce using rule 22 (condition -> condition LOR condition .)
    LAND            reduce using rule 22 (condition -> condition LOR condition .)
    LOR             reduce using rule 22 (condition -> condition LOR condition .)

  ! LAND            [ shift and go to state 62 ]
  ! LOR             [ shift and go to state 60 ]


state 81

    (13) statement_block -> statement .

    ELSE            reduce using rule 13 (statement_block -> statement .)
    }               reduce using rule 13 (statement_block -> statement .)
    IF              reduce using rule 13 (statement_block -> statement .)
    WHILE           reduce using rule 13 (statement_block -> statement .)
    NAME            reduce using rule 13 (statement_block -> statement .)
    TIMES           reduce using rule 13 (statement_block -> statement .)


state 82

    (12) statement_block -> ; .

    ELSE            reduce using rule 12 (statement_block -> ; .)
    }               reduce using rule 12 (statement_block -> ; .)
    IF              reduce using rule 12 (statement_block -> ; .)
    WHILE           reduce using rule 12 (statement_block -> ; .)
    NAME            reduce using rule 12 (statement_block -> ; .)
    TIMES           reduce using rule 12 (statement_block -> ; .)


state 83

    (8) ctrlflow -> IF LPAREN condition RPAREN statement_block .
    (10) ctrlflow -> IF LPAREN condition RPAREN statement_block . ELSE statement_block

    }               reduce using rule 8 (ctrlflow -> IF LPAREN condition RPAREN statement_block .)
    IF              reduce using rule 8 (ctrlflow -> IF LPAREN condition RPAREN statement_block .)
    WHILE           reduce using rule 8 (ctrlflow -> IF LPAREN condition RPAREN statement_block .)
    NAME            reduce using rule 8 (ctrlflow -> IF LPAREN condition RPAREN statement_block .)
    TIMES           reduce using rule 8 (ctrlflow -> IF LPAREN condition RPAREN statement_block .)
    ELSE            shift and go to state 97

  ! ELSE            [ reduce using rule 8 (ctrlflow -> IF LPAREN condition RPAREN statement_block .) ]


state 84

    (11) statement_block -> { . statement_list }
    (4) statement_list -> . statement_list statement
    (5) statement_list -> . empty
    (1) empty -> .

    }               reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    NAME            reduce using rule 1 (empty -> .)
    TIMES           reduce using rule 1 (empty -> .)

    empty                          shift and go to state 13
    statement_list                 shift and go to state 98

state 85

    (21) condition -> condition LAND condition .
    (21) condition -> condition . LAND condition
    (22) condition -> condition . LOR condition

    RPAREN          reduce using rule 21 (condition -> condition LAND condition .)
    LAND            reduce using rule 21 (condition -> condition LAND condition .)
    LOR             reduce using rule 21 (condition -> condition LAND condition .)

  ! LAND            [ shift and go to state 62 ]
  ! LOR             [ shift and go to state 60 ]


state 86

    (36) expression -> expression MINUS expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . DIVIDE expression

    LESSTHEN        reduce using rule 36 (expression -> expression MINUS expression .)
    GREATTHEN       reduce using rule 36 (expression -> expression MINUS expression .)
    LESSTHENE       reduce using rule 36 (expression -> expression MINUS expression .)
    GREATTHENE      reduce using rule 36 (expression -> expression MINUS expression .)
    ISEQL           reduce using rule 36 (expression -> expression MINUS expression .)
    ISNEQL          reduce using rule 36 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 36 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 36 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 36 (expression -> expression MINUS expression .)
    LAND            reduce using rule 36 (expression -> expression MINUS expression .)
    LOR             reduce using rule 36 (expression -> expression MINUS expression .)
    ;               reduce using rule 36 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68

  ! TIMES           [ reduce using rule 36 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 65 ]


state 87

    (19) condition -> expression ISEQL expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 19 (condition -> expression ISEQL expression .)
    LAND            reduce using rule 19 (condition -> expression ISEQL expression .)
    LOR             reduce using rule 19 (condition -> expression ISEQL expression .)
    PLUS            shift and go to state 69
    TIMES           shift and go to state 67
    MINUS           shift and go to state 65
    DIVIDE          shift and go to state 68


state 88

    (35) expression -> expression TIMES expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . DIVIDE expression

    LESSTHEN        reduce using rule 35 (expression -> expression TIMES expression .)
    GREATTHEN       reduce using rule 35 (expression -> expression TIMES expression .)
    LESSTHENE       reduce using rule 35 (expression -> expression TIMES expression .)
    GREATTHENE      reduce using rule 35 (expression -> expression TIMES expression .)
    ISEQL           reduce using rule 35 (expression -> expression TIMES expression .)
    ISNEQL          reduce using rule 35 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 35 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 35 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 35 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 35 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 35 (expression -> expression TIMES expression .)
    LAND            reduce using rule 35 (expression -> expression TIMES expression .)
    LOR             reduce using rule 35 (expression -> expression TIMES expression .)
    ;               reduce using rule 35 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 69 ]
  ! TIMES           [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 65 ]
  ! DIVIDE          [ shift and go to state 68 ]


state 89

    (37) expression -> expression DIVIDE expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . DIVIDE expression

    LESSTHEN        reduce using rule 37 (expression -> expression DIVIDE expression .)
    GREATTHEN       reduce using rule 37 (expression -> expression DIVIDE expression .)
    LESSTHENE       reduce using rule 37 (expression -> expression DIVIDE expression .)
    GREATTHENE      reduce using rule 37 (expression -> expression DIVIDE expression .)
    ISEQL           reduce using rule 37 (expression -> expression DIVIDE expression .)
    ISNEQL          reduce using rule 37 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 37 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 37 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 37 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 37 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 37 (expression -> expression DIVIDE expression .)
    LAND            reduce using rule 37 (expression -> expression DIVIDE expression .)
    LOR             reduce using rule 37 (expression -> expression DIVIDE expression .)
    ;               reduce using rule 37 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 69 ]
  ! TIMES           [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 65 ]
  ! DIVIDE          [ shift and go to state 68 ]


state 90

    (34) expression -> expression PLUS expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . DIVIDE expression

    LESSTHEN        reduce using rule 34 (expression -> expression PLUS expression .)
    GREATTHEN       reduce using rule 34 (expression -> expression PLUS expression .)
    LESSTHENE       reduce using rule 34 (expression -> expression PLUS expression .)
    GREATTHENE      reduce using rule 34 (expression -> expression PLUS expression .)
    ISEQL           reduce using rule 34 (expression -> expression PLUS expression .)
    ISNEQL          reduce using rule 34 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 34 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 34 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 34 (expression -> expression PLUS expression .)
    LAND            reduce using rule 34 (expression -> expression PLUS expression .)
    LOR             reduce using rule 34 (expression -> expression PLUS expression .)
    ;               reduce using rule 34 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68

  ! TIMES           [ reduce using rule 34 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 34 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 69 ]
  ! MINUS           [ shift and go to state 65 ]


state 91

    (20) condition -> expression ISNEQL expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 20 (condition -> expression ISNEQL expression .)
    LAND            reduce using rule 20 (condition -> expression ISNEQL expression .)
    LOR             reduce using rule 20 (condition -> expression ISNEQL expression .)
    PLUS            shift and go to state 69
    TIMES           shift and go to state 67
    MINUS           shift and go to state 65
    DIVIDE          shift and go to state 68


state 92

    (18) condition -> expression GREATTHENE expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 18 (condition -> expression GREATTHENE expression .)
    LAND            reduce using rule 18 (condition -> expression GREATTHENE expression .)
    LOR             reduce using rule 18 (condition -> expression GREATTHENE expression .)
    PLUS            shift and go to state 69
    TIMES           shift and go to state 67
    MINUS           shift and go to state 65
    DIVIDE          shift and go to state 68


state 93

    (16) condition -> expression GREATTHEN expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 16 (condition -> expression GREATTHEN expression .)
    LAND            reduce using rule 16 (condition -> expression GREATTHEN expression .)
    LOR             reduce using rule 16 (condition -> expression GREATTHEN expression .)
    PLUS            shift and go to state 69
    TIMES           shift and go to state 67
    MINUS           shift and go to state 65
    DIVIDE          shift and go to state 68


state 94

    (15) condition -> expression LESSTHEN expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 15 (condition -> expression LESSTHEN expression .)
    LAND            reduce using rule 15 (condition -> expression LESSTHEN expression .)
    LOR             reduce using rule 15 (condition -> expression LESSTHEN expression .)
    PLUS            shift and go to state 69
    TIMES           shift and go to state 67
    MINUS           shift and go to state 65
    DIVIDE          shift and go to state 68


state 95

    (17) condition -> expression LESSTHENE expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . MINUS expression
    (37) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 17 (condition -> expression LESSTHENE expression .)
    LAND            reduce using rule 17 (condition -> expression LESSTHENE expression .)
    LOR             reduce using rule 17 (condition -> expression LESSTHENE expression .)
    PLUS            shift and go to state 69
    TIMES           shift and go to state 67
    MINUS           shift and go to state 65
    DIVIDE          shift and go to state 68


state 96

    (9) ctrlflow -> WHILE LPAREN condition RPAREN statement_block .

    }               reduce using rule 9 (ctrlflow -> WHILE LPAREN condition RPAREN statement_block .)
    IF              reduce using rule 9 (ctrlflow -> WHILE LPAREN condition RPAREN statement_block .)
    WHILE           reduce using rule 9 (ctrlflow -> WHILE LPAREN condition RPAREN statement_block .)
    NAME            reduce using rule 9 (ctrlflow -> WHILE LPAREN condition RPAREN statement_block .)
    TIMES           reduce using rule 9 (ctrlflow -> WHILE LPAREN condition RPAREN statement_block .)
    ELSE            reduce using rule 9 (ctrlflow -> WHILE LPAREN condition RPAREN statement_block .)


state 97

    (10) ctrlflow -> IF LPAREN condition RPAREN statement_block ELSE . statement_block
    (11) statement_block -> . { statement_list }
    (12) statement_block -> . ;
    (13) statement_block -> . statement
    (6) statement -> . ctrlflow
    (7) statement -> . assignment_statement
    (8) ctrlflow -> . IF LPAREN condition RPAREN statement_block
    (9) ctrlflow -> . WHILE LPAREN condition RPAREN statement_block
    (10) ctrlflow -> . IF LPAREN condition RPAREN statement_block ELSE statement_block
    (33) assignment_statement -> . lvalue EQUAL expression ;
    (49) lvalue -> . variable
    (50) lvalue -> . ptr_expr
    (51) variable -> . NAME
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr

    {               shift and go to state 84
    ;               shift and go to state 82
    IF              shift and go to state 22
    WHILE           shift and go to state 27
    NAME            shift and go to state 20
    TIMES           shift and go to state 24

    statement                      shift and go to state 81
    assignment_statement           shift and go to state 28
    ctrlflow                       shift and go to state 25
    variable                       shift and go to state 26
    lvalue                         shift and go to state 23
    ptr_expr                       shift and go to state 30
    statement_block                shift and go to state 99

state 98

    (11) statement_block -> { statement_list . }
    (4) statement_list -> statement_list . statement
    (6) statement -> . ctrlflow
    (7) statement -> . assignment_statement
    (8) ctrlflow -> . IF LPAREN condition RPAREN statement_block
    (9) ctrlflow -> . WHILE LPAREN condition RPAREN statement_block
    (10) ctrlflow -> . IF LPAREN condition RPAREN statement_block ELSE statement_block
    (33) assignment_statement -> . lvalue EQUAL expression ;
    (49) lvalue -> . variable
    (50) lvalue -> . ptr_expr
    (51) variable -> . NAME
    (44) ptr_expr -> . TIMES variable
    (45) ptr_expr -> . TIMES ptr_expr
    (46) ptr_expr -> . TIMES addr_expr

    }               shift and go to state 100
    IF              shift and go to state 22
    WHILE           shift and go to state 27
    NAME            shift and go to state 20
    TIMES           shift and go to state 24

    statement                      shift and go to state 21
    assignment_statement           shift and go to state 28
    ctrlflow                       shift and go to state 25
    variable                       shift and go to state 26
    lvalue                         shift and go to state 23
    ptr_expr                       shift and go to state 30

state 99

    (10) ctrlflow -> IF LPAREN condition RPAREN statement_block ELSE statement_block .

    }               reduce using rule 10 (ctrlflow -> IF LPAREN condition RPAREN statement_block ELSE statement_block .)
    IF              reduce using rule 10 (ctrlflow -> IF LPAREN condition RPAREN statement_block ELSE statement_block .)
    WHILE           reduce using rule 10 (ctrlflow -> IF LPAREN condition RPAREN statement_block ELSE statement_block .)
    NAME            reduce using rule 10 (ctrlflow -> IF LPAREN condition RPAREN statement_block ELSE statement_block .)
    TIMES           reduce using rule 10 (ctrlflow -> IF LPAREN condition RPAREN statement_block ELSE statement_block .)
    ELSE            reduce using rule 10 (ctrlflow -> IF LPAREN condition RPAREN statement_block ELSE statement_block .)


state 100

    (11) statement_block -> { statement_list } .

    ELSE            reduce using rule 11 (statement_block -> { statement_list } .)
    }               reduce using rule 11 (statement_block -> { statement_list } .)
    IF              reduce using rule 11 (statement_block -> { statement_list } .)
    WHILE           reduce using rule 11 (statement_block -> { statement_list } .)
    NAME            reduce using rule 11 (statement_block -> { statement_list } .)
    TIMES           reduce using rule 11 (statement_block -> { statement_list } .)

