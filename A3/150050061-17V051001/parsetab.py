
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftTHENleftELSEleftPLUSMINUSleftSTARSLASHrightUMINUSID STAR AND NUM LPAREN RPAREN COMMA LCURL RCURL SEMICOLON EQUALS PLUS MINUS SLASH LT GT NOT OR FLOAT IF INT ELSE VOID WHILE prog : declarations procedures\n\t \n\t\tdeclarations : declarations decl SEMICOLON\n\t\t\t\t     | \n\t\n\t\tprocedures : procedures procedure\n\t\t\t\t  | procedure \t\n\t\n\t\ttype : VOID \n\t\t\t | INT\n\t\t\t | FLOAT\n\t\n\t\tprocedure : type ID LPAREN params RPAREN LCURL declarations body RCURL\n\t\n\t\tparams \t: type ID paramslist \n\t\t\t\t| type ptr paramslist\n\t\t\t\t| type addr paramslist\n\t\t\t   \t| \n\t\n\t\tparamslist \t: COMMA type ID paramslist\n\t\t\t\t\t| COMMA type addr paramslist\n\t\t\t\t\t| COMMA type ptr paramslist\n\t\t\t\t\t| \n\t body : body stmt\n\t\t\t | stmt\n\t stmt : assgn SEMICOLON\n\t\t\t | if_stmt \n\t\t\t | while_stmt\n\t\t\t | function_call\n\t function_call : ID LPAREN opt_params RPAREN SEMICOLON\n\t opt_params  : ID opt_params_list\n\t\t\t\t\t| ptr opt_params_list\n\t\t\t\t\t| addr opt_params_list\n\t\t\t\t\t| \n\n\t\topt_params_list : COMMA ID opt_params_list\n\t\t\t\t\t\t| COMMA ptr opt_params_list\n\t\t\t\t\t\t| COMMA addr opt_params_list\n\t\t\t\t\t\t|\n\t\n\t\tif_stmt : IF LPAREN bool_expr RPAREN compound_stmt \t\t\t\t%prec THEN\n\t\t\t\t| IF LPAREN bool_expr RPAREN compound_stmt ELSE compound_stmt\n\t\n\t\twhile_stmt : WHILE LPAREN bool_expr RPAREN compound_stmt\n\t\n\t\tcompound_stmt : stmt\n\t\t\t\t\t  | SEMICOLON\n\t\t\t\t\t  | LCURL RCURL\n\t\t\t\t\t  | LCURL body RCURL\n\t assgn : ptr_assgn\n\t \t\t  | num_assgn\n\t decl : type decl_list\n\t decl_list : decl_list COMMA ID\n\t\t\t\t | decl_list COMMA ptr\n\t\t\t\t | ID\n\t\t\t\t | ptr\n\t ptr_assgn : ptr EQUALS ptr_expr  num_assgn : ID EQUALS ptr_expr\n\t\tbool_expr : bool_expr OR OR a_bool_expr \n\t\t\t\t  | a_bool_expr\n\t\ta_bool_expr : a_bool_expr AND AND n_bool_expr \n\t\t\t\t \t| n_bool_expr\n\t\tn_bool_expr : NOT n_bool_expr \n\t\t\t\t | sub_bool_expr\n\t\t\t\t | LPAREN bool_expr RPAREN\n\t sub_bool_expr : ptr_expr GT ptr_expr\n\t\t\t\t\t  | ptr_expr GT EQUALS ptr_expr\n\t\t\t\t\t  | ptr_expr LT ptr_expr\n\t\t\t\t\t  | ptr_expr LT EQUALS ptr_expr\n\t\t\t\t\t  | ptr_expr EQUALS EQUALS ptr_expr\n\t\t\t\t\t  | ptr_expr NOT EQUALS ptr_expr\n\t\tptr_expr : ptr_expr PLUS ptr_factor \n\t\t\t\t | ptr_expr MINUS ptr_factor\n\t\t\t\t | ptr_factor\n\t\n\t\tptr_factor :  ptr_factor STAR ptr_term\n\t\t\t\t \t| ptr_factor SLASH ptr_term\n\t\t\t\t \t| ptr_term\n\t ptr_term :  MINUS ptr_term  \t\t%prec UMINUS\n\t\t\t\t  | ptr_expr_base\n\t ptr_expr_base : ID\n\t\t\t\t| NUM\n\t\t\t\t| ptr\n\t\t\t\t| addr\n\t\t\t\t| LPAREN ptr_expr RPAREN\n\t  ptr : STAR ptr \n\t\t\t | STAR ID\n\t\t\t | STAR addr\n\t addr : AND ID\n\t\t\t | AND ptr\n\t\t\t | AND addr\n\t'
    
_lr_action_items = {'OR':([20,21,22,26,27,28,74,76,77,80,81,82,83,86,88,89,90,91,99,104,106,107,119,120,121,122,123,124,131,134,141,144,145,146,147,148,],[-75,-76,-77,-79,-78,-80,-67,-70,-72,-64,-69,-73,-71,107,-50,-52,-54,107,-68,107,-53,125,-74,-62,-63,-65,-66,-55,-56,-58,-49,-57,-61,-59,-60,-51,]),'FLOAT':([0,2,4,7,10,12,18,35,36,40,60,],[-3,3,3,-5,-4,-2,3,-3,3,3,-9,]),'LPAREN':([13,17,42,48,49,59,62,63,64,75,78,84,85,100,101,102,103,109,111,125,130,132,133,135,136,],[18,18,58,62,63,75,84,84,75,75,75,84,84,75,75,75,75,75,75,84,75,75,75,75,84,]),'ID':([3,5,8,9,11,12,15,19,23,25,35,40,41,43,44,45,47,50,54,58,59,61,62,63,64,65,75,78,84,85,93,100,101,102,103,108,109,111,114,118,125,126,127,128,129,130,132,133,135,136,137,142,143,149,150,151,],[-8,-7,13,-6,17,-2,21,27,29,34,-3,42,57,-23,-21,-22,42,-19,66,70,76,-18,76,76,76,-20,76,76,76,76,115,76,76,76,76,42,76,76,42,-24,76,-36,-37,-35,42,76,76,76,76,76,-33,-38,42,42,-39,-34,]),'$end':([1,4,7,10,60,],[0,-1,-5,-4,-9,]),'LT':([20,21,22,26,27,28,74,76,77,80,81,82,83,87,99,105,119,120,121,122,123,],[-75,-76,-77,-79,-78,-80,-67,-70,-72,-64,-69,-73,-71,111,-68,111,-74,-62,-63,-65,-66,]),'AND':([3,5,9,15,19,20,21,22,25,26,27,28,41,58,59,62,63,64,74,75,76,77,78,80,81,82,83,84,85,88,89,90,93,99,100,101,102,103,106,109,111,113,119,120,121,122,123,124,125,130,131,132,133,134,135,136,141,144,145,146,147,148,],[-8,-7,-6,19,19,-75,-76,-77,19,-79,-78,-80,19,19,19,19,19,19,-67,19,-70,-72,19,-64,-69,-73,-71,19,19,113,-52,-54,19,-68,19,19,19,19,-53,19,19,136,-74,-62,-63,-65,-66,-55,19,19,-56,19,19,-58,19,19,113,-57,-61,-59,-60,-51,]),'EQUALS':([20,21,22,26,27,28,42,51,74,76,77,80,81,82,83,87,99,105,109,110,111,112,119,120,121,122,123,],[-75,-76,-77,-79,-78,-80,59,64,-67,-70,-72,-64,-69,-73,-71,112,-68,112,130,132,133,135,-74,-62,-63,-65,-66,]),'MINUS':([20,21,22,26,27,28,59,62,63,64,74,75,76,77,78,79,80,81,82,83,84,85,87,92,98,99,100,101,102,103,105,109,111,119,120,121,122,123,125,130,131,132,133,134,135,136,144,145,146,147,],[-75,-76,-77,-79,-78,-80,78,78,78,78,-67,78,-70,-72,78,101,-64,-69,-73,-71,78,78,101,101,101,-68,78,78,78,78,101,78,78,-74,-62,-63,-65,-66,78,78,101,78,78,101,78,78,101,101,101,101,]),'GT':([20,21,22,26,27,28,74,76,77,80,81,82,83,87,99,105,119,120,121,122,123,],[-75,-76,-77,-79,-78,-80,-67,-70,-72,-64,-69,-73,-71,109,-68,109,-74,-62,-63,-65,-66,]),'SEMICOLON':([6,13,14,16,20,21,22,26,27,28,29,30,46,52,53,66,74,76,77,79,80,81,82,83,92,97,99,108,114,119,120,121,122,123,149,],[12,-45,-46,-42,-75,-76,-77,-79,-78,-80,-43,-44,-41,-40,65,-45,-67,-70,-72,-48,-64,-69,-73,-71,-47,118,-68,127,127,-74,-62,-63,-65,-66,127,]),'NOT':([20,21,22,26,27,28,62,63,74,76,77,80,81,82,83,84,85,87,99,105,119,120,121,122,123,125,136,],[-75,-76,-77,-79,-78,-80,85,85,-67,-70,-72,-64,-69,-73,-71,85,85,110,-68,110,-74,-62,-63,-65,-66,85,85,]),'COMMA':([13,14,16,20,21,22,26,27,28,29,30,32,33,34,55,56,57,66,70,71,72,115,116,117,],[-45,-46,23,-75,-76,-77,-79,-78,-80,-43,-44,36,36,36,36,36,36,-45,93,93,93,93,93,93,]),'RPAREN':([18,20,21,22,24,26,27,28,32,33,34,37,38,39,55,56,57,58,67,68,69,70,71,72,73,74,76,77,80,81,82,83,86,88,89,90,91,94,95,96,98,99,104,105,106,115,116,117,119,120,121,122,123,124,131,134,138,139,140,141,144,145,146,147,148,],[-13,-75,-76,-77,31,-79,-78,-80,-17,-17,-17,-12,-11,-10,-17,-17,-17,-28,-15,-16,-14,-32,-32,-32,97,-67,-70,-72,-64,-69,-73,-71,108,-50,-52,-54,114,-25,-27,-26,119,-68,124,119,-53,-32,-32,-32,-74,-62,-63,-65,-66,-55,-56,-58,-29,-31,-30,-49,-57,-61,-59,-60,-51,]),'INT':([0,2,4,7,10,12,18,35,36,40,60,],[-3,5,5,-5,-4,-2,5,-3,5,5,-9,]),'RCURL':([43,44,45,47,50,61,65,118,126,127,128,129,137,142,143,150,151,],[-23,-21,-22,60,-19,-18,-20,-24,-36,-37,-35,142,-33,-38,150,-39,-34,]),'VOID':([0,2,4,7,10,12,18,35,36,40,60,],[-3,9,9,-5,-4,-2,9,-3,9,9,-9,]),'WHILE':([12,35,40,43,44,45,47,50,61,65,108,114,118,126,127,128,129,137,142,143,149,150,151,],[-2,-3,48,-23,-21,-22,48,-19,-18,-20,48,48,-24,-36,-37,-35,48,-33,-38,48,48,-39,-34,]),'IF':([12,35,40,43,44,45,47,50,61,65,108,114,118,126,127,128,129,137,142,143,149,150,151,],[-2,-3,49,-23,-21,-22,49,-19,-18,-20,49,49,-24,-36,-37,-35,49,-33,-38,49,49,-39,-34,]),'ELSE':([43,44,45,65,118,126,127,128,137,142,150,151,],[-23,-21,-22,-20,-24,-36,-37,-35,149,-38,-39,-34,]),'NUM':([59,62,63,64,75,78,84,85,100,101,102,103,109,111,125,130,132,133,135,136,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'SLASH':([20,21,22,26,27,28,74,76,77,80,81,82,83,99,119,120,121,122,123,],[-75,-76,-77,-79,-78,-80,-67,-70,-72,103,-69,-73,-71,-68,-74,103,103,-65,-66,]),'STAR':([3,5,8,9,12,15,19,20,21,22,23,25,26,27,28,35,40,41,43,44,45,47,50,54,58,59,61,62,63,64,65,74,75,76,77,78,80,81,82,83,84,85,93,99,100,101,102,103,108,109,111,114,118,119,120,121,122,123,125,126,127,128,129,130,132,133,135,136,137,142,143,149,150,151,],[-8,-7,15,-6,-2,15,15,-75,-76,-77,15,15,-79,-78,-80,-3,15,15,-23,-21,-22,15,-19,15,15,15,-18,15,15,15,-20,-67,15,-70,-72,15,102,-69,-73,-71,15,15,15,-68,15,15,15,15,15,15,15,15,-24,-74,102,102,-65,-66,15,-36,-37,-35,15,15,15,15,15,15,-33,-38,15,15,-39,-34,]),'LCURL':([31,108,114,149,],[35,129,129,129,]),'PLUS':([20,21,22,26,27,28,74,76,77,79,80,81,82,83,87,92,98,99,105,119,120,121,122,123,131,134,144,145,146,147,],[-75,-76,-77,-79,-78,-80,-67,-70,-72,100,-64,-69,-73,-71,100,100,100,-68,100,-74,-62,-63,-65,-66,100,100,100,100,100,100,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'if_stmt':([40,47,108,114,129,143,149,],[44,44,44,44,44,44,44,]),'paramslist':([32,33,34,55,56,57,],[37,38,39,67,68,69,]),'ptr_term':([59,62,63,64,75,78,84,85,100,101,102,103,109,111,125,130,132,133,135,136,],[74,74,74,74,74,99,74,74,74,74,122,123,74,74,74,74,74,74,74,74,]),'function_call':([40,47,108,114,129,143,149,],[43,43,43,43,43,43,43,]),'procedure':([2,4,],[7,10,]),'ptr_factor':([59,62,63,64,75,84,85,100,101,109,111,125,130,132,133,135,136,],[80,80,80,80,80,80,80,120,121,80,80,80,80,80,80,80,80,]),'assgn':([40,47,108,114,129,143,149,],[53,53,53,53,53,53,53,]),'opt_params':([58,],[73,]),'decl_list':([8,54,],[16,16,]),'opt_params_list':([70,71,72,115,116,117,],[94,95,96,138,139,140,]),'while_stmt':([40,47,108,114,129,143,149,],[45,45,45,45,45,45,45,]),'ptr_expr':([59,62,63,64,75,84,85,109,111,125,130,132,133,135,136,],[79,87,87,92,98,105,87,131,134,87,144,145,146,147,87,]),'declarations':([0,35,],[2,40,]),'num_assgn':([40,47,108,114,129,143,149,],[46,46,46,46,46,46,46,]),'decl':([2,40,],[6,6,]),'body':([40,129,],[47,143,]),'stmt':([40,47,108,114,129,143,149,],[50,61,126,126,50,61,126,]),'ptr':([8,15,19,23,25,40,41,47,54,58,59,62,63,64,75,78,84,85,93,100,101,102,103,108,109,111,114,125,129,130,132,133,135,136,143,149,],[14,20,26,30,33,51,56,51,14,72,77,77,77,77,77,77,77,77,117,77,77,77,77,51,77,77,51,77,51,77,77,77,77,77,51,51,]),'bool_expr':([62,63,84,],[86,91,104,]),'ptr_assgn':([40,47,108,114,129,143,149,],[52,52,52,52,52,52,52,]),'a_bool_expr':([62,63,84,125,],[88,88,88,141,]),'params':([18,],[24,]),'procedures':([2,],[4,]),'compound_stmt':([108,114,149,],[128,137,151,]),'type':([2,4,18,36,40,],[8,11,25,41,54,]),'addr':([15,19,25,41,58,59,62,63,64,75,78,84,85,93,100,101,102,103,109,111,125,130,132,133,135,136,],[22,28,32,55,71,82,82,82,82,82,82,82,82,116,82,82,82,82,82,82,82,82,82,82,82,82,]),'sub_bool_expr':([62,63,84,85,125,136,],[90,90,90,90,90,90,]),'ptr_expr_base':([59,62,63,64,75,78,84,85,100,101,102,103,109,111,125,130,132,133,135,136,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'n_bool_expr':([62,63,84,85,125,136,],[89,89,89,106,89,148,]),'prog':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> declarations procedures','prog',2,'p_def_prog','Parser.py',108),
  ('declarations -> declarations decl SEMICOLON','declarations',3,'p_def_declaration','Parser.py',116),
  ('declarations -> <empty>','declarations',0,'p_def_declaration','Parser.py',117),
  ('procedures -> procedures procedure','procedures',2,'p_def_procedures','Parser.py',128),
  ('procedures -> procedure','procedures',1,'p_def_procedures','Parser.py',129),
  ('type -> VOID','type',1,'p_def_type','Parser.py',139),
  ('type -> INT','type',1,'p_def_type','Parser.py',140),
  ('type -> FLOAT','type',1,'p_def_type','Parser.py',141),
  ('procedure -> type ID LPAREN params RPAREN LCURL declarations body RCURL','procedure',9,'p_def_procedure','Parser.py',160),
  ('params -> type ID paramslist','params',3,'p_def_parameters','Parser.py',170),
  ('params -> type ptr paramslist','params',3,'p_def_parameters','Parser.py',171),
  ('params -> type addr paramslist','params',3,'p_def_parameters','Parser.py',172),
  ('params -> <empty>','params',0,'p_def_parameters','Parser.py',173),
  ('paramslist -> COMMA type ID paramslist','paramslist',4,'p_def_paramslist','Parser.py',189),
  ('paramslist -> COMMA type addr paramslist','paramslist',4,'p_def_paramslist','Parser.py',190),
  ('paramslist -> COMMA type ptr paramslist','paramslist',4,'p_def_paramslist','Parser.py',191),
  ('paramslist -> <empty>','paramslist',0,'p_def_paramslist','Parser.py',192),
  ('body -> body stmt','body',2,'p_def_body','Parser.py',208),
  ('body -> stmt','body',1,'p_def_body','Parser.py',209),
  ('stmt -> assgn SEMICOLON','stmt',2,'p_def_stmt','Parser.py',219),
  ('stmt -> if_stmt','stmt',1,'p_def_stmt','Parser.py',220),
  ('stmt -> while_stmt','stmt',1,'p_def_stmt','Parser.py',221),
  ('stmt -> function_call','stmt',1,'p_def_stmt','Parser.py',222),
  ('function_call -> ID LPAREN opt_params RPAREN SEMICOLON','function_call',5,'p_def_function_call','Parser.py',228),
  ('opt_params -> ID opt_params_list','opt_params',2,'p_def_opt_params','Parser.py',234),
  ('opt_params -> ptr opt_params_list','opt_params',2,'p_def_opt_params','Parser.py',235),
  ('opt_params -> addr opt_params_list','opt_params',2,'p_def_opt_params','Parser.py',236),
  ('opt_params -> <empty>','opt_params',0,'p_def_opt_params','Parser.py',237),
  ('opt_params_list -> COMMA ID opt_params_list','opt_params_list',3,'p_def_opt_params','Parser.py',239),
  ('opt_params_list -> COMMA ptr opt_params_list','opt_params_list',3,'p_def_opt_params','Parser.py',240),
  ('opt_params_list -> COMMA addr opt_params_list','opt_params_list',3,'p_def_opt_params','Parser.py',241),
  ('opt_params_list -> <empty>','opt_params_list',0,'p_def_opt_params','Parser.py',242),
  ('if_stmt -> IF LPAREN bool_expr RPAREN compound_stmt','if_stmt',5,'p_def_if_stmt','Parser.py',267),
  ('if_stmt -> IF LPAREN bool_expr RPAREN compound_stmt ELSE compound_stmt','if_stmt',7,'p_def_if_stmt','Parser.py',268),
  ('while_stmt -> WHILE LPAREN bool_expr RPAREN compound_stmt','while_stmt',5,'p_def_while_stmt','Parser.py',280),
  ('compound_stmt -> stmt','compound_stmt',1,'p_def_compound_stmt','Parser.py',287),
  ('compound_stmt -> SEMICOLON','compound_stmt',1,'p_def_compound_stmt','Parser.py',288),
  ('compound_stmt -> LCURL RCURL','compound_stmt',2,'p_def_compound_stmt','Parser.py',289),
  ('compound_stmt -> LCURL body RCURL','compound_stmt',3,'p_def_compound_stmt','Parser.py',290),
  ('assgn -> ptr_assgn','assgn',1,'p_def_assgn','Parser.py',306),
  ('assgn -> num_assgn','assgn',1,'p_def_assgn','Parser.py',307),
  ('decl -> type decl_list','decl',2,'p_def_decl','Parser.py',313),
  ('decl_list -> decl_list COMMA ID','decl_list',3,'p_def_decl_list','Parser.py',320),
  ('decl_list -> decl_list COMMA ptr','decl_list',3,'p_def_decl_list','Parser.py',321),
  ('decl_list -> ID','decl_list',1,'p_def_decl_list','Parser.py',322),
  ('decl_list -> ptr','decl_list',1,'p_def_decl_list','Parser.py',323),
  ('ptr_assgn -> ptr EQUALS ptr_expr','ptr_assgn',3,'p_def_ptr_assgn','Parser.py',337),
  ('num_assgn -> ID EQUALS ptr_expr','num_assgn',3,'p_def_num_assgn','Parser.py',343),
  ('bool_expr -> bool_expr OR OR a_bool_expr','bool_expr',4,'p_def_bool_expr','Parser.py',355),
  ('bool_expr -> a_bool_expr','bool_expr',1,'p_def_bool_expr','Parser.py',356),
  ('a_bool_expr -> a_bool_expr AND AND n_bool_expr','a_bool_expr',4,'p_def_a_bool_expr','Parser.py',365),
  ('a_bool_expr -> n_bool_expr','a_bool_expr',1,'p_def_a_bool_expr','Parser.py',366),
  ('n_bool_expr -> NOT n_bool_expr','n_bool_expr',2,'p_def_n_bool_expr','Parser.py',374),
  ('n_bool_expr -> sub_bool_expr','n_bool_expr',1,'p_def_n_bool_expr','Parser.py',375),
  ('n_bool_expr -> LPAREN bool_expr RPAREN','n_bool_expr',3,'p_def_n_bool_expr','Parser.py',376),
  ('sub_bool_expr -> ptr_expr GT ptr_expr','sub_bool_expr',3,'p_def_sub_bool_expr','Parser.py',388),
  ('sub_bool_expr -> ptr_expr GT EQUALS ptr_expr','sub_bool_expr',4,'p_def_sub_bool_expr','Parser.py',389),
  ('sub_bool_expr -> ptr_expr LT ptr_expr','sub_bool_expr',3,'p_def_sub_bool_expr','Parser.py',390),
  ('sub_bool_expr -> ptr_expr LT EQUALS ptr_expr','sub_bool_expr',4,'p_def_sub_bool_expr','Parser.py',391),
  ('sub_bool_expr -> ptr_expr EQUALS EQUALS ptr_expr','sub_bool_expr',4,'p_def_sub_bool_expr','Parser.py',392),
  ('sub_bool_expr -> ptr_expr NOT EQUALS ptr_expr','sub_bool_expr',4,'p_def_sub_bool_expr','Parser.py',393),
  ('ptr_expr -> ptr_expr PLUS ptr_factor','ptr_expr',3,'p_def_ptr_add_expr','Parser.py',409),
  ('ptr_expr -> ptr_expr MINUS ptr_factor','ptr_expr',3,'p_def_ptr_add_expr','Parser.py',410),
  ('ptr_expr -> ptr_factor','ptr_expr',1,'p_def_ptr_add_expr','Parser.py',411),
  ('ptr_factor -> ptr_factor STAR ptr_term','ptr_factor',3,'p_def_ptr_factor','Parser.py',425),
  ('ptr_factor -> ptr_factor SLASH ptr_term','ptr_factor',3,'p_def_ptr_factor','Parser.py',426),
  ('ptr_factor -> ptr_term','ptr_factor',1,'p_def_ptr_factor','Parser.py',427),
  ('ptr_term -> MINUS ptr_term','ptr_term',2,'p_def_ptr_term','Parser.py',440),
  ('ptr_term -> ptr_expr_base','ptr_term',1,'p_def_ptr_term','Parser.py',441),
  ('ptr_expr_base -> ID','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',450),
  ('ptr_expr_base -> NUM','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',451),
  ('ptr_expr_base -> ptr','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',452),
  ('ptr_expr_base -> addr','ptr_expr_base',1,'p_def_ptr_expr_base','Parser.py',453),
  ('ptr_expr_base -> LPAREN ptr_expr RPAREN','ptr_expr_base',3,'p_def_ptr_expr_base','Parser.py',454),
  ('ptr -> STAR ptr','ptr',2,'p_def_ptr','Parser.py',470),
  ('ptr -> STAR ID','ptr',2,'p_def_ptr','Parser.py',471),
  ('ptr -> STAR addr','ptr',2,'p_def_ptr','Parser.py',472),
  ('addr -> AND ID','addr',2,'p_def_addr','Parser.py',481),
  ('addr -> AND ptr','addr',2,'p_def_addr','Parser.py',482),
  ('addr -> AND addr','addr',2,'p_def_addr','Parser.py',483),
]
